op {
  graph_op_name: "NonMaxSuppressionV5"
  in_arg {
    name: "boxes"
    description: <<END
A 2-D float tensor of shape `[num_boxes, 4]`.
END
  }
  in_arg {
    name: "scores"
    description: <<END
A 1-D float tensor of shape `[num_boxes]` representing a single
score corresponding to each box (each row of boxes).
END
  }
  in_arg {
    name: "max_output_size"
    description: <<END
A scalar integer tensor representing the maximum number of
boxes to be selected by non max suppression.
END
  }
  in_arg {
    name: "iou_threshold"
    description: <<END
A 0-D float tensor representing the threshold for deciding whether
boxes overlap too much with respect to IOU.
END
  }
  in_arg {
    name: "score_threshold"
    description: <<END
A 0-D float tensor representing the threshold for deciding when to remove
boxes based on score.
END
  }
  in_arg {
    name: "soft_nms_sigma"
    description: <<END
A 0-D float tensor representing the sigma parameter for Soft NMS; see Bodla et
al (c.f. https://arxiv.org/abs/1704.04503).  When `soft_nms_sigma=0.0` (which
is default), we fall back to standard (hard) NMS.
END
  }
  attr {
    name: "pad_to_max_output_size"
    description: <<END
If true, the output `selected_indices` is padded to be of length
`max_output_size`. Defaults to false.
END
  }
  out_arg {
    name: "selected_indices"
    description: <<END
A 1-D integer tensor of shape `[M]` representing the selected
indices from the boxes tensor, where `M <= max_output_size`.
END
  }
  out_arg {
    name: "selected_scores"
    description: <<END
A 1-D float tensor of shape `[M]` representing the corresponding
scores for each selected box, where `M <= max_output_size`.  Scores only differ
from corresponding input scores when using Soft NMS (i.e. when
`soft_nms_sigma>0`)
END
  }
  out_arg {
    name: "valid_outputs"
    description: <<END
A 0-D integer tensor representing the number of valid elements in
`selected_indices`, with the valid elements appearing first.
END
  }
  summary: "Greedily selects a subset of bounding boxes in descending order of score,"
  description: <<END
pruning away boxes that have high intersection-over-union (IOU) overlap
with previously selected boxes.  Bounding boxes with score less than
`score_threshold` are removed.  Bounding boxes are supplied as
[y1, x1, y2, x2], where (y1, x1) and (y2, x2) are the coordinates of any
diagonal pair of box corners and the coordinates can be provided as normalized
(i.e., lying in the interval [0, 1]) or absolute.  Note that this algorithm
is agnostic to where the origin is in the coordinate system and more
generally is invariant to orthogonal transformations and translations
of the coordinate system; thus translating or reflections of the coordinate
system result in the same boxes being selected by the algorithm.
The output of this operation is a set of integers indexing into the input
collection of bounding boxes representing the selected boxes.  The bounding
box coordinates corresponding to the selected indices can then be obtained
using the `tf.gather operation`.  For example:
  selected_indices = tf.image.non_max_suppression_v2(
      boxes, scores, max_output_size, iou_threshold, score_threshold)
  selected_boxes = tf.gather(boxes, selected_indices)
This op also supports a Soft-NMS (with Gaussian weighting) mode (c.f.
Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score
of other overlapping boxes instead of directly causing them to be pruned.
To enable this Soft-NMS mode, set the `soft_nms_sigma` parameter to be
larger than 0.
END
}
