3DBall:
  check_only_shape: true # model uses RandomNormal
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/3DBall/TFModels/3DBall.bytes
  model: 3DBall.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [3, 8]
  outputs:
    - action:0
    - action_probs:0
    - value_estimate:0

3DBallHard:
  check_only_shape: true # model uses RandomNormal
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/3DBall/TFModels/3DBallHard.bytes
  model: 3DBallHard.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 25]
  outputs:
    - action:0

Basic:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Basic/TFModels/Basic.bytes
  model: Basic.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 20]
    "action_masks:0": [1,3]
  outputs:
    - action:0
    - action_probs:0
    - value_estimate:0

#Banana:
#  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/BananaCollectors/TFModels/Banana.bytes
#  model: Banana.bytes
#  input_get: get_random256
#  inputs:
#    "vector_observation:0": [1, 159]
#  outputs:
#    - action:0
#    - action_probs:0
#    - value_estimate:0

Bouncer:
  check_only_shape: true # model uses RandomNormal
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Bouncer/TFModels/Bouncer.bytes
  model: Bouncer.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 18]
  outputs:
    - action_probs:0
    - value_estimate:0

DynamicCrawler:
  check_only_shape: true
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Crawler/TFModels/DynamicCrawler.bytes
  model: DynamicCrawler.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 129]
  outputs:
    - action_probs:0
    - value_estimate:0
    - action:0

FixedCrawler:
  check_only_shape: true
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Crawler/TFModels/FixedCrawler.bytes
  model: FixedCrawler.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 129]
  outputs:
    - action_probs:0
    - value_estimate:0
    - action:0

GridWorld_3x3:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/GridWorld/TFModels/GridWorld_3x3.bytes
  model: GridWorld_3x3.bytes
  check_only_shape: true
  input_get: get_random
  inputs:
    "visual_observation_0:0": [1, 84, 84, 3]
    "action_masks:0": [1,5]
  outputs:
    - action_probs:0
    - value_estimate:0
    - action:0

GridWorld_5x5:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/GridWorld/TFModels/GridWorld_5x5.bytes
  model: GridWorld_5x5.bytes
  input_get: get_random
  check_only_shape: true
  inputs:
    "visual_observation_0:0": [1, 84, 84, 3]
    "action_masks:0": [1,5]
  outputs:
    - action_probs:0
    - value_estimate:0
    - action:0

#Hallway:
#  # needs: lstm
#  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Hallway/TFModels/Hallway.bytes
#  model: Hallway.bytes
#  input_get: get_random
#  inputs:
#    "vector_observation:0": np.random.uniform(0.0, 0.4, (1, 36)) #[1, 36]
#    "recurrent_in:0": [1, 256]
#    "sequence_length:0": np.array(1)
#    "action_masks:0": np.array([[1, 1, 1, 1, 1]])
#    "prev_action:0": np.array([[1]]) # val must be in between 0 and 4 inclusively
#  outputs:
#    - action_probs:0
#    - value_estimate:0
#    # please change this to action:0 for real conversion.
#    - Log:0 #  use Log:0 to replace action:0, because mutinomial is random sample, so results won't usually be same.
#    - recurrent_out:0

Hallway-realdata:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Hallway/TFModels/Hallway.bytes
  model: Hallway.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": np.array([[0.05,0,0,0,0,1,0,0.6593311,1,0,0,0,0,0,0.6998498,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0]])
    "recurrent_in:0": np.array([[-19.16806,-0.6786165,0.3773187,-1.735622,0.9288596,-22.41111,0.03793786,24.57527,-0.9953351,-0.003674087,0.9596067,-21.13393,-2.524004,-1.007865,-8.464031,15.43917,0.8481855,-0.4543202,-0.01817324,-9.539709,-1.142,0.1773573,-0.864534,-9.820593,-0.4480057,-0.5432974,-24.71591,0.7488516,8.949741,-3.993588,21.41687,-12.98925,0.4072536,19.83711,-2.392606,-4.442297,-1.055177,4.080074,-0.5255321,-1.783465,-0.9684224,1.535899,-17.93397,1.264794,-0.7516168,0.06599777,15.02081,0.4620495,-1.56121E-05,-6.17171,1.011881,-22.66444,2.203501,-0.5321159,-1.70173,1.057571,19.0454,0.836036,3.914334,1.021435,24.77819,-0.9962497,-0.9881474,-12.52169,2.384809,2.582032,-0.7132821,4.371857,0.9358705,0.6696596,-1.068141,-4.430694,-0.3850251,-5.653079,19.16739,0.9860153,-24.54375,1.417878,14.25172,-11.11375,-0.5809321,0.004106492,1.074712,-24.88679,24.82731,3.24028,-1.205177,0.7159168,-15.50364,12.94914,23.22084,0.01783782,0.7312504,0.09140479,1.010814,22.84891,-0.8399385,-8.283802,-1.79898,2.063054,7.2353,-0.2557352,-0.8838486,0.256143,3.26577,-9.122565,1.665186,0.96194,10.08727,-2.191509,-6.906248,-21.16457,0.02471177,-0.563696,1.552084,-0.4008567,0.4163182,5.81489,11.76537,0.1035176,0.9265102,0.4884391,1.702462,5.365175,-0.9061769,18.60464,18.75807,-9.247608,-0.1231112,-0.05688319,0.04588668,-0.003282169,0.7148385,-0.07915595,0.03767229,0.03875041,-0.7482976,-0.003640667,0.7440498,-0.01488971,-0.8830844,-0.6169339,-0.3752396,0.7556562,0.03069333,-0.4163946,-0.01816597,-0.2166926,-0.6962324,0.01660174,-0.3533552,-0.9923794,-0.4196632,-0.4906763,-0.7894255,0.6053551,0.157729,-0.5514584,0.05636473,-0.9983761,0.361168,0.9935917,-0.9703691,-0.8881078,-0.7827934,0.9994165,-0.4653245,-0.0353115,-0.747499,0.7496303,-0.81702,0.0004784628,-0.5380484,0.02038009,0.5302051,0.008941471,-1.550565E-05,-0.9792232,0.7092158,-0.8356461,0.9747989,-0.4776483,-0.9345316,0.7553458,0.004848811,0.6815702,0.9991706,0.2016836,0.1136584,-0.1002228,-0.7426064,-0.9539768,0.6979619,0.792325,-0.1667042,0.8803928,0.7313128,0.4922832,-0.7103179,-0.6575707,-0.3589558,-0.4229501,0.1269114,0.5508389,-0.9541129,0.8888932,0.9877842,-0.9990011,-0.02015939,0.004007987,0.7513929,-0.9999847,7.474466E-05,0.9933375,-0.1136429,0.6135561,-0.01754129,0.977549,0.9997538,0.01651744,0.5959536,0.0001709221,0.7660682,0.8675441,-0.6853433,-0.6400937,-0.9452186,0.010912,0.1121578,-0.0781192,-0.06673954,0.2478876,0.9866395,-0.9992908,0.04850676,0.6877714,0.8217663,-0.9268699,-0.9911464,-0.9733199,0.001588805,-0.2774847,0.4592622,-0.2935698,0.2872599,0.9987071,0.02979482,0.10309,0.1875446,0.4508937,0.192848,0.6498027,-0.5495942,0.9207275,0.3533525,-0.999471]])
    "sequence_length:0": np.array(1)
    "action_masks:0": np.array([[1, 1, 1, 1, 1]])
    "prev_action:0": np.array([[1]]) # val must be in between 0 and 4 inclusively
  outputs:
    - action_probs:0
    - value_estimate:0
    # please change this to action:0 for real conversion.
    - Log:0 # use Log:0 to replace action:0, because mutinomial is random sample, so results won't usually be same.
    - recurrent_out:0

PushBlock:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/PushBlock/TFModels/PushBlock.bytes
  model: PushBlock.bytes
  input_get: get_random256
  inputs:
    "vector_observation:0": [1, 210]
    "action_masks:0": [1,7]
  outputs:
    - action_probs:0
    - value_estimate:0
    - action:0

Reacher:
  check_only_shape: true
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Reacher/TFModels/Reacher.bytes
  model: Reacher.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 33]
  outputs:
    - action:0
    - value_estimate:0
    - action_probs:0

SoccerTwos:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Soccer/TFModels/SoccerTwos.bytes
  model: SoccerTwos.bytes
  check_only_shape: true
  input_get: get_random
  inputs:
    "GoalieBrain/vector_observation:0": [1, 336]
    "StrikerBrain/vector_observation:0": [1, 336]
    "GoalieBrain/action_masks:0": [1,5]
    "StrikerBrain/action_masks:0": [1,7]
  outputs:
    - GoalieBrain/action_probs:0
    - GoalieBrain/action:0
    - GoalieBrain/value_estimate:0
    - StrikerBrain/action_probs:0
    - StrikerBrain/action:0
    - StrikerBrain/value_estimate:0

Tennis:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Tennis/TFModels/Tennis.bytes
  model: Tennis.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 24]
  outputs:
    - value_estimate:0

WallJump:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/WallJump/TFModels/WallJump.bytes
  model: WallJump.bytes
  check_only_shape: true
  input_get: get_random
  inputs:
    "SmallWallBrain/vector_observation:0": [1, 444]
    "SmallWallBrain/action_masks:0": [1,11]
    "BigWallBrain/vector_observation:0": [1, 444]
    "BigWallBrain/action_masks:0": [1,11]
  outputs:
    - SmallWallBrain/action_probs:0
    - SmallWallBrain/action:0
    - SmallWallBrain/value_estimate:0
    - BigWallBrain/action_probs:0
    - BigWallBrain/action:0
    - BigWallBrain/value_estimate:0

Pyramids:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Pyramids/TFModels/Pyramids.bytes
  model: Pyramids.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 172]
  outputs:
    - value_estimate:0

Walker:
  url: https://github.com/Unity-Technologies/ml-agents/raw/master/UnitySDK/Assets/ML-Agents/Examples/Walker/TFModels/Walker.bytes
  model: Walker.bytes
  input_get: get_random
  inputs:
    "vector_observation:0": [1, 212]
  outputs:
    - value_estimate:0

