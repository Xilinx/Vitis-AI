// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: target.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_target_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_target_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_target_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_target_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_target_2eproto;
namespace vitis {
namespace ai {
class Target;
class TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class Target_Alu;
class Target_AluDefaultTypeInternal;
extern Target_AluDefaultTypeInternal _Target_Alu_default_instance_;
class Target_Alu_AluLimit;
class Target_Alu_AluLimitDefaultTypeInternal;
extern Target_Alu_AluLimitDefaultTypeInternal _Target_Alu_AluLimit_default_instance_;
class Target_BankGroup;
class Target_BankGroupDefaultTypeInternal;
extern Target_BankGroupDefaultTypeInternal _Target_BankGroup_default_instance_;
class Target_BankGroup_AdjustableWordWidth;
class Target_BankGroup_AdjustableWordWidthDefaultTypeInternal;
extern Target_BankGroup_AdjustableWordWidthDefaultTypeInternal _Target_BankGroup_AdjustableWordWidth_default_instance_;
class Target_Conv;
class Target_ConvDefaultTypeInternal;
extern Target_ConvDefaultTypeInternal _Target_Conv_default_instance_;
class Target_Conv_ChannelAugmentation;
class Target_Conv_ChannelAugmentationDefaultTypeInternal;
extern Target_Conv_ChannelAugmentationDefaultTypeInternal _Target_Conv_ChannelAugmentation_default_instance_;
class Target_Conv_ConvLimit;
class Target_Conv_ConvLimitDefaultTypeInternal;
extern Target_Conv_ConvLimitDefaultTypeInternal _Target_Conv_ConvLimit_default_instance_;
class Target_Conv_OutputBankGroup;
class Target_Conv_OutputBankGroupDefaultTypeInternal;
extern Target_Conv_OutputBankGroupDefaultTypeInternal _Target_Conv_OutputBankGroup_default_instance_;
class Target_Dwconv;
class Target_DwconvDefaultTypeInternal;
extern Target_DwconvDefaultTypeInternal _Target_Dwconv_default_instance_;
class Target_Dwconv_DwconvLimit;
class Target_Dwconv_DwconvLimitDefaultTypeInternal;
extern Target_Dwconv_DwconvLimitDefaultTypeInternal _Target_Dwconv_DwconvLimit_default_instance_;
class Target_Eltwise;
class Target_EltwiseDefaultTypeInternal;
extern Target_EltwiseDefaultTypeInternal _Target_Eltwise_default_instance_;
class Target_Eltwise_ConvCascade;
class Target_Eltwise_ConvCascadeDefaultTypeInternal;
extern Target_Eltwise_ConvCascadeDefaultTypeInternal _Target_Eltwise_ConvCascade_default_instance_;
class Target_Load;
class Target_LoadDefaultTypeInternal;
extern Target_LoadDefaultTypeInternal _Target_Load_default_instance_;
class Target_Load_FixIFMPortWidth;
class Target_Load_FixIFMPortWidthDefaultTypeInternal;
extern Target_Load_FixIFMPortWidthDefaultTypeInternal _Target_Load_FixIFMPortWidth_default_instance_;
class Target_Load_MeanvalueReduction;
class Target_Load_MeanvalueReductionDefaultTypeInternal;
extern Target_Load_MeanvalueReductionDefaultTypeInternal _Target_Load_MeanvalueReduction_default_instance_;
class Target_Load_WeightSplit;
class Target_Load_WeightSplitDefaultTypeInternal;
extern Target_Load_WeightSplitDefaultTypeInternal _Target_Load_WeightSplit_default_instance_;
class Target_Move;
class Target_MoveDefaultTypeInternal;
extern Target_MoveDefaultTypeInternal _Target_Move_default_instance_;
class Target_Nonlinear;
class Target_NonlinearDefaultTypeInternal;
extern Target_NonlinearDefaultTypeInternal _Target_Nonlinear_default_instance_;
class Target_PadLimit;
class Target_PadLimitDefaultTypeInternal;
extern Target_PadLimitDefaultTypeInternal _Target_PadLimit_default_instance_;
class Target_Pool;
class Target_PoolDefaultTypeInternal;
extern Target_PoolDefaultTypeInternal _Target_Pool_default_instance_;
class Target_Pool_AvgLimit;
class Target_Pool_AvgLimitDefaultTypeInternal;
extern Target_Pool_AvgLimitDefaultTypeInternal _Target_Pool_AvgLimit_default_instance_;
class Target_Pool_MaxLimit;
class Target_Pool_MaxLimitDefaultTypeInternal;
extern Target_Pool_MaxLimitDefaultTypeInternal _Target_Pool_MaxLimit_default_instance_;
class Target_Save;
class Target_SaveDefaultTypeInternal;
extern Target_SaveDefaultTypeInternal _Target_Save_default_instance_;
class Target_Save_FixIFMPortWidth;
class Target_Save_FixIFMPortWidthDefaultTypeInternal;
extern Target_Save_FixIFMPortWidthDefaultTypeInternal _Target_Save_FixIFMPortWidth_default_instance_;
class Target_Threshold;
class Target_ThresholdDefaultTypeInternal;
extern Target_ThresholdDefaultTypeInternal _Target_Threshold_default_instance_;
}  // namespace ai
}  // namespace vitis
PROTOBUF_NAMESPACE_OPEN
template<> ::vitis::ai::Target* Arena::CreateMaybeMessage<::vitis::ai::Target>(Arena*);
template<> ::vitis::ai::Target_Alu* Arena::CreateMaybeMessage<::vitis::ai::Target_Alu>(Arena*);
template<> ::vitis::ai::Target_Alu_AluLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_Alu_AluLimit>(Arena*);
template<> ::vitis::ai::Target_BankGroup* Arena::CreateMaybeMessage<::vitis::ai::Target_BankGroup>(Arena*);
template<> ::vitis::ai::Target_BankGroup_AdjustableWordWidth* Arena::CreateMaybeMessage<::vitis::ai::Target_BankGroup_AdjustableWordWidth>(Arena*);
template<> ::vitis::ai::Target_Conv* Arena::CreateMaybeMessage<::vitis::ai::Target_Conv>(Arena*);
template<> ::vitis::ai::Target_Conv_ChannelAugmentation* Arena::CreateMaybeMessage<::vitis::ai::Target_Conv_ChannelAugmentation>(Arena*);
template<> ::vitis::ai::Target_Conv_ConvLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_Conv_ConvLimit>(Arena*);
template<> ::vitis::ai::Target_Conv_OutputBankGroup* Arena::CreateMaybeMessage<::vitis::ai::Target_Conv_OutputBankGroup>(Arena*);
template<> ::vitis::ai::Target_Dwconv* Arena::CreateMaybeMessage<::vitis::ai::Target_Dwconv>(Arena*);
template<> ::vitis::ai::Target_Dwconv_DwconvLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_Dwconv_DwconvLimit>(Arena*);
template<> ::vitis::ai::Target_Eltwise* Arena::CreateMaybeMessage<::vitis::ai::Target_Eltwise>(Arena*);
template<> ::vitis::ai::Target_Eltwise_ConvCascade* Arena::CreateMaybeMessage<::vitis::ai::Target_Eltwise_ConvCascade>(Arena*);
template<> ::vitis::ai::Target_Load* Arena::CreateMaybeMessage<::vitis::ai::Target_Load>(Arena*);
template<> ::vitis::ai::Target_Load_FixIFMPortWidth* Arena::CreateMaybeMessage<::vitis::ai::Target_Load_FixIFMPortWidth>(Arena*);
template<> ::vitis::ai::Target_Load_MeanvalueReduction* Arena::CreateMaybeMessage<::vitis::ai::Target_Load_MeanvalueReduction>(Arena*);
template<> ::vitis::ai::Target_Load_WeightSplit* Arena::CreateMaybeMessage<::vitis::ai::Target_Load_WeightSplit>(Arena*);
template<> ::vitis::ai::Target_Move* Arena::CreateMaybeMessage<::vitis::ai::Target_Move>(Arena*);
template<> ::vitis::ai::Target_Nonlinear* Arena::CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(Arena*);
template<> ::vitis::ai::Target_PadLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_PadLimit>(Arena*);
template<> ::vitis::ai::Target_Pool* Arena::CreateMaybeMessage<::vitis::ai::Target_Pool>(Arena*);
template<> ::vitis::ai::Target_Pool_AvgLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_Pool_AvgLimit>(Arena*);
template<> ::vitis::ai::Target_Pool_MaxLimit* Arena::CreateMaybeMessage<::vitis::ai::Target_Pool_MaxLimit>(Arena*);
template<> ::vitis::ai::Target_Save* Arena::CreateMaybeMessage<::vitis::ai::Target_Save>(Arena*);
template<> ::vitis::ai::Target_Save_FixIFMPortWidth* Arena::CreateMaybeMessage<::vitis::ai::Target_Save_FixIFMPortWidth>(Arena*);
template<> ::vitis::ai::Target_Threshold* Arena::CreateMaybeMessage<::vitis::ai::Target_Threshold>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vitis {
namespace ai {

enum Target_BankGroup_AdjustableWordWidth_WordWidthSwitch : int {
  Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankDepth = 0,
  Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankWidth = 1,
  Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_IsValid(int value);
constexpr Target_BankGroup_AdjustableWordWidth_WordWidthSwitch Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_MIN = Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankDepth;
constexpr Target_BankGroup_AdjustableWordWidth_WordWidthSwitch Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_MAX = Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankWidth;
constexpr int Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_ARRAYSIZE = Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_descriptor();
template<typename T>
inline const std::string& Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Target_BankGroup_AdjustableWordWidth_WordWidthSwitch>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_descriptor(), enum_t_value);
}
inline bool Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Target_BankGroup_AdjustableWordWidth_WordWidthSwitch* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Target_BankGroup_AdjustableWordWidth_WordWidthSwitch>(
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_descriptor(), name, value);
}
enum Target_Nonlinear_NonlinearType : int {
  Target_Nonlinear_NonlinearType_relu = 0,
  Target_Nonlinear_NonlinearType_prelu = 1,
  Target_Nonlinear_NonlinearType_leaky_relu = 2,
  Target_Nonlinear_NonlinearType_relu_six = 3,
  Target_Nonlinear_NonlinearType_hsigmoid = 4,
  Target_Nonlinear_NonlinearType_hswish = 5,
  Target_Nonlinear_NonlinearType_Target_Nonlinear_NonlinearType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Target_Nonlinear_NonlinearType_Target_Nonlinear_NonlinearType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Target_Nonlinear_NonlinearType_IsValid(int value);
constexpr Target_Nonlinear_NonlinearType Target_Nonlinear_NonlinearType_NonlinearType_MIN = Target_Nonlinear_NonlinearType_relu;
constexpr Target_Nonlinear_NonlinearType Target_Nonlinear_NonlinearType_NonlinearType_MAX = Target_Nonlinear_NonlinearType_hswish;
constexpr int Target_Nonlinear_NonlinearType_NonlinearType_ARRAYSIZE = Target_Nonlinear_NonlinearType_NonlinearType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Target_Nonlinear_NonlinearType_descriptor();
template<typename T>
inline const std::string& Target_Nonlinear_NonlinearType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Target_Nonlinear_NonlinearType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Target_Nonlinear_NonlinearType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Target_Nonlinear_NonlinearType_descriptor(), enum_t_value);
}
inline bool Target_Nonlinear_NonlinearType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Target_Nonlinear_NonlinearType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Target_Nonlinear_NonlinearType>(
    Target_Nonlinear_NonlinearType_descriptor(), name, value);
}
enum Target_Eltwise_ElewType : int {
  Target_Eltwise_ElewType_add = 0,
  Target_Eltwise_ElewType_mult = 1,
  Target_Eltwise_ElewType_Target_Eltwise_ElewType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Target_Eltwise_ElewType_Target_Eltwise_ElewType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Target_Eltwise_ElewType_IsValid(int value);
constexpr Target_Eltwise_ElewType Target_Eltwise_ElewType_ElewType_MIN = Target_Eltwise_ElewType_add;
constexpr Target_Eltwise_ElewType Target_Eltwise_ElewType_ElewType_MAX = Target_Eltwise_ElewType_mult;
constexpr int Target_Eltwise_ElewType_ElewType_ARRAYSIZE = Target_Eltwise_ElewType_ElewType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Target_Eltwise_ElewType_descriptor();
template<typename T>
inline const std::string& Target_Eltwise_ElewType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Target_Eltwise_ElewType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Target_Eltwise_ElewType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Target_Eltwise_ElewType_descriptor(), enum_t_value);
}
inline bool Target_Eltwise_ElewType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Target_Eltwise_ElewType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Target_Eltwise_ElewType>(
    Target_Eltwise_ElewType_descriptor(), name, value);
}
enum Target_Pool_PoolType : int {
  Target_Pool_PoolType_max = 0,
  Target_Pool_PoolType_avg = 1,
  Target_Pool_PoolType_max_reduce = 2,
  Target_Pool_PoolType_Target_Pool_PoolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Target_Pool_PoolType_Target_Pool_PoolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Target_Pool_PoolType_IsValid(int value);
constexpr Target_Pool_PoolType Target_Pool_PoolType_PoolType_MIN = Target_Pool_PoolType_max;
constexpr Target_Pool_PoolType Target_Pool_PoolType_PoolType_MAX = Target_Pool_PoolType_max_reduce;
constexpr int Target_Pool_PoolType_PoolType_ARRAYSIZE = Target_Pool_PoolType_PoolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Target_Pool_PoolType_descriptor();
template<typename T>
inline const std::string& Target_Pool_PoolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Target_Pool_PoolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Target_Pool_PoolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Target_Pool_PoolType_descriptor(), enum_t_value);
}
inline bool Target_Pool_PoolType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Target_Pool_PoolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Target_Pool_PoolType>(
    Target_Pool_PoolType_descriptor(), name, value);
}
enum Target_Alu_AluType : int {
  Target_Alu_AluType_dwconv = 0,
  Target_Alu_AluType_prelu = 1,
  Target_Alu_AluType_avg_pool = 2,
  Target_Alu_AluType_max_pool = 3,
  Target_Alu_AluType_leaky_relu = 4,
  Target_Alu_AluType_max_reduce = 5,
  Target_Alu_AluType_dwconv_no_bias = 6,
  Target_Alu_AluType_hsigmoid = 7,
  Target_Alu_AluType_Target_Alu_AluType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Target_Alu_AluType_Target_Alu_AluType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Target_Alu_AluType_IsValid(int value);
constexpr Target_Alu_AluType Target_Alu_AluType_AluType_MIN = Target_Alu_AluType_dwconv;
constexpr Target_Alu_AluType Target_Alu_AluType_AluType_MAX = Target_Alu_AluType_hsigmoid;
constexpr int Target_Alu_AluType_AluType_ARRAYSIZE = Target_Alu_AluType_AluType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Target_Alu_AluType_descriptor();
template<typename T>
inline const std::string& Target_Alu_AluType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Target_Alu_AluType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Target_Alu_AluType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Target_Alu_AluType_descriptor(), enum_t_value);
}
inline bool Target_Alu_AluType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Target_Alu_AluType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Target_Alu_AluType>(
    Target_Alu_AluType_descriptor(), name, value);
}
// ===================================================================

class Target_BankGroup_AdjustableWordWidth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.BankGroup.AdjustableWordWidth) */ {
 public:
  inline Target_BankGroup_AdjustableWordWidth() : Target_BankGroup_AdjustableWordWidth(nullptr) {}
  virtual ~Target_BankGroup_AdjustableWordWidth();

  Target_BankGroup_AdjustableWordWidth(const Target_BankGroup_AdjustableWordWidth& from);
  Target_BankGroup_AdjustableWordWidth(Target_BankGroup_AdjustableWordWidth&& from) noexcept
    : Target_BankGroup_AdjustableWordWidth() {
    *this = ::std::move(from);
  }

  inline Target_BankGroup_AdjustableWordWidth& operator=(const Target_BankGroup_AdjustableWordWidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_BankGroup_AdjustableWordWidth& operator=(Target_BankGroup_AdjustableWordWidth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_BankGroup_AdjustableWordWidth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_BankGroup_AdjustableWordWidth* internal_default_instance() {
    return reinterpret_cast<const Target_BankGroup_AdjustableWordWidth*>(
               &_Target_BankGroup_AdjustableWordWidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Target_BankGroup_AdjustableWordWidth& a, Target_BankGroup_AdjustableWordWidth& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_BankGroup_AdjustableWordWidth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_BankGroup_AdjustableWordWidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_BankGroup_AdjustableWordWidth* New() const final {
    return CreateMaybeMessage<Target_BankGroup_AdjustableWordWidth>(nullptr);
  }

  Target_BankGroup_AdjustableWordWidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_BankGroup_AdjustableWordWidth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_BankGroup_AdjustableWordWidth& from);
  void MergeFrom(const Target_BankGroup_AdjustableWordWidth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_BankGroup_AdjustableWordWidth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.BankGroup.AdjustableWordWidth";
  }
  protected:
  explicit Target_BankGroup_AdjustableWordWidth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_BankGroup_AdjustableWordWidth_WordWidthSwitch WordWidthSwitch;
  static constexpr WordWidthSwitch DataBit_x_BankDepth =
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankDepth;
  static constexpr WordWidthSwitch DataBit_x_BankWidth =
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_DataBit_x_BankWidth;
  static inline bool WordWidthSwitch_IsValid(int value) {
    return Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_IsValid(value);
  }
  static constexpr WordWidthSwitch WordWidthSwitch_MIN =
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_MIN;
  static constexpr WordWidthSwitch WordWidthSwitch_MAX =
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_MAX;
  static constexpr int WordWidthSwitch_ARRAYSIZE =
    Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_WordWidthSwitch_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WordWidthSwitch_descriptor() {
    return Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_descriptor();
  }
  template<typename T>
  static inline const std::string& WordWidthSwitch_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WordWidthSwitch>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WordWidthSwitch_Name.");
    return Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Name(enum_t_value);
  }
  static inline bool WordWidthSwitch_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WordWidthSwitch* value) {
    return Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kWordWidthSwitchFieldNumber = 2,
  };
  // uint32 scale = 1;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .vitis.ai.Target.BankGroup.AdjustableWordWidth.WordWidthSwitch word_width_switch = 2;
  void clear_word_width_switch();
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch word_width_switch() const;
  void set_word_width_switch(::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch value);
  private:
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch _internal_word_width_switch() const;
  void _internal_set_word_width_switch(::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.BankGroup.AdjustableWordWidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  int word_width_switch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_BankGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.BankGroup) */ {
 public:
  inline Target_BankGroup() : Target_BankGroup(nullptr) {}
  virtual ~Target_BankGroup();

  Target_BankGroup(const Target_BankGroup& from);
  Target_BankGroup(Target_BankGroup&& from) noexcept
    : Target_BankGroup() {
    *this = ::std::move(from);
  }

  inline Target_BankGroup& operator=(const Target_BankGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_BankGroup& operator=(Target_BankGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_BankGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_BankGroup* internal_default_instance() {
    return reinterpret_cast<const Target_BankGroup*>(
               &_Target_BankGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Target_BankGroup& a, Target_BankGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_BankGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_BankGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_BankGroup* New() const final {
    return CreateMaybeMessage<Target_BankGroup>(nullptr);
  }

  Target_BankGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_BankGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_BankGroup& from);
  void MergeFrom(const Target_BankGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_BankGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.BankGroup";
  }
  protected:
  explicit Target_BankGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_BankGroup_AdjustableWordWidth AdjustableWordWidth;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 9,
    kAdjustableWordWidthFieldNumber = 8,
    kBaseIdFieldNumber = 2,
    kBankNumFieldNumber = 3,
    kBankWidthFieldNumber = 4,
    kBankDepthFieldNumber = 5,
    kWordWidthFieldNumber = 6,
    kCyclicFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 9;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .vitis.ai.Target.BankGroup.AdjustableWordWidth adjustable_word_width = 8;
  bool has_adjustable_word_width() const;
  private:
  bool _internal_has_adjustable_word_width() const;
  public:
  void clear_adjustable_word_width();
  const ::vitis::ai::Target_BankGroup_AdjustableWordWidth& adjustable_word_width() const;
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* release_adjustable_word_width();
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* mutable_adjustable_word_width();
  void set_allocated_adjustable_word_width(::vitis::ai::Target_BankGroup_AdjustableWordWidth* adjustable_word_width);
  private:
  const ::vitis::ai::Target_BankGroup_AdjustableWordWidth& _internal_adjustable_word_width() const;
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* _internal_mutable_adjustable_word_width();
  public:
  void unsafe_arena_set_allocated_adjustable_word_width(
      ::vitis::ai::Target_BankGroup_AdjustableWordWidth* adjustable_word_width);
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* unsafe_arena_release_adjustable_word_width();

  // uint32 base_id = 2;
  void clear_base_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_id() const;
  void set_base_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_id() const;
  void _internal_set_base_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bank_num = 3;
  void clear_bank_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_num() const;
  void set_bank_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bank_num() const;
  void _internal_set_bank_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bank_width = 4;
  void clear_bank_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_width() const;
  void set_bank_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bank_width() const;
  void _internal_set_bank_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bank_depth = 5;
  void clear_bank_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_depth() const;
  void set_bank_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bank_depth() const;
  void _internal_set_bank_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 word_width = 6;
  void clear_word_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 word_width() const;
  void set_word_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_word_width() const;
  void _internal_set_word_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool cyclic = 7;
  void clear_cyclic();
  bool cyclic() const;
  void set_cyclic(bool value);
  private:
  bool _internal_cyclic() const;
  void _internal_set_cyclic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.BankGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* adjustable_word_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bank_depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word_width_;
  bool cyclic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Load_MeanvalueReduction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Load.MeanvalueReduction) */ {
 public:
  inline Target_Load_MeanvalueReduction() : Target_Load_MeanvalueReduction(nullptr) {}
  virtual ~Target_Load_MeanvalueReduction();

  Target_Load_MeanvalueReduction(const Target_Load_MeanvalueReduction& from);
  Target_Load_MeanvalueReduction(Target_Load_MeanvalueReduction&& from) noexcept
    : Target_Load_MeanvalueReduction() {
    *this = ::std::move(from);
  }

  inline Target_Load_MeanvalueReduction& operator=(const Target_Load_MeanvalueReduction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Load_MeanvalueReduction& operator=(Target_Load_MeanvalueReduction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Load_MeanvalueReduction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Load_MeanvalueReduction* internal_default_instance() {
    return reinterpret_cast<const Target_Load_MeanvalueReduction*>(
               &_Target_Load_MeanvalueReduction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Target_Load_MeanvalueReduction& a, Target_Load_MeanvalueReduction& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Load_MeanvalueReduction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Load_MeanvalueReduction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Load_MeanvalueReduction* New() const final {
    return CreateMaybeMessage<Target_Load_MeanvalueReduction>(nullptr);
  }

  Target_Load_MeanvalueReduction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Load_MeanvalueReduction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Load_MeanvalueReduction& from);
  void MergeFrom(const Target_Load_MeanvalueReduction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Load_MeanvalueReduction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Load.MeanvalueReduction";
  }
  protected:
  explicit Target_Load_MeanvalueReduction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanvalueBankFieldNumber = 1,
  };
  // string meanvalue_bank = 1;
  void clear_meanvalue_bank();
  const std::string& meanvalue_bank() const;
  void set_meanvalue_bank(const std::string& value);
  void set_meanvalue_bank(std::string&& value);
  void set_meanvalue_bank(const char* value);
  void set_meanvalue_bank(const char* value, size_t size);
  std::string* mutable_meanvalue_bank();
  std::string* release_meanvalue_bank();
  void set_allocated_meanvalue_bank(std::string* meanvalue_bank);
  private:
  const std::string& _internal_meanvalue_bank() const;
  void _internal_set_meanvalue_bank(const std::string& value);
  std::string* _internal_mutable_meanvalue_bank();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Load.MeanvalueReduction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meanvalue_bank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Load_FixIFMPortWidth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Load.FixIFMPortWidth) */ {
 public:
  inline Target_Load_FixIFMPortWidth() : Target_Load_FixIFMPortWidth(nullptr) {}
  virtual ~Target_Load_FixIFMPortWidth();

  Target_Load_FixIFMPortWidth(const Target_Load_FixIFMPortWidth& from);
  Target_Load_FixIFMPortWidth(Target_Load_FixIFMPortWidth&& from) noexcept
    : Target_Load_FixIFMPortWidth() {
    *this = ::std::move(from);
  }

  inline Target_Load_FixIFMPortWidth& operator=(const Target_Load_FixIFMPortWidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Load_FixIFMPortWidth& operator=(Target_Load_FixIFMPortWidth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Load_FixIFMPortWidth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Load_FixIFMPortWidth* internal_default_instance() {
    return reinterpret_cast<const Target_Load_FixIFMPortWidth*>(
               &_Target_Load_FixIFMPortWidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Target_Load_FixIFMPortWidth& a, Target_Load_FixIFMPortWidth& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Load_FixIFMPortWidth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Load_FixIFMPortWidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Load_FixIFMPortWidth* New() const final {
    return CreateMaybeMessage<Target_Load_FixIFMPortWidth>(nullptr);
  }

  Target_Load_FixIFMPortWidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Load_FixIFMPortWidth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Load_FixIFMPortWidth& from);
  void MergeFrom(const Target_Load_FixIFMPortWidth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Load_FixIFMPortWidth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Load.FixIFMPortWidth";
  }
  protected:
  explicit Target_Load_FixIFMPortWidth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortWidthFieldNumber = 1,
  };
  // uint32 port_width = 1;
  void clear_port_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_width() const;
  void set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_width() const;
  void _internal_set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Load.FixIFMPortWidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Load_WeightSplit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Load.WeightSplit) */ {
 public:
  inline Target_Load_WeightSplit() : Target_Load_WeightSplit(nullptr) {}
  virtual ~Target_Load_WeightSplit();

  Target_Load_WeightSplit(const Target_Load_WeightSplit& from);
  Target_Load_WeightSplit(Target_Load_WeightSplit&& from) noexcept
    : Target_Load_WeightSplit() {
    *this = ::std::move(from);
  }

  inline Target_Load_WeightSplit& operator=(const Target_Load_WeightSplit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Load_WeightSplit& operator=(Target_Load_WeightSplit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Load_WeightSplit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Load_WeightSplit* internal_default_instance() {
    return reinterpret_cast<const Target_Load_WeightSplit*>(
               &_Target_Load_WeightSplit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Target_Load_WeightSplit& a, Target_Load_WeightSplit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Load_WeightSplit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Load_WeightSplit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Load_WeightSplit* New() const final {
    return CreateMaybeMessage<Target_Load_WeightSplit>(nullptr);
  }

  Target_Load_WeightSplit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Load_WeightSplit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Load_WeightSplit& from);
  void MergeFrom(const Target_Load_WeightSplit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Load_WeightSplit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Load.WeightSplit";
  }
  protected:
  explicit Target_Load_WeightSplit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWgtSplitFieldNumber = 1,
  };
  // bool wgt_split = 1;
  void clear_wgt_split();
  bool wgt_split() const;
  void set_wgt_split(bool value);
  private:
  bool _internal_wgt_split() const;
  void _internal_set_wgt_split(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Load.WeightSplit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool wgt_split_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Load) */ {
 public:
  inline Target_Load() : Target_Load(nullptr) {}
  virtual ~Target_Load();

  Target_Load(const Target_Load& from);
  Target_Load(Target_Load&& from) noexcept
    : Target_Load() {
    *this = ::std::move(from);
  }

  inline Target_Load& operator=(const Target_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Load& operator=(Target_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Load* internal_default_instance() {
    return reinterpret_cast<const Target_Load*>(
               &_Target_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Target_Load& a, Target_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Load* New() const final {
    return CreateMaybeMessage<Target_Load>(nullptr);
  }

  Target_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Load& from);
  void MergeFrom(const Target_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Load";
  }
  protected:
  explicit Target_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Load_MeanvalueReduction MeanvalueReduction;
  typedef Target_Load_FixIFMPortWidth FixIFMPortWidth;
  typedef Target_Load_WeightSplit WeightSplit;

  // accessors -------------------------------------------------------

  enum : int {
    kOutputBankFieldNumber = 2,
    kMeanvalueReductionFieldNumber = 3,
    kFixIfmPortWidthFieldNumber = 4,
    kWeightSplitFieldNumber = 5,
    kChannelParallelFieldNumber = 1,
  };
  // repeated string output_bank = 2;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // .vitis.ai.Target.Load.MeanvalueReduction meanvalue_reduction = 3;
  bool has_meanvalue_reduction() const;
  private:
  bool _internal_has_meanvalue_reduction() const;
  public:
  void clear_meanvalue_reduction();
  const ::vitis::ai::Target_Load_MeanvalueReduction& meanvalue_reduction() const;
  ::vitis::ai::Target_Load_MeanvalueReduction* release_meanvalue_reduction();
  ::vitis::ai::Target_Load_MeanvalueReduction* mutable_meanvalue_reduction();
  void set_allocated_meanvalue_reduction(::vitis::ai::Target_Load_MeanvalueReduction* meanvalue_reduction);
  private:
  const ::vitis::ai::Target_Load_MeanvalueReduction& _internal_meanvalue_reduction() const;
  ::vitis::ai::Target_Load_MeanvalueReduction* _internal_mutable_meanvalue_reduction();
  public:
  void unsafe_arena_set_allocated_meanvalue_reduction(
      ::vitis::ai::Target_Load_MeanvalueReduction* meanvalue_reduction);
  ::vitis::ai::Target_Load_MeanvalueReduction* unsafe_arena_release_meanvalue_reduction();

  // .vitis.ai.Target.Load.FixIFMPortWidth fix_ifm_port_width = 4;
  bool has_fix_ifm_port_width() const;
  private:
  bool _internal_has_fix_ifm_port_width() const;
  public:
  void clear_fix_ifm_port_width();
  const ::vitis::ai::Target_Load_FixIFMPortWidth& fix_ifm_port_width() const;
  ::vitis::ai::Target_Load_FixIFMPortWidth* release_fix_ifm_port_width();
  ::vitis::ai::Target_Load_FixIFMPortWidth* mutable_fix_ifm_port_width();
  void set_allocated_fix_ifm_port_width(::vitis::ai::Target_Load_FixIFMPortWidth* fix_ifm_port_width);
  private:
  const ::vitis::ai::Target_Load_FixIFMPortWidth& _internal_fix_ifm_port_width() const;
  ::vitis::ai::Target_Load_FixIFMPortWidth* _internal_mutable_fix_ifm_port_width();
  public:
  void unsafe_arena_set_allocated_fix_ifm_port_width(
      ::vitis::ai::Target_Load_FixIFMPortWidth* fix_ifm_port_width);
  ::vitis::ai::Target_Load_FixIFMPortWidth* unsafe_arena_release_fix_ifm_port_width();

  // .vitis.ai.Target.Load.WeightSplit weight_split = 5;
  bool has_weight_split() const;
  private:
  bool _internal_has_weight_split() const;
  public:
  void clear_weight_split();
  const ::vitis::ai::Target_Load_WeightSplit& weight_split() const;
  ::vitis::ai::Target_Load_WeightSplit* release_weight_split();
  ::vitis::ai::Target_Load_WeightSplit* mutable_weight_split();
  void set_allocated_weight_split(::vitis::ai::Target_Load_WeightSplit* weight_split);
  private:
  const ::vitis::ai::Target_Load_WeightSplit& _internal_weight_split() const;
  ::vitis::ai::Target_Load_WeightSplit* _internal_mutable_weight_split();
  public:
  void unsafe_arena_set_allocated_weight_split(
      ::vitis::ai::Target_Load_WeightSplit* weight_split);
  ::vitis::ai::Target_Load_WeightSplit* unsafe_arena_release_weight_split();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::vitis::ai::Target_Load_MeanvalueReduction* meanvalue_reduction_;
  ::vitis::ai::Target_Load_FixIFMPortWidth* fix_ifm_port_width_;
  ::vitis::ai::Target_Load_WeightSplit* weight_split_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Save_FixIFMPortWidth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Save.FixIFMPortWidth) */ {
 public:
  inline Target_Save_FixIFMPortWidth() : Target_Save_FixIFMPortWidth(nullptr) {}
  virtual ~Target_Save_FixIFMPortWidth();

  Target_Save_FixIFMPortWidth(const Target_Save_FixIFMPortWidth& from);
  Target_Save_FixIFMPortWidth(Target_Save_FixIFMPortWidth&& from) noexcept
    : Target_Save_FixIFMPortWidth() {
    *this = ::std::move(from);
  }

  inline Target_Save_FixIFMPortWidth& operator=(const Target_Save_FixIFMPortWidth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Save_FixIFMPortWidth& operator=(Target_Save_FixIFMPortWidth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Save_FixIFMPortWidth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Save_FixIFMPortWidth* internal_default_instance() {
    return reinterpret_cast<const Target_Save_FixIFMPortWidth*>(
               &_Target_Save_FixIFMPortWidth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Target_Save_FixIFMPortWidth& a, Target_Save_FixIFMPortWidth& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Save_FixIFMPortWidth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Save_FixIFMPortWidth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Save_FixIFMPortWidth* New() const final {
    return CreateMaybeMessage<Target_Save_FixIFMPortWidth>(nullptr);
  }

  Target_Save_FixIFMPortWidth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Save_FixIFMPortWidth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Save_FixIFMPortWidth& from);
  void MergeFrom(const Target_Save_FixIFMPortWidth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Save_FixIFMPortWidth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Save.FixIFMPortWidth";
  }
  protected:
  explicit Target_Save_FixIFMPortWidth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortWidthFieldNumber = 1,
  };
  // uint32 port_width = 1;
  void clear_port_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_width() const;
  void set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_width() const;
  void _internal_set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Save.FixIFMPortWidth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Save PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Save) */ {
 public:
  inline Target_Save() : Target_Save(nullptr) {}
  virtual ~Target_Save();

  Target_Save(const Target_Save& from);
  Target_Save(Target_Save&& from) noexcept
    : Target_Save() {
    *this = ::std::move(from);
  }

  inline Target_Save& operator=(const Target_Save& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Save& operator=(Target_Save&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Save& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Save* internal_default_instance() {
    return reinterpret_cast<const Target_Save*>(
               &_Target_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Target_Save& a, Target_Save& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Save* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Save* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Save* New() const final {
    return CreateMaybeMessage<Target_Save>(nullptr);
  }

  Target_Save* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Save>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Save& from);
  void MergeFrom(const Target_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Save* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Save";
  }
  protected:
  explicit Target_Save(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Save_FixIFMPortWidth FixIFMPortWidth;

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 2,
    kFixIfmPortWidthFieldNumber = 3,
    kChannelParallelFieldNumber = 1,
  };
  // repeated string input_bank = 2;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // .vitis.ai.Target.Save.FixIFMPortWidth fix_ifm_port_width = 3;
  bool has_fix_ifm_port_width() const;
  private:
  bool _internal_has_fix_ifm_port_width() const;
  public:
  void clear_fix_ifm_port_width();
  const ::vitis::ai::Target_Save_FixIFMPortWidth& fix_ifm_port_width() const;
  ::vitis::ai::Target_Save_FixIFMPortWidth* release_fix_ifm_port_width();
  ::vitis::ai::Target_Save_FixIFMPortWidth* mutable_fix_ifm_port_width();
  void set_allocated_fix_ifm_port_width(::vitis::ai::Target_Save_FixIFMPortWidth* fix_ifm_port_width);
  private:
  const ::vitis::ai::Target_Save_FixIFMPortWidth& _internal_fix_ifm_port_width() const;
  ::vitis::ai::Target_Save_FixIFMPortWidth* _internal_mutable_fix_ifm_port_width();
  public:
  void unsafe_arena_set_allocated_fix_ifm_port_width(
      ::vitis::ai::Target_Save_FixIFMPortWidth* fix_ifm_port_width);
  ::vitis::ai::Target_Save_FixIFMPortWidth* unsafe_arena_release_fix_ifm_port_width();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Save)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::vitis::ai::Target_Save_FixIFMPortWidth* fix_ifm_port_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Nonlinear PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Nonlinear) */ {
 public:
  inline Target_Nonlinear() : Target_Nonlinear(nullptr) {}
  virtual ~Target_Nonlinear();

  Target_Nonlinear(const Target_Nonlinear& from);
  Target_Nonlinear(Target_Nonlinear&& from) noexcept
    : Target_Nonlinear() {
    *this = ::std::move(from);
  }

  inline Target_Nonlinear& operator=(const Target_Nonlinear& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Nonlinear& operator=(Target_Nonlinear&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Nonlinear& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Nonlinear* internal_default_instance() {
    return reinterpret_cast<const Target_Nonlinear*>(
               &_Target_Nonlinear_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Target_Nonlinear& a, Target_Nonlinear& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Nonlinear* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Nonlinear* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Nonlinear* New() const final {
    return CreateMaybeMessage<Target_Nonlinear>(nullptr);
  }

  Target_Nonlinear* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Nonlinear>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Nonlinear& from);
  void MergeFrom(const Target_Nonlinear& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Nonlinear* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Nonlinear";
  }
  protected:
  explicit Target_Nonlinear(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Nonlinear_NonlinearType NonlinearType;
  static constexpr NonlinearType relu =
    Target_Nonlinear_NonlinearType_relu;
  static constexpr NonlinearType prelu =
    Target_Nonlinear_NonlinearType_prelu;
  static constexpr NonlinearType leaky_relu =
    Target_Nonlinear_NonlinearType_leaky_relu;
  static constexpr NonlinearType relu_six =
    Target_Nonlinear_NonlinearType_relu_six;
  static constexpr NonlinearType hsigmoid =
    Target_Nonlinear_NonlinearType_hsigmoid;
  static constexpr NonlinearType hswish =
    Target_Nonlinear_NonlinearType_hswish;
  static inline bool NonlinearType_IsValid(int value) {
    return Target_Nonlinear_NonlinearType_IsValid(value);
  }
  static constexpr NonlinearType NonlinearType_MIN =
    Target_Nonlinear_NonlinearType_NonlinearType_MIN;
  static constexpr NonlinearType NonlinearType_MAX =
    Target_Nonlinear_NonlinearType_NonlinearType_MAX;
  static constexpr int NonlinearType_ARRAYSIZE =
    Target_Nonlinear_NonlinearType_NonlinearType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NonlinearType_descriptor() {
    return Target_Nonlinear_NonlinearType_descriptor();
  }
  template<typename T>
  static inline const std::string& NonlinearType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NonlinearType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NonlinearType_Name.");
    return Target_Nonlinear_NonlinearType_Name(enum_t_value);
  }
  static inline bool NonlinearType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NonlinearType* value) {
    return Target_Nonlinear_NonlinearType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNonlinearTypeFieldNumber = 1,
  };
  // repeated .vitis.ai.Target.Nonlinear.NonlinearType nonlinear_type = 1;
  int nonlinear_type_size() const;
  private:
  int _internal_nonlinear_type_size() const;
  public:
  void clear_nonlinear_type();
  private:
  ::vitis::ai::Target_Nonlinear_NonlinearType _internal_nonlinear_type(int index) const;
  void _internal_add_nonlinear_type(::vitis::ai::Target_Nonlinear_NonlinearType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_nonlinear_type();
  public:
  ::vitis::ai::Target_Nonlinear_NonlinearType nonlinear_type(int index) const;
  void set_nonlinear_type(int index, ::vitis::ai::Target_Nonlinear_NonlinearType value);
  void add_nonlinear_type(::vitis::ai::Target_Nonlinear_NonlinearType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& nonlinear_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_nonlinear_type();

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Nonlinear)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> nonlinear_type_;
  mutable std::atomic<int> _nonlinear_type_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_PadLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.PadLimit) */ {
 public:
  inline Target_PadLimit() : Target_PadLimit(nullptr) {}
  virtual ~Target_PadLimit();

  Target_PadLimit(const Target_PadLimit& from);
  Target_PadLimit(Target_PadLimit&& from) noexcept
    : Target_PadLimit() {
    *this = ::std::move(from);
  }

  inline Target_PadLimit& operator=(const Target_PadLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_PadLimit& operator=(Target_PadLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_PadLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_PadLimit* internal_default_instance() {
    return reinterpret_cast<const Target_PadLimit*>(
               &_Target_PadLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Target_PadLimit& a, Target_PadLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_PadLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_PadLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_PadLimit* New() const final {
    return CreateMaybeMessage<Target_PadLimit>(nullptr);
  }

  Target_PadLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_PadLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_PadLimit& from);
  void MergeFrom(const Target_PadLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_PadLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.PadLimit";
  }
  protected:
  explicit Target_PadLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPadLeftFieldNumber = 1,
    kPadRightFieldNumber = 2,
    kPadTopFieldNumber = 3,
    kPadBottomFieldNumber = 4,
  };
  // string pad_left = 1;
  void clear_pad_left();
  const std::string& pad_left() const;
  void set_pad_left(const std::string& value);
  void set_pad_left(std::string&& value);
  void set_pad_left(const char* value);
  void set_pad_left(const char* value, size_t size);
  std::string* mutable_pad_left();
  std::string* release_pad_left();
  void set_allocated_pad_left(std::string* pad_left);
  private:
  const std::string& _internal_pad_left() const;
  void _internal_set_pad_left(const std::string& value);
  std::string* _internal_mutable_pad_left();
  public:

  // string pad_right = 2;
  void clear_pad_right();
  const std::string& pad_right() const;
  void set_pad_right(const std::string& value);
  void set_pad_right(std::string&& value);
  void set_pad_right(const char* value);
  void set_pad_right(const char* value, size_t size);
  std::string* mutable_pad_right();
  std::string* release_pad_right();
  void set_allocated_pad_right(std::string* pad_right);
  private:
  const std::string& _internal_pad_right() const;
  void _internal_set_pad_right(const std::string& value);
  std::string* _internal_mutable_pad_right();
  public:

  // string pad_top = 3;
  void clear_pad_top();
  const std::string& pad_top() const;
  void set_pad_top(const std::string& value);
  void set_pad_top(std::string&& value);
  void set_pad_top(const char* value);
  void set_pad_top(const char* value, size_t size);
  std::string* mutable_pad_top();
  std::string* release_pad_top();
  void set_allocated_pad_top(std::string* pad_top);
  private:
  const std::string& _internal_pad_top() const;
  void _internal_set_pad_top(const std::string& value);
  std::string* _internal_mutable_pad_top();
  public:

  // string pad_bottom = 4;
  void clear_pad_bottom();
  const std::string& pad_bottom() const;
  void set_pad_bottom(const std::string& value);
  void set_pad_bottom(std::string&& value);
  void set_pad_bottom(const char* value);
  void set_pad_bottom(const char* value, size_t size);
  std::string* mutable_pad_bottom();
  std::string* release_pad_bottom();
  void set_allocated_pad_bottom(std::string* pad_bottom);
  private:
  const std::string& _internal_pad_bottom() const;
  void _internal_set_pad_bottom(const std::string& value);
  std::string* _internal_mutable_pad_bottom();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.PadLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_left_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_right_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_top_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pad_bottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Conv_OutputBankGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Conv.OutputBankGroup) */ {
 public:
  inline Target_Conv_OutputBankGroup() : Target_Conv_OutputBankGroup(nullptr) {}
  virtual ~Target_Conv_OutputBankGroup();

  Target_Conv_OutputBankGroup(const Target_Conv_OutputBankGroup& from);
  Target_Conv_OutputBankGroup(Target_Conv_OutputBankGroup&& from) noexcept
    : Target_Conv_OutputBankGroup() {
    *this = ::std::move(from);
  }

  inline Target_Conv_OutputBankGroup& operator=(const Target_Conv_OutputBankGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Conv_OutputBankGroup& operator=(Target_Conv_OutputBankGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Conv_OutputBankGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Conv_OutputBankGroup* internal_default_instance() {
    return reinterpret_cast<const Target_Conv_OutputBankGroup*>(
               &_Target_Conv_OutputBankGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Target_Conv_OutputBankGroup& a, Target_Conv_OutputBankGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Conv_OutputBankGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Conv_OutputBankGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Conv_OutputBankGroup* New() const final {
    return CreateMaybeMessage<Target_Conv_OutputBankGroup>(nullptr);
  }

  Target_Conv_OutputBankGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Conv_OutputBankGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Conv_OutputBankGroup& from);
  void MergeFrom(const Target_Conv_OutputBankGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Conv_OutputBankGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Conv.OutputBankGroup";
  }
  protected:
  explicit Target_Conv_OutputBankGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputBankFieldNumber = 1,
  };
  // repeated string output_bank = 1;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Conv.OutputBankGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Conv_ChannelAugmentation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Conv.ChannelAugmentation) */ {
 public:
  inline Target_Conv_ChannelAugmentation() : Target_Conv_ChannelAugmentation(nullptr) {}
  virtual ~Target_Conv_ChannelAugmentation();

  Target_Conv_ChannelAugmentation(const Target_Conv_ChannelAugmentation& from);
  Target_Conv_ChannelAugmentation(Target_Conv_ChannelAugmentation&& from) noexcept
    : Target_Conv_ChannelAugmentation() {
    *this = ::std::move(from);
  }

  inline Target_Conv_ChannelAugmentation& operator=(const Target_Conv_ChannelAugmentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Conv_ChannelAugmentation& operator=(Target_Conv_ChannelAugmentation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Conv_ChannelAugmentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Conv_ChannelAugmentation* internal_default_instance() {
    return reinterpret_cast<const Target_Conv_ChannelAugmentation*>(
               &_Target_Conv_ChannelAugmentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Target_Conv_ChannelAugmentation& a, Target_Conv_ChannelAugmentation& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Conv_ChannelAugmentation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Conv_ChannelAugmentation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Conv_ChannelAugmentation* New() const final {
    return CreateMaybeMessage<Target_Conv_ChannelAugmentation>(nullptr);
  }

  Target_Conv_ChannelAugmentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Conv_ChannelAugmentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Conv_ChannelAugmentation& from);
  void MergeFrom(const Target_Conv_ChannelAugmentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Conv_ChannelAugmentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Conv.ChannelAugmentation";
  }
  protected:
  explicit Target_Conv_ChannelAugmentation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNumFieldNumber = 1,
  };
  // uint32 channel_num = 1;
  void clear_channel_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_num() const;
  void set_channel_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_num() const;
  void _internal_set_channel_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Conv.ChannelAugmentation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Conv_ConvLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Conv.ConvLimit) */ {
 public:
  inline Target_Conv_ConvLimit() : Target_Conv_ConvLimit(nullptr) {}
  virtual ~Target_Conv_ConvLimit();

  Target_Conv_ConvLimit(const Target_Conv_ConvLimit& from);
  Target_Conv_ConvLimit(Target_Conv_ConvLimit&& from) noexcept
    : Target_Conv_ConvLimit() {
    *this = ::std::move(from);
  }

  inline Target_Conv_ConvLimit& operator=(const Target_Conv_ConvLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Conv_ConvLimit& operator=(Target_Conv_ConvLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Conv_ConvLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Conv_ConvLimit* internal_default_instance() {
    return reinterpret_cast<const Target_Conv_ConvLimit*>(
               &_Target_Conv_ConvLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Target_Conv_ConvLimit& a, Target_Conv_ConvLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Conv_ConvLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Conv_ConvLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Conv_ConvLimit* New() const final {
    return CreateMaybeMessage<Target_Conv_ConvLimit>(nullptr);
  }

  Target_Conv_ConvLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Conv_ConvLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Conv_ConvLimit& from);
  void MergeFrom(const Target_Conv_ConvLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Conv_ConvLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Conv.ConvLimit";
  }
  protected:
  explicit Target_Conv_ConvLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // string kernel_size = 1;
  void clear_kernel_size();
  const std::string& kernel_size() const;
  void set_kernel_size(const std::string& value);
  void set_kernel_size(std::string&& value);
  void set_kernel_size(const char* value);
  void set_kernel_size(const char* value, size_t size);
  std::string* mutable_kernel_size();
  std::string* release_kernel_size();
  void set_allocated_kernel_size(std::string* kernel_size);
  private:
  const std::string& _internal_kernel_size() const;
  void _internal_set_kernel_size(const std::string& value);
  std::string* _internal_mutable_kernel_size();
  public:

  // string stride = 2;
  void clear_stride();
  const std::string& stride() const;
  void set_stride(const std::string& value);
  void set_stride(std::string&& value);
  void set_stride(const char* value);
  void set_stride(const char* value, size_t size);
  std::string* mutable_stride();
  std::string* release_stride();
  void set_allocated_stride(std::string* stride);
  private:
  const std::string& _internal_stride() const;
  void _internal_set_stride(const std::string& value);
  std::string* _internal_mutable_stride();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Conv.ConvLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Conv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Conv) */ {
 public:
  inline Target_Conv() : Target_Conv(nullptr) {}
  virtual ~Target_Conv();

  Target_Conv(const Target_Conv& from);
  Target_Conv(Target_Conv&& from) noexcept
    : Target_Conv() {
    *this = ::std::move(from);
  }

  inline Target_Conv& operator=(const Target_Conv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Conv& operator=(Target_Conv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Conv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Conv* internal_default_instance() {
    return reinterpret_cast<const Target_Conv*>(
               &_Target_Conv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Target_Conv& a, Target_Conv& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Conv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Conv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Conv* New() const final {
    return CreateMaybeMessage<Target_Conv>(nullptr);
  }

  Target_Conv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Conv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Conv& from);
  void MergeFrom(const Target_Conv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Conv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Conv";
  }
  protected:
  explicit Target_Conv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Conv_OutputBankGroup OutputBankGroup;
  typedef Target_Conv_ChannelAugmentation ChannelAugmentation;
  typedef Target_Conv_ConvLimit ConvLimit;

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 4,
    kOutputBankGroupFieldNumber = 5,
    kOutputBankFieldNumber = 10,
    kWeightBankFieldNumber = 6,
    kBiasBankFieldNumber = 7,
    kChannelAugmentationFieldNumber = 8,
    kNonlinearFieldNumber = 9,
    kConvLimitFieldNumber = 11,
    kInputChannelParallelFieldNumber = 1,
    kOutputChannelParallelFieldNumber = 2,
    kPixelParallelFieldNumber = 3,
  };
  // repeated string input_bank = 4;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated .vitis.ai.Target.Conv.OutputBankGroup output_bank_group = 5;
  int output_bank_group_size() const;
  private:
  int _internal_output_bank_group_size() const;
  public:
  void clear_output_bank_group();
  ::vitis::ai::Target_Conv_OutputBankGroup* mutable_output_bank_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_Conv_OutputBankGroup >*
      mutable_output_bank_group();
  private:
  const ::vitis::ai::Target_Conv_OutputBankGroup& _internal_output_bank_group(int index) const;
  ::vitis::ai::Target_Conv_OutputBankGroup* _internal_add_output_bank_group();
  public:
  const ::vitis::ai::Target_Conv_OutputBankGroup& output_bank_group(int index) const;
  ::vitis::ai::Target_Conv_OutputBankGroup* add_output_bank_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_Conv_OutputBankGroup >&
      output_bank_group() const;

  // repeated string output_bank = 10;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // string weight_bank = 6;
  void clear_weight_bank();
  const std::string& weight_bank() const;
  void set_weight_bank(const std::string& value);
  void set_weight_bank(std::string&& value);
  void set_weight_bank(const char* value);
  void set_weight_bank(const char* value, size_t size);
  std::string* mutable_weight_bank();
  std::string* release_weight_bank();
  void set_allocated_weight_bank(std::string* weight_bank);
  private:
  const std::string& _internal_weight_bank() const;
  void _internal_set_weight_bank(const std::string& value);
  std::string* _internal_mutable_weight_bank();
  public:

  // string bias_bank = 7;
  void clear_bias_bank();
  const std::string& bias_bank() const;
  void set_bias_bank(const std::string& value);
  void set_bias_bank(std::string&& value);
  void set_bias_bank(const char* value);
  void set_bias_bank(const char* value, size_t size);
  std::string* mutable_bias_bank();
  std::string* release_bias_bank();
  void set_allocated_bias_bank(std::string* bias_bank);
  private:
  const std::string& _internal_bias_bank() const;
  void _internal_set_bias_bank(const std::string& value);
  std::string* _internal_mutable_bias_bank();
  public:

  // .vitis.ai.Target.Conv.ChannelAugmentation channel_augmentation = 8;
  bool has_channel_augmentation() const;
  private:
  bool _internal_has_channel_augmentation() const;
  public:
  void clear_channel_augmentation();
  const ::vitis::ai::Target_Conv_ChannelAugmentation& channel_augmentation() const;
  ::vitis::ai::Target_Conv_ChannelAugmentation* release_channel_augmentation();
  ::vitis::ai::Target_Conv_ChannelAugmentation* mutable_channel_augmentation();
  void set_allocated_channel_augmentation(::vitis::ai::Target_Conv_ChannelAugmentation* channel_augmentation);
  private:
  const ::vitis::ai::Target_Conv_ChannelAugmentation& _internal_channel_augmentation() const;
  ::vitis::ai::Target_Conv_ChannelAugmentation* _internal_mutable_channel_augmentation();
  public:
  void unsafe_arena_set_allocated_channel_augmentation(
      ::vitis::ai::Target_Conv_ChannelAugmentation* channel_augmentation);
  ::vitis::ai::Target_Conv_ChannelAugmentation* unsafe_arena_release_channel_augmentation();

  // .vitis.ai.Target.Nonlinear nonlinear = 9;
  bool has_nonlinear() const;
  private:
  bool _internal_has_nonlinear() const;
  public:
  void clear_nonlinear();
  const ::vitis::ai::Target_Nonlinear& nonlinear() const;
  ::vitis::ai::Target_Nonlinear* release_nonlinear();
  ::vitis::ai::Target_Nonlinear* mutable_nonlinear();
  void set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear);
  private:
  const ::vitis::ai::Target_Nonlinear& _internal_nonlinear() const;
  ::vitis::ai::Target_Nonlinear* _internal_mutable_nonlinear();
  public:
  void unsafe_arena_set_allocated_nonlinear(
      ::vitis::ai::Target_Nonlinear* nonlinear);
  ::vitis::ai::Target_Nonlinear* unsafe_arena_release_nonlinear();

  // .vitis.ai.Target.Conv.ConvLimit conv_limit = 11;
  bool has_conv_limit() const;
  private:
  bool _internal_has_conv_limit() const;
  public:
  void clear_conv_limit();
  const ::vitis::ai::Target_Conv_ConvLimit& conv_limit() const;
  ::vitis::ai::Target_Conv_ConvLimit* release_conv_limit();
  ::vitis::ai::Target_Conv_ConvLimit* mutable_conv_limit();
  void set_allocated_conv_limit(::vitis::ai::Target_Conv_ConvLimit* conv_limit);
  private:
  const ::vitis::ai::Target_Conv_ConvLimit& _internal_conv_limit() const;
  ::vitis::ai::Target_Conv_ConvLimit* _internal_mutable_conv_limit();
  public:
  void unsafe_arena_set_allocated_conv_limit(
      ::vitis::ai::Target_Conv_ConvLimit* conv_limit);
  ::vitis::ai::Target_Conv_ConvLimit* unsafe_arena_release_conv_limit();

  // uint32 input_channel_parallel = 1;
  void clear_input_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel_parallel() const;
  void set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_channel_parallel() const;
  void _internal_set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 output_channel_parallel = 2;
  void clear_output_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_channel_parallel() const;
  void set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_channel_parallel() const;
  void _internal_set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 3;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Conv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_Conv_OutputBankGroup > output_bank_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bias_bank_;
  ::vitis::ai::Target_Conv_ChannelAugmentation* channel_augmentation_;
  ::vitis::ai::Target_Nonlinear* nonlinear_;
  ::vitis::ai::Target_Conv_ConvLimit* conv_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Eltwise_ConvCascade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Eltwise.ConvCascade) */ {
 public:
  inline Target_Eltwise_ConvCascade() : Target_Eltwise_ConvCascade(nullptr) {}
  virtual ~Target_Eltwise_ConvCascade();

  Target_Eltwise_ConvCascade(const Target_Eltwise_ConvCascade& from);
  Target_Eltwise_ConvCascade(Target_Eltwise_ConvCascade&& from) noexcept
    : Target_Eltwise_ConvCascade() {
    *this = ::std::move(from);
  }

  inline Target_Eltwise_ConvCascade& operator=(const Target_Eltwise_ConvCascade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Eltwise_ConvCascade& operator=(Target_Eltwise_ConvCascade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Eltwise_ConvCascade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Eltwise_ConvCascade* internal_default_instance() {
    return reinterpret_cast<const Target_Eltwise_ConvCascade*>(
               &_Target_Eltwise_ConvCascade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Target_Eltwise_ConvCascade& a, Target_Eltwise_ConvCascade& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Eltwise_ConvCascade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Eltwise_ConvCascade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Eltwise_ConvCascade* New() const final {
    return CreateMaybeMessage<Target_Eltwise_ConvCascade>(nullptr);
  }

  Target_Eltwise_ConvCascade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Eltwise_ConvCascade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Eltwise_ConvCascade& from);
  void MergeFrom(const Target_Eltwise_ConvCascade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Eltwise_ConvCascade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Eltwise.ConvCascade";
  }
  protected:
  explicit Target_Eltwise_ConvCascade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixelParallelFieldNumber = 1,
  };
  // uint32 pixel_parallel = 1;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Eltwise.ConvCascade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Eltwise PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Eltwise) */ {
 public:
  inline Target_Eltwise() : Target_Eltwise(nullptr) {}
  virtual ~Target_Eltwise();

  Target_Eltwise(const Target_Eltwise& from);
  Target_Eltwise(Target_Eltwise&& from) noexcept
    : Target_Eltwise() {
    *this = ::std::move(from);
  }

  inline Target_Eltwise& operator=(const Target_Eltwise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Eltwise& operator=(Target_Eltwise&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Eltwise& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Eltwise* internal_default_instance() {
    return reinterpret_cast<const Target_Eltwise*>(
               &_Target_Eltwise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Target_Eltwise& a, Target_Eltwise& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Eltwise* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Eltwise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Eltwise* New() const final {
    return CreateMaybeMessage<Target_Eltwise>(nullptr);
  }

  Target_Eltwise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Eltwise>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Eltwise& from);
  void MergeFrom(const Target_Eltwise& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Eltwise* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Eltwise";
  }
  protected:
  explicit Target_Eltwise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Eltwise_ConvCascade ConvCascade;

  typedef Target_Eltwise_ElewType ElewType;
  static constexpr ElewType add =
    Target_Eltwise_ElewType_add;
  static constexpr ElewType mult =
    Target_Eltwise_ElewType_mult;
  static inline bool ElewType_IsValid(int value) {
    return Target_Eltwise_ElewType_IsValid(value);
  }
  static constexpr ElewType ElewType_MIN =
    Target_Eltwise_ElewType_ElewType_MIN;
  static constexpr ElewType ElewType_MAX =
    Target_Eltwise_ElewType_ElewType_MAX;
  static constexpr int ElewType_ARRAYSIZE =
    Target_Eltwise_ElewType_ElewType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ElewType_descriptor() {
    return Target_Eltwise_ElewType_descriptor();
  }
  template<typename T>
  static inline const std::string& ElewType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ElewType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ElewType_Name.");
    return Target_Eltwise_ElewType_Name(enum_t_value);
  }
  static inline bool ElewType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ElewType* value) {
    return Target_Eltwise_ElewType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 3,
    kOutputBankFieldNumber = 4,
    kElewTypeFieldNumber = 6,
    kNonlinearFieldNumber = 5,
    kConvCascadeFieldNumber = 7,
    kChannelParallelFieldNumber = 1,
    kPixelParallelFieldNumber = 2,
  };
  // repeated string input_bank = 3;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 4;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // repeated .vitis.ai.Target.Eltwise.ElewType elew_type = 6;
  int elew_type_size() const;
  private:
  int _internal_elew_type_size() const;
  public:
  void clear_elew_type();
  private:
  ::vitis::ai::Target_Eltwise_ElewType _internal_elew_type(int index) const;
  void _internal_add_elew_type(::vitis::ai::Target_Eltwise_ElewType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_elew_type();
  public:
  ::vitis::ai::Target_Eltwise_ElewType elew_type(int index) const;
  void set_elew_type(int index, ::vitis::ai::Target_Eltwise_ElewType value);
  void add_elew_type(::vitis::ai::Target_Eltwise_ElewType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& elew_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_elew_type();

  // .vitis.ai.Target.Nonlinear nonlinear = 5;
  bool has_nonlinear() const;
  private:
  bool _internal_has_nonlinear() const;
  public:
  void clear_nonlinear();
  const ::vitis::ai::Target_Nonlinear& nonlinear() const;
  ::vitis::ai::Target_Nonlinear* release_nonlinear();
  ::vitis::ai::Target_Nonlinear* mutable_nonlinear();
  void set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear);
  private:
  const ::vitis::ai::Target_Nonlinear& _internal_nonlinear() const;
  ::vitis::ai::Target_Nonlinear* _internal_mutable_nonlinear();
  public:
  void unsafe_arena_set_allocated_nonlinear(
      ::vitis::ai::Target_Nonlinear* nonlinear);
  ::vitis::ai::Target_Nonlinear* unsafe_arena_release_nonlinear();

  // .vitis.ai.Target.Eltwise.ConvCascade conv_cascade = 7;
  bool has_conv_cascade() const;
  private:
  bool _internal_has_conv_cascade() const;
  public:
  void clear_conv_cascade();
  const ::vitis::ai::Target_Eltwise_ConvCascade& conv_cascade() const;
  ::vitis::ai::Target_Eltwise_ConvCascade* release_conv_cascade();
  ::vitis::ai::Target_Eltwise_ConvCascade* mutable_conv_cascade();
  void set_allocated_conv_cascade(::vitis::ai::Target_Eltwise_ConvCascade* conv_cascade);
  private:
  const ::vitis::ai::Target_Eltwise_ConvCascade& _internal_conv_cascade() const;
  ::vitis::ai::Target_Eltwise_ConvCascade* _internal_mutable_conv_cascade();
  public:
  void unsafe_arena_set_allocated_conv_cascade(
      ::vitis::ai::Target_Eltwise_ConvCascade* conv_cascade);
  ::vitis::ai::Target_Eltwise_ConvCascade* unsafe_arena_release_conv_cascade();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 2;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Eltwise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> elew_type_;
  mutable std::atomic<int> _elew_type_cached_byte_size_;
  ::vitis::ai::Target_Nonlinear* nonlinear_;
  ::vitis::ai::Target_Eltwise_ConvCascade* conv_cascade_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Pool_AvgLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Pool.AvgLimit) */ {
 public:
  inline Target_Pool_AvgLimit() : Target_Pool_AvgLimit(nullptr) {}
  virtual ~Target_Pool_AvgLimit();

  Target_Pool_AvgLimit(const Target_Pool_AvgLimit& from);
  Target_Pool_AvgLimit(Target_Pool_AvgLimit&& from) noexcept
    : Target_Pool_AvgLimit() {
    *this = ::std::move(from);
  }

  inline Target_Pool_AvgLimit& operator=(const Target_Pool_AvgLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Pool_AvgLimit& operator=(Target_Pool_AvgLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Pool_AvgLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Pool_AvgLimit* internal_default_instance() {
    return reinterpret_cast<const Target_Pool_AvgLimit*>(
               &_Target_Pool_AvgLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Target_Pool_AvgLimit& a, Target_Pool_AvgLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Pool_AvgLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Pool_AvgLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Pool_AvgLimit* New() const final {
    return CreateMaybeMessage<Target_Pool_AvgLimit>(nullptr);
  }

  Target_Pool_AvgLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Pool_AvgLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Pool_AvgLimit& from);
  void MergeFrom(const Target_Pool_AvgLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Pool_AvgLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Pool.AvgLimit";
  }
  protected:
  explicit Target_Pool_AvgLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // string kernel_size = 1;
  void clear_kernel_size();
  const std::string& kernel_size() const;
  void set_kernel_size(const std::string& value);
  void set_kernel_size(std::string&& value);
  void set_kernel_size(const char* value);
  void set_kernel_size(const char* value, size_t size);
  std::string* mutable_kernel_size();
  std::string* release_kernel_size();
  void set_allocated_kernel_size(std::string* kernel_size);
  private:
  const std::string& _internal_kernel_size() const;
  void _internal_set_kernel_size(const std::string& value);
  std::string* _internal_mutable_kernel_size();
  public:

  // string stride = 2;
  void clear_stride();
  const std::string& stride() const;
  void set_stride(const std::string& value);
  void set_stride(std::string&& value);
  void set_stride(const char* value);
  void set_stride(const char* value, size_t size);
  std::string* mutable_stride();
  std::string* release_stride();
  void set_allocated_stride(std::string* stride);
  private:
  const std::string& _internal_stride() const;
  void _internal_set_stride(const std::string& value);
  std::string* _internal_mutable_stride();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Pool.AvgLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Pool_MaxLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Pool.MaxLimit) */ {
 public:
  inline Target_Pool_MaxLimit() : Target_Pool_MaxLimit(nullptr) {}
  virtual ~Target_Pool_MaxLimit();

  Target_Pool_MaxLimit(const Target_Pool_MaxLimit& from);
  Target_Pool_MaxLimit(Target_Pool_MaxLimit&& from) noexcept
    : Target_Pool_MaxLimit() {
    *this = ::std::move(from);
  }

  inline Target_Pool_MaxLimit& operator=(const Target_Pool_MaxLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Pool_MaxLimit& operator=(Target_Pool_MaxLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Pool_MaxLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Pool_MaxLimit* internal_default_instance() {
    return reinterpret_cast<const Target_Pool_MaxLimit*>(
               &_Target_Pool_MaxLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Target_Pool_MaxLimit& a, Target_Pool_MaxLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Pool_MaxLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Pool_MaxLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Pool_MaxLimit* New() const final {
    return CreateMaybeMessage<Target_Pool_MaxLimit>(nullptr);
  }

  Target_Pool_MaxLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Pool_MaxLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Pool_MaxLimit& from);
  void MergeFrom(const Target_Pool_MaxLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Pool_MaxLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Pool.MaxLimit";
  }
  protected:
  explicit Target_Pool_MaxLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // string kernel_size = 1;
  void clear_kernel_size();
  const std::string& kernel_size() const;
  void set_kernel_size(const std::string& value);
  void set_kernel_size(std::string&& value);
  void set_kernel_size(const char* value);
  void set_kernel_size(const char* value, size_t size);
  std::string* mutable_kernel_size();
  std::string* release_kernel_size();
  void set_allocated_kernel_size(std::string* kernel_size);
  private:
  const std::string& _internal_kernel_size() const;
  void _internal_set_kernel_size(const std::string& value);
  std::string* _internal_mutable_kernel_size();
  public:

  // string stride = 2;
  void clear_stride();
  const std::string& stride() const;
  void set_stride(const std::string& value);
  void set_stride(std::string&& value);
  void set_stride(const char* value);
  void set_stride(const char* value, size_t size);
  std::string* mutable_stride();
  std::string* release_stride();
  void set_allocated_stride(std::string* stride);
  private:
  const std::string& _internal_stride() const;
  void _internal_set_stride(const std::string& value);
  std::string* _internal_mutable_stride();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Pool.MaxLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Pool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Pool) */ {
 public:
  inline Target_Pool() : Target_Pool(nullptr) {}
  virtual ~Target_Pool();

  Target_Pool(const Target_Pool& from);
  Target_Pool(Target_Pool&& from) noexcept
    : Target_Pool() {
    *this = ::std::move(from);
  }

  inline Target_Pool& operator=(const Target_Pool& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Pool& operator=(Target_Pool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Pool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Pool* internal_default_instance() {
    return reinterpret_cast<const Target_Pool*>(
               &_Target_Pool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Target_Pool& a, Target_Pool& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Pool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Pool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Pool* New() const final {
    return CreateMaybeMessage<Target_Pool>(nullptr);
  }

  Target_Pool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Pool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Pool& from);
  void MergeFrom(const Target_Pool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Pool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Pool";
  }
  protected:
  explicit Target_Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Pool_AvgLimit AvgLimit;
  typedef Target_Pool_MaxLimit MaxLimit;

  typedef Target_Pool_PoolType PoolType;
  static constexpr PoolType max =
    Target_Pool_PoolType_max;
  static constexpr PoolType avg =
    Target_Pool_PoolType_avg;
  static constexpr PoolType max_reduce =
    Target_Pool_PoolType_max_reduce;
  static inline bool PoolType_IsValid(int value) {
    return Target_Pool_PoolType_IsValid(value);
  }
  static constexpr PoolType PoolType_MIN =
    Target_Pool_PoolType_PoolType_MIN;
  static constexpr PoolType PoolType_MAX =
    Target_Pool_PoolType_PoolType_MAX;
  static constexpr int PoolType_ARRAYSIZE =
    Target_Pool_PoolType_PoolType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PoolType_descriptor() {
    return Target_Pool_PoolType_descriptor();
  }
  template<typename T>
  static inline const std::string& PoolType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PoolType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PoolType_Name.");
    return Target_Pool_PoolType_Name(enum_t_value);
  }
  static inline bool PoolType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PoolType* value) {
    return Target_Pool_PoolType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 3,
    kOutputBankFieldNumber = 4,
    kPoolTypeFieldNumber = 5,
    kNonlinearFieldNumber = 6,
    kAvgLimitFieldNumber = 7,
    kMaxLimitFieldNumber = 8,
    kChannelParallelFieldNumber = 1,
    kPixelParallelFieldNumber = 2,
  };
  // repeated string input_bank = 3;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 4;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // repeated .vitis.ai.Target.Pool.PoolType pool_type = 5;
  int pool_type_size() const;
  private:
  int _internal_pool_type_size() const;
  public:
  void clear_pool_type();
  private:
  ::vitis::ai::Target_Pool_PoolType _internal_pool_type(int index) const;
  void _internal_add_pool_type(::vitis::ai::Target_Pool_PoolType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_pool_type();
  public:
  ::vitis::ai::Target_Pool_PoolType pool_type(int index) const;
  void set_pool_type(int index, ::vitis::ai::Target_Pool_PoolType value);
  void add_pool_type(::vitis::ai::Target_Pool_PoolType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& pool_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_pool_type();

  // .vitis.ai.Target.Nonlinear nonlinear = 6;
  bool has_nonlinear() const;
  private:
  bool _internal_has_nonlinear() const;
  public:
  void clear_nonlinear();
  const ::vitis::ai::Target_Nonlinear& nonlinear() const;
  ::vitis::ai::Target_Nonlinear* release_nonlinear();
  ::vitis::ai::Target_Nonlinear* mutable_nonlinear();
  void set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear);
  private:
  const ::vitis::ai::Target_Nonlinear& _internal_nonlinear() const;
  ::vitis::ai::Target_Nonlinear* _internal_mutable_nonlinear();
  public:
  void unsafe_arena_set_allocated_nonlinear(
      ::vitis::ai::Target_Nonlinear* nonlinear);
  ::vitis::ai::Target_Nonlinear* unsafe_arena_release_nonlinear();

  // .vitis.ai.Target.Pool.AvgLimit avg_limit = 7;
  bool has_avg_limit() const;
  private:
  bool _internal_has_avg_limit() const;
  public:
  void clear_avg_limit();
  const ::vitis::ai::Target_Pool_AvgLimit& avg_limit() const;
  ::vitis::ai::Target_Pool_AvgLimit* release_avg_limit();
  ::vitis::ai::Target_Pool_AvgLimit* mutable_avg_limit();
  void set_allocated_avg_limit(::vitis::ai::Target_Pool_AvgLimit* avg_limit);
  private:
  const ::vitis::ai::Target_Pool_AvgLimit& _internal_avg_limit() const;
  ::vitis::ai::Target_Pool_AvgLimit* _internal_mutable_avg_limit();
  public:
  void unsafe_arena_set_allocated_avg_limit(
      ::vitis::ai::Target_Pool_AvgLimit* avg_limit);
  ::vitis::ai::Target_Pool_AvgLimit* unsafe_arena_release_avg_limit();

  // .vitis.ai.Target.Pool.MaxLimit max_limit = 8;
  bool has_max_limit() const;
  private:
  bool _internal_has_max_limit() const;
  public:
  void clear_max_limit();
  const ::vitis::ai::Target_Pool_MaxLimit& max_limit() const;
  ::vitis::ai::Target_Pool_MaxLimit* release_max_limit();
  ::vitis::ai::Target_Pool_MaxLimit* mutable_max_limit();
  void set_allocated_max_limit(::vitis::ai::Target_Pool_MaxLimit* max_limit);
  private:
  const ::vitis::ai::Target_Pool_MaxLimit& _internal_max_limit() const;
  ::vitis::ai::Target_Pool_MaxLimit* _internal_mutable_max_limit();
  public:
  void unsafe_arena_set_allocated_max_limit(
      ::vitis::ai::Target_Pool_MaxLimit* max_limit);
  ::vitis::ai::Target_Pool_MaxLimit* unsafe_arena_release_max_limit();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 2;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Pool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> pool_type_;
  mutable std::atomic<int> _pool_type_cached_byte_size_;
  ::vitis::ai::Target_Nonlinear* nonlinear_;
  ::vitis::ai::Target_Pool_AvgLimit* avg_limit_;
  ::vitis::ai::Target_Pool_MaxLimit* max_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Dwconv_DwconvLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Dwconv.DwconvLimit) */ {
 public:
  inline Target_Dwconv_DwconvLimit() : Target_Dwconv_DwconvLimit(nullptr) {}
  virtual ~Target_Dwconv_DwconvLimit();

  Target_Dwconv_DwconvLimit(const Target_Dwconv_DwconvLimit& from);
  Target_Dwconv_DwconvLimit(Target_Dwconv_DwconvLimit&& from) noexcept
    : Target_Dwconv_DwconvLimit() {
    *this = ::std::move(from);
  }

  inline Target_Dwconv_DwconvLimit& operator=(const Target_Dwconv_DwconvLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Dwconv_DwconvLimit& operator=(Target_Dwconv_DwconvLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Dwconv_DwconvLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Dwconv_DwconvLimit* internal_default_instance() {
    return reinterpret_cast<const Target_Dwconv_DwconvLimit*>(
               &_Target_Dwconv_DwconvLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Target_Dwconv_DwconvLimit& a, Target_Dwconv_DwconvLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Dwconv_DwconvLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Dwconv_DwconvLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Dwconv_DwconvLimit* New() const final {
    return CreateMaybeMessage<Target_Dwconv_DwconvLimit>(nullptr);
  }

  Target_Dwconv_DwconvLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Dwconv_DwconvLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Dwconv_DwconvLimit& from);
  void MergeFrom(const Target_Dwconv_DwconvLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Dwconv_DwconvLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Dwconv.DwconvLimit";
  }
  protected:
  explicit Target_Dwconv_DwconvLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // string kernel_size = 1;
  void clear_kernel_size();
  const std::string& kernel_size() const;
  void set_kernel_size(const std::string& value);
  void set_kernel_size(std::string&& value);
  void set_kernel_size(const char* value);
  void set_kernel_size(const char* value, size_t size);
  std::string* mutable_kernel_size();
  std::string* release_kernel_size();
  void set_allocated_kernel_size(std::string* kernel_size);
  private:
  const std::string& _internal_kernel_size() const;
  void _internal_set_kernel_size(const std::string& value);
  std::string* _internal_mutable_kernel_size();
  public:

  // string stride = 2;
  void clear_stride();
  const std::string& stride() const;
  void set_stride(const std::string& value);
  void set_stride(std::string&& value);
  void set_stride(const char* value);
  void set_stride(const char* value, size_t size);
  std::string* mutable_stride();
  std::string* release_stride();
  void set_allocated_stride(std::string* stride);
  private:
  const std::string& _internal_stride() const;
  void _internal_set_stride(const std::string& value);
  std::string* _internal_mutable_stride();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Dwconv.DwconvLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Dwconv PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Dwconv) */ {
 public:
  inline Target_Dwconv() : Target_Dwconv(nullptr) {}
  virtual ~Target_Dwconv();

  Target_Dwconv(const Target_Dwconv& from);
  Target_Dwconv(Target_Dwconv&& from) noexcept
    : Target_Dwconv() {
    *this = ::std::move(from);
  }

  inline Target_Dwconv& operator=(const Target_Dwconv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Dwconv& operator=(Target_Dwconv&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Dwconv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Dwconv* internal_default_instance() {
    return reinterpret_cast<const Target_Dwconv*>(
               &_Target_Dwconv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Target_Dwconv& a, Target_Dwconv& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Dwconv* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Dwconv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Dwconv* New() const final {
    return CreateMaybeMessage<Target_Dwconv>(nullptr);
  }

  Target_Dwconv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Dwconv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Dwconv& from);
  void MergeFrom(const Target_Dwconv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Dwconv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Dwconv";
  }
  protected:
  explicit Target_Dwconv(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Dwconv_DwconvLimit DwconvLimit;

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 3,
    kOutputBankFieldNumber = 4,
    kWeightBankFieldNumber = 5,
    kBiasBankFieldNumber = 6,
    kNonlinearFieldNumber = 7,
    kDwconvLimitFieldNumber = 8,
    kChannelParallelFieldNumber = 1,
    kPixelParallelFieldNumber = 2,
  };
  // repeated string input_bank = 3;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 4;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // string weight_bank = 5;
  void clear_weight_bank();
  const std::string& weight_bank() const;
  void set_weight_bank(const std::string& value);
  void set_weight_bank(std::string&& value);
  void set_weight_bank(const char* value);
  void set_weight_bank(const char* value, size_t size);
  std::string* mutable_weight_bank();
  std::string* release_weight_bank();
  void set_allocated_weight_bank(std::string* weight_bank);
  private:
  const std::string& _internal_weight_bank() const;
  void _internal_set_weight_bank(const std::string& value);
  std::string* _internal_mutable_weight_bank();
  public:

  // string bias_bank = 6;
  void clear_bias_bank();
  const std::string& bias_bank() const;
  void set_bias_bank(const std::string& value);
  void set_bias_bank(std::string&& value);
  void set_bias_bank(const char* value);
  void set_bias_bank(const char* value, size_t size);
  std::string* mutable_bias_bank();
  std::string* release_bias_bank();
  void set_allocated_bias_bank(std::string* bias_bank);
  private:
  const std::string& _internal_bias_bank() const;
  void _internal_set_bias_bank(const std::string& value);
  std::string* _internal_mutable_bias_bank();
  public:

  // .vitis.ai.Target.Nonlinear nonlinear = 7;
  bool has_nonlinear() const;
  private:
  bool _internal_has_nonlinear() const;
  public:
  void clear_nonlinear();
  const ::vitis::ai::Target_Nonlinear& nonlinear() const;
  ::vitis::ai::Target_Nonlinear* release_nonlinear();
  ::vitis::ai::Target_Nonlinear* mutable_nonlinear();
  void set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear);
  private:
  const ::vitis::ai::Target_Nonlinear& _internal_nonlinear() const;
  ::vitis::ai::Target_Nonlinear* _internal_mutable_nonlinear();
  public:
  void unsafe_arena_set_allocated_nonlinear(
      ::vitis::ai::Target_Nonlinear* nonlinear);
  ::vitis::ai::Target_Nonlinear* unsafe_arena_release_nonlinear();

  // .vitis.ai.Target.Dwconv.DwconvLimit dwconv_limit = 8;
  bool has_dwconv_limit() const;
  private:
  bool _internal_has_dwconv_limit() const;
  public:
  void clear_dwconv_limit();
  const ::vitis::ai::Target_Dwconv_DwconvLimit& dwconv_limit() const;
  ::vitis::ai::Target_Dwconv_DwconvLimit* release_dwconv_limit();
  ::vitis::ai::Target_Dwconv_DwconvLimit* mutable_dwconv_limit();
  void set_allocated_dwconv_limit(::vitis::ai::Target_Dwconv_DwconvLimit* dwconv_limit);
  private:
  const ::vitis::ai::Target_Dwconv_DwconvLimit& _internal_dwconv_limit() const;
  ::vitis::ai::Target_Dwconv_DwconvLimit* _internal_mutable_dwconv_limit();
  public:
  void unsafe_arena_set_allocated_dwconv_limit(
      ::vitis::ai::Target_Dwconv_DwconvLimit* dwconv_limit);
  ::vitis::ai::Target_Dwconv_DwconvLimit* unsafe_arena_release_dwconv_limit();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 2;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Dwconv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bias_bank_;
  ::vitis::ai::Target_Nonlinear* nonlinear_;
  ::vitis::ai::Target_Dwconv_DwconvLimit* dwconv_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Move PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Move) */ {
 public:
  inline Target_Move() : Target_Move(nullptr) {}
  virtual ~Target_Move();

  Target_Move(const Target_Move& from);
  Target_Move(Target_Move&& from) noexcept
    : Target_Move() {
    *this = ::std::move(from);
  }

  inline Target_Move& operator=(const Target_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Move& operator=(Target_Move&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Move& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Move* internal_default_instance() {
    return reinterpret_cast<const Target_Move*>(
               &_Target_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Target_Move& a, Target_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Move* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Move* New() const final {
    return CreateMaybeMessage<Target_Move>(nullptr);
  }

  Target_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Move>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Move& from);
  void MergeFrom(const Target_Move& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Move* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Move";
  }
  protected:
  explicit Target_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 4,
    kOutputBankFieldNumber = 5,
    kInputChannelParallelFieldNumber = 1,
    kOutputChannelParallelFieldNumber = 2,
    kPixelParallelFieldNumber = 3,
  };
  // repeated string input_bank = 4;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 5;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // uint32 input_channel_parallel = 1;
  void clear_input_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel_parallel() const;
  void set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_channel_parallel() const;
  void _internal_set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 output_channel_parallel = 2;
  void clear_output_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_channel_parallel() const;
  void set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_channel_parallel() const;
  void _internal_set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 3;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Threshold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Threshold) */ {
 public:
  inline Target_Threshold() : Target_Threshold(nullptr) {}
  virtual ~Target_Threshold();

  Target_Threshold(const Target_Threshold& from);
  Target_Threshold(Target_Threshold&& from) noexcept
    : Target_Threshold() {
    *this = ::std::move(from);
  }

  inline Target_Threshold& operator=(const Target_Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Threshold& operator=(Target_Threshold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Threshold* internal_default_instance() {
    return reinterpret_cast<const Target_Threshold*>(
               &_Target_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Target_Threshold& a, Target_Threshold& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Threshold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Threshold* New() const final {
    return CreateMaybeMessage<Target_Threshold>(nullptr);
  }

  Target_Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Threshold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Threshold& from);
  void MergeFrom(const Target_Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Threshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Threshold";
  }
  protected:
  explicit Target_Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 3,
    kOutputBankFieldNumber = 4,
    kParamBankFieldNumber = 5,
    kChannelParallelFieldNumber = 1,
    kPixelParallelFieldNumber = 2,
  };
  // repeated string input_bank = 3;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 4;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // string param_bank = 5;
  void clear_param_bank();
  const std::string& param_bank() const;
  void set_param_bank(const std::string& value);
  void set_param_bank(std::string&& value);
  void set_param_bank(const char* value);
  void set_param_bank(const char* value, size_t size);
  std::string* mutable_param_bank();
  std::string* release_param_bank();
  void set_allocated_param_bank(std::string* param_bank);
  private:
  const std::string& _internal_param_bank() const;
  void _internal_set_param_bank(const std::string& value);
  std::string* _internal_mutable_param_bank();
  public:

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 2;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_bank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Alu_AluLimit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Alu.AluLimit) */ {
 public:
  inline Target_Alu_AluLimit() : Target_Alu_AluLimit(nullptr) {}
  virtual ~Target_Alu_AluLimit();

  Target_Alu_AluLimit(const Target_Alu_AluLimit& from);
  Target_Alu_AluLimit(Target_Alu_AluLimit&& from) noexcept
    : Target_Alu_AluLimit() {
    *this = ::std::move(from);
  }

  inline Target_Alu_AluLimit& operator=(const Target_Alu_AluLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Alu_AluLimit& operator=(Target_Alu_AluLimit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Alu_AluLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Alu_AluLimit* internal_default_instance() {
    return reinterpret_cast<const Target_Alu_AluLimit*>(
               &_Target_Alu_AluLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Target_Alu_AluLimit& a, Target_Alu_AluLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Alu_AluLimit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Alu_AluLimit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Alu_AluLimit* New() const final {
    return CreateMaybeMessage<Target_Alu_AluLimit>(nullptr);
  }

  Target_Alu_AluLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Alu_AluLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Alu_AluLimit& from);
  void MergeFrom(const Target_Alu_AluLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Alu_AluLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Alu.AluLimit";
  }
  protected:
  explicit Target_Alu_AluLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKernelSizeFieldNumber = 1,
    kStrideFieldNumber = 2,
  };
  // string kernel_size = 1;
  void clear_kernel_size();
  const std::string& kernel_size() const;
  void set_kernel_size(const std::string& value);
  void set_kernel_size(std::string&& value);
  void set_kernel_size(const char* value);
  void set_kernel_size(const char* value, size_t size);
  std::string* mutable_kernel_size();
  std::string* release_kernel_size();
  void set_allocated_kernel_size(std::string* kernel_size);
  private:
  const std::string& _internal_kernel_size() const;
  void _internal_set_kernel_size(const std::string& value);
  std::string* _internal_mutable_kernel_size();
  public:

  // string stride = 2;
  void clear_stride();
  const std::string& stride() const;
  void set_stride(const std::string& value);
  void set_stride(std::string&& value);
  void set_stride(const char* value);
  void set_stride(const char* value, size_t size);
  std::string* mutable_stride();
  std::string* release_stride();
  void set_allocated_stride(std::string* stride);
  private:
  const std::string& _internal_stride() const;
  void _internal_set_stride(const std::string& value);
  std::string* _internal_mutable_stride();
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Alu.AluLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stride_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target_Alu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target.Alu) */ {
 public:
  inline Target_Alu() : Target_Alu(nullptr) {}
  virtual ~Target_Alu();

  Target_Alu(const Target_Alu& from);
  Target_Alu(Target_Alu&& from) noexcept
    : Target_Alu() {
    *this = ::std::move(from);
  }

  inline Target_Alu& operator=(const Target_Alu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target_Alu& operator=(Target_Alu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target_Alu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target_Alu* internal_default_instance() {
    return reinterpret_cast<const Target_Alu*>(
               &_Target_Alu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Target_Alu& a, Target_Alu& b) {
    a.Swap(&b);
  }
  inline void Swap(Target_Alu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target_Alu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target_Alu* New() const final {
    return CreateMaybeMessage<Target_Alu>(nullptr);
  }

  Target_Alu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target_Alu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target_Alu& from);
  void MergeFrom(const Target_Alu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target_Alu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target.Alu";
  }
  protected:
  explicit Target_Alu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_Alu_AluLimit AluLimit;

  typedef Target_Alu_AluType AluType;
  static constexpr AluType dwconv =
    Target_Alu_AluType_dwconv;
  static constexpr AluType prelu =
    Target_Alu_AluType_prelu;
  static constexpr AluType avg_pool =
    Target_Alu_AluType_avg_pool;
  static constexpr AluType max_pool =
    Target_Alu_AluType_max_pool;
  static constexpr AluType leaky_relu =
    Target_Alu_AluType_leaky_relu;
  static constexpr AluType max_reduce =
    Target_Alu_AluType_max_reduce;
  static constexpr AluType dwconv_no_bias =
    Target_Alu_AluType_dwconv_no_bias;
  static constexpr AluType hsigmoid =
    Target_Alu_AluType_hsigmoid;
  static inline bool AluType_IsValid(int value) {
    return Target_Alu_AluType_IsValid(value);
  }
  static constexpr AluType AluType_MIN =
    Target_Alu_AluType_AluType_MIN;
  static constexpr AluType AluType_MAX =
    Target_Alu_AluType_AluType_MAX;
  static constexpr int AluType_ARRAYSIZE =
    Target_Alu_AluType_AluType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AluType_descriptor() {
    return Target_Alu_AluType_descriptor();
  }
  template<typename T>
  static inline const std::string& AluType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AluType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AluType_Name.");
    return Target_Alu_AluType_Name(enum_t_value);
  }
  static inline bool AluType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AluType* value) {
    return Target_Alu_AluType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputBankFieldNumber = 3,
    kOutputBankFieldNumber = 4,
    kAluTypeFieldNumber = 7,
    kWeightBankFieldNumber = 5,
    kBiasBankFieldNumber = 6,
    kNonlinearFieldNumber = 8,
    kAluLimitFieldNumber = 9,
    kPadLimitFieldNumber = 10,
    kChannelParallelFieldNumber = 1,
    kPixelParallelFieldNumber = 2,
  };
  // repeated string input_bank = 3;
  int input_bank_size() const;
  private:
  int _internal_input_bank_size() const;
  public:
  void clear_input_bank();
  const std::string& input_bank(int index) const;
  std::string* mutable_input_bank(int index);
  void set_input_bank(int index, const std::string& value);
  void set_input_bank(int index, std::string&& value);
  void set_input_bank(int index, const char* value);
  void set_input_bank(int index, const char* value, size_t size);
  std::string* add_input_bank();
  void add_input_bank(const std::string& value);
  void add_input_bank(std::string&& value);
  void add_input_bank(const char* value);
  void add_input_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_bank();
  private:
  const std::string& _internal_input_bank(int index) const;
  std::string* _internal_add_input_bank();
  public:

  // repeated string output_bank = 4;
  int output_bank_size() const;
  private:
  int _internal_output_bank_size() const;
  public:
  void clear_output_bank();
  const std::string& output_bank(int index) const;
  std::string* mutable_output_bank(int index);
  void set_output_bank(int index, const std::string& value);
  void set_output_bank(int index, std::string&& value);
  void set_output_bank(int index, const char* value);
  void set_output_bank(int index, const char* value, size_t size);
  std::string* add_output_bank();
  void add_output_bank(const std::string& value);
  void add_output_bank(std::string&& value);
  void add_output_bank(const char* value);
  void add_output_bank(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_bank() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_bank();
  private:
  const std::string& _internal_output_bank(int index) const;
  std::string* _internal_add_output_bank();
  public:

  // repeated .vitis.ai.Target.Alu.AluType alu_type = 7;
  int alu_type_size() const;
  private:
  int _internal_alu_type_size() const;
  public:
  void clear_alu_type();
  private:
  ::vitis::ai::Target_Alu_AluType _internal_alu_type(int index) const;
  void _internal_add_alu_type(::vitis::ai::Target_Alu_AluType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_alu_type();
  public:
  ::vitis::ai::Target_Alu_AluType alu_type(int index) const;
  void set_alu_type(int index, ::vitis::ai::Target_Alu_AluType value);
  void add_alu_type(::vitis::ai::Target_Alu_AluType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& alu_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_alu_type();

  // string weight_bank = 5;
  void clear_weight_bank();
  const std::string& weight_bank() const;
  void set_weight_bank(const std::string& value);
  void set_weight_bank(std::string&& value);
  void set_weight_bank(const char* value);
  void set_weight_bank(const char* value, size_t size);
  std::string* mutable_weight_bank();
  std::string* release_weight_bank();
  void set_allocated_weight_bank(std::string* weight_bank);
  private:
  const std::string& _internal_weight_bank() const;
  void _internal_set_weight_bank(const std::string& value);
  std::string* _internal_mutable_weight_bank();
  public:

  // string bias_bank = 6;
  void clear_bias_bank();
  const std::string& bias_bank() const;
  void set_bias_bank(const std::string& value);
  void set_bias_bank(std::string&& value);
  void set_bias_bank(const char* value);
  void set_bias_bank(const char* value, size_t size);
  std::string* mutable_bias_bank();
  std::string* release_bias_bank();
  void set_allocated_bias_bank(std::string* bias_bank);
  private:
  const std::string& _internal_bias_bank() const;
  void _internal_set_bias_bank(const std::string& value);
  std::string* _internal_mutable_bias_bank();
  public:

  // .vitis.ai.Target.Nonlinear nonlinear = 8;
  bool has_nonlinear() const;
  private:
  bool _internal_has_nonlinear() const;
  public:
  void clear_nonlinear();
  const ::vitis::ai::Target_Nonlinear& nonlinear() const;
  ::vitis::ai::Target_Nonlinear* release_nonlinear();
  ::vitis::ai::Target_Nonlinear* mutable_nonlinear();
  void set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear);
  private:
  const ::vitis::ai::Target_Nonlinear& _internal_nonlinear() const;
  ::vitis::ai::Target_Nonlinear* _internal_mutable_nonlinear();
  public:
  void unsafe_arena_set_allocated_nonlinear(
      ::vitis::ai::Target_Nonlinear* nonlinear);
  ::vitis::ai::Target_Nonlinear* unsafe_arena_release_nonlinear();

  // .vitis.ai.Target.Alu.AluLimit alu_limit = 9;
  bool has_alu_limit() const;
  private:
  bool _internal_has_alu_limit() const;
  public:
  void clear_alu_limit();
  const ::vitis::ai::Target_Alu_AluLimit& alu_limit() const;
  ::vitis::ai::Target_Alu_AluLimit* release_alu_limit();
  ::vitis::ai::Target_Alu_AluLimit* mutable_alu_limit();
  void set_allocated_alu_limit(::vitis::ai::Target_Alu_AluLimit* alu_limit);
  private:
  const ::vitis::ai::Target_Alu_AluLimit& _internal_alu_limit() const;
  ::vitis::ai::Target_Alu_AluLimit* _internal_mutable_alu_limit();
  public:
  void unsafe_arena_set_allocated_alu_limit(
      ::vitis::ai::Target_Alu_AluLimit* alu_limit);
  ::vitis::ai::Target_Alu_AluLimit* unsafe_arena_release_alu_limit();

  // .vitis.ai.Target.PadLimit pad_limit = 10;
  bool has_pad_limit() const;
  private:
  bool _internal_has_pad_limit() const;
  public:
  void clear_pad_limit();
  const ::vitis::ai::Target_PadLimit& pad_limit() const;
  ::vitis::ai::Target_PadLimit* release_pad_limit();
  ::vitis::ai::Target_PadLimit* mutable_pad_limit();
  void set_allocated_pad_limit(::vitis::ai::Target_PadLimit* pad_limit);
  private:
  const ::vitis::ai::Target_PadLimit& _internal_pad_limit() const;
  ::vitis::ai::Target_PadLimit* _internal_mutable_pad_limit();
  public:
  void unsafe_arena_set_allocated_pad_limit(
      ::vitis::ai::Target_PadLimit* pad_limit);
  ::vitis::ai::Target_PadLimit* unsafe_arena_release_pad_limit();

  // uint32 channel_parallel = 1;
  void clear_channel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel() const;
  void set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_parallel() const;
  void _internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pixel_parallel = 2;
  void clear_pixel_parallel();
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel() const;
  void set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pixel_parallel() const;
  void _internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target.Alu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_bank_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> alu_type_;
  mutable std::atomic<int> _alu_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_bank_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bias_bank_;
  ::vitis::ai::Target_Nonlinear* nonlinear_;
  ::vitis::ai::Target_Alu_AluLimit* alu_limit_;
  ::vitis::ai::Target_PadLimit* pad_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_parallel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pixel_parallel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// -------------------------------------------------------------------

class Target PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vitis.ai.Target) */ {
 public:
  inline Target() : Target(nullptr) {}
  virtual ~Target();

  Target(const Target& from);
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Target& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  inline void Swap(Target* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Target* New() const final {
    return CreateMaybeMessage<Target>(nullptr);
  }

  Target* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Target* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vitis.ai.Target";
  }
  protected:
  explicit Target(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_target_2eproto);
    return ::descriptor_table_target_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Target_BankGroup BankGroup;
  typedef Target_Load Load;
  typedef Target_Save Save;
  typedef Target_Nonlinear Nonlinear;
  typedef Target_PadLimit PadLimit;
  typedef Target_Conv Conv;
  typedef Target_Eltwise Eltwise;
  typedef Target_Pool Pool;
  typedef Target_Dwconv Dwconv;
  typedef Target_Move Move;
  typedef Target_Threshold Threshold;
  typedef Target_Alu Alu;

  // accessors -------------------------------------------------------

  enum : int {
    kBankGroupFieldNumber = 5,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLoadEngineFieldNumber = 6,
    kSaveEngineFieldNumber = 7,
    kConvEngineFieldNumber = 8,
    kEltwiseEngineFieldNumber = 9,
    kPoolEngineFieldNumber = 10,
    kDwconvEngineFieldNumber = 11,
    kMoveEngineFieldNumber = 12,
    kThresholdEngineFieldNumber = 13,
    kAluEngineFieldNumber = 15,
    kIsaVersionFieldNumber = 3,
    kFeatureCodeFieldNumber = 4,
    kBatchFieldNumber = 14,
  };
  // repeated .vitis.ai.Target.BankGroup bank_group = 5;
  int bank_group_size() const;
  private:
  int _internal_bank_group_size() const;
  public:
  void clear_bank_group();
  ::vitis::ai::Target_BankGroup* mutable_bank_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_BankGroup >*
      mutable_bank_group();
  private:
  const ::vitis::ai::Target_BankGroup& _internal_bank_group(int index) const;
  ::vitis::ai::Target_BankGroup* _internal_add_bank_group();
  public:
  const ::vitis::ai::Target_BankGroup& bank_group(int index) const;
  ::vitis::ai::Target_BankGroup* add_bank_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_BankGroup >&
      bank_group() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .vitis.ai.Target.Load load_engine = 6;
  bool has_load_engine() const;
  private:
  bool _internal_has_load_engine() const;
  public:
  void clear_load_engine();
  const ::vitis::ai::Target_Load& load_engine() const;
  ::vitis::ai::Target_Load* release_load_engine();
  ::vitis::ai::Target_Load* mutable_load_engine();
  void set_allocated_load_engine(::vitis::ai::Target_Load* load_engine);
  private:
  const ::vitis::ai::Target_Load& _internal_load_engine() const;
  ::vitis::ai::Target_Load* _internal_mutable_load_engine();
  public:
  void unsafe_arena_set_allocated_load_engine(
      ::vitis::ai::Target_Load* load_engine);
  ::vitis::ai::Target_Load* unsafe_arena_release_load_engine();

  // .vitis.ai.Target.Save save_engine = 7;
  bool has_save_engine() const;
  private:
  bool _internal_has_save_engine() const;
  public:
  void clear_save_engine();
  const ::vitis::ai::Target_Save& save_engine() const;
  ::vitis::ai::Target_Save* release_save_engine();
  ::vitis::ai::Target_Save* mutable_save_engine();
  void set_allocated_save_engine(::vitis::ai::Target_Save* save_engine);
  private:
  const ::vitis::ai::Target_Save& _internal_save_engine() const;
  ::vitis::ai::Target_Save* _internal_mutable_save_engine();
  public:
  void unsafe_arena_set_allocated_save_engine(
      ::vitis::ai::Target_Save* save_engine);
  ::vitis::ai::Target_Save* unsafe_arena_release_save_engine();

  // .vitis.ai.Target.Conv conv_engine = 8;
  bool has_conv_engine() const;
  private:
  bool _internal_has_conv_engine() const;
  public:
  void clear_conv_engine();
  const ::vitis::ai::Target_Conv& conv_engine() const;
  ::vitis::ai::Target_Conv* release_conv_engine();
  ::vitis::ai::Target_Conv* mutable_conv_engine();
  void set_allocated_conv_engine(::vitis::ai::Target_Conv* conv_engine);
  private:
  const ::vitis::ai::Target_Conv& _internal_conv_engine() const;
  ::vitis::ai::Target_Conv* _internal_mutable_conv_engine();
  public:
  void unsafe_arena_set_allocated_conv_engine(
      ::vitis::ai::Target_Conv* conv_engine);
  ::vitis::ai::Target_Conv* unsafe_arena_release_conv_engine();

  // .vitis.ai.Target.Eltwise eltwise_engine = 9;
  bool has_eltwise_engine() const;
  private:
  bool _internal_has_eltwise_engine() const;
  public:
  void clear_eltwise_engine();
  const ::vitis::ai::Target_Eltwise& eltwise_engine() const;
  ::vitis::ai::Target_Eltwise* release_eltwise_engine();
  ::vitis::ai::Target_Eltwise* mutable_eltwise_engine();
  void set_allocated_eltwise_engine(::vitis::ai::Target_Eltwise* eltwise_engine);
  private:
  const ::vitis::ai::Target_Eltwise& _internal_eltwise_engine() const;
  ::vitis::ai::Target_Eltwise* _internal_mutable_eltwise_engine();
  public:
  void unsafe_arena_set_allocated_eltwise_engine(
      ::vitis::ai::Target_Eltwise* eltwise_engine);
  ::vitis::ai::Target_Eltwise* unsafe_arena_release_eltwise_engine();

  // .vitis.ai.Target.Pool pool_engine = 10;
  bool has_pool_engine() const;
  private:
  bool _internal_has_pool_engine() const;
  public:
  void clear_pool_engine();
  const ::vitis::ai::Target_Pool& pool_engine() const;
  ::vitis::ai::Target_Pool* release_pool_engine();
  ::vitis::ai::Target_Pool* mutable_pool_engine();
  void set_allocated_pool_engine(::vitis::ai::Target_Pool* pool_engine);
  private:
  const ::vitis::ai::Target_Pool& _internal_pool_engine() const;
  ::vitis::ai::Target_Pool* _internal_mutable_pool_engine();
  public:
  void unsafe_arena_set_allocated_pool_engine(
      ::vitis::ai::Target_Pool* pool_engine);
  ::vitis::ai::Target_Pool* unsafe_arena_release_pool_engine();

  // .vitis.ai.Target.Dwconv dwconv_engine = 11;
  bool has_dwconv_engine() const;
  private:
  bool _internal_has_dwconv_engine() const;
  public:
  void clear_dwconv_engine();
  const ::vitis::ai::Target_Dwconv& dwconv_engine() const;
  ::vitis::ai::Target_Dwconv* release_dwconv_engine();
  ::vitis::ai::Target_Dwconv* mutable_dwconv_engine();
  void set_allocated_dwconv_engine(::vitis::ai::Target_Dwconv* dwconv_engine);
  private:
  const ::vitis::ai::Target_Dwconv& _internal_dwconv_engine() const;
  ::vitis::ai::Target_Dwconv* _internal_mutable_dwconv_engine();
  public:
  void unsafe_arena_set_allocated_dwconv_engine(
      ::vitis::ai::Target_Dwconv* dwconv_engine);
  ::vitis::ai::Target_Dwconv* unsafe_arena_release_dwconv_engine();

  // .vitis.ai.Target.Move move_engine = 12;
  bool has_move_engine() const;
  private:
  bool _internal_has_move_engine() const;
  public:
  void clear_move_engine();
  const ::vitis::ai::Target_Move& move_engine() const;
  ::vitis::ai::Target_Move* release_move_engine();
  ::vitis::ai::Target_Move* mutable_move_engine();
  void set_allocated_move_engine(::vitis::ai::Target_Move* move_engine);
  private:
  const ::vitis::ai::Target_Move& _internal_move_engine() const;
  ::vitis::ai::Target_Move* _internal_mutable_move_engine();
  public:
  void unsafe_arena_set_allocated_move_engine(
      ::vitis::ai::Target_Move* move_engine);
  ::vitis::ai::Target_Move* unsafe_arena_release_move_engine();

  // .vitis.ai.Target.Threshold threshold_engine = 13;
  bool has_threshold_engine() const;
  private:
  bool _internal_has_threshold_engine() const;
  public:
  void clear_threshold_engine();
  const ::vitis::ai::Target_Threshold& threshold_engine() const;
  ::vitis::ai::Target_Threshold* release_threshold_engine();
  ::vitis::ai::Target_Threshold* mutable_threshold_engine();
  void set_allocated_threshold_engine(::vitis::ai::Target_Threshold* threshold_engine);
  private:
  const ::vitis::ai::Target_Threshold& _internal_threshold_engine() const;
  ::vitis::ai::Target_Threshold* _internal_mutable_threshold_engine();
  public:
  void unsafe_arena_set_allocated_threshold_engine(
      ::vitis::ai::Target_Threshold* threshold_engine);
  ::vitis::ai::Target_Threshold* unsafe_arena_release_threshold_engine();

  // .vitis.ai.Target.Alu alu_engine = 15;
  bool has_alu_engine() const;
  private:
  bool _internal_has_alu_engine() const;
  public:
  void clear_alu_engine();
  const ::vitis::ai::Target_Alu& alu_engine() const;
  ::vitis::ai::Target_Alu* release_alu_engine();
  ::vitis::ai::Target_Alu* mutable_alu_engine();
  void set_allocated_alu_engine(::vitis::ai::Target_Alu* alu_engine);
  private:
  const ::vitis::ai::Target_Alu& _internal_alu_engine() const;
  ::vitis::ai::Target_Alu* _internal_mutable_alu_engine();
  public:
  void unsafe_arena_set_allocated_alu_engine(
      ::vitis::ai::Target_Alu* alu_engine);
  ::vitis::ai::Target_Alu* unsafe_arena_release_alu_engine();

  // uint64 isa_version = 3;
  void clear_isa_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 isa_version() const;
  void set_isa_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_isa_version() const;
  void _internal_set_isa_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 feature_code = 4;
  void clear_feature_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 feature_code() const;
  void set_feature_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_feature_code() const;
  void _internal_set_feature_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 batch = 14;
  void clear_batch();
  ::PROTOBUF_NAMESPACE_ID::uint32 batch() const;
  void set_batch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_batch() const;
  void _internal_set_batch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vitis.ai.Target)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_BankGroup > bank_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::vitis::ai::Target_Load* load_engine_;
  ::vitis::ai::Target_Save* save_engine_;
  ::vitis::ai::Target_Conv* conv_engine_;
  ::vitis::ai::Target_Eltwise* eltwise_engine_;
  ::vitis::ai::Target_Pool* pool_engine_;
  ::vitis::ai::Target_Dwconv* dwconv_engine_;
  ::vitis::ai::Target_Move* move_engine_;
  ::vitis::ai::Target_Threshold* threshold_engine_;
  ::vitis::ai::Target_Alu* alu_engine_;
  ::PROTOBUF_NAMESPACE_ID::uint64 isa_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 feature_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 batch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_target_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Target_BankGroup_AdjustableWordWidth

// uint32 scale = 1;
inline void Target_BankGroup_AdjustableWordWidth::clear_scale() {
  scale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup_AdjustableWordWidth::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup_AdjustableWordWidth::scale() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.AdjustableWordWidth.scale)
  return _internal_scale();
}
inline void Target_BankGroup_AdjustableWordWidth::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  scale_ = value;
}
inline void Target_BankGroup_AdjustableWordWidth::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.AdjustableWordWidth.scale)
}

// .vitis.ai.Target.BankGroup.AdjustableWordWidth.WordWidthSwitch word_width_switch = 2;
inline void Target_BankGroup_AdjustableWordWidth::clear_word_width_switch() {
  word_width_switch_ = 0;
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch Target_BankGroup_AdjustableWordWidth::_internal_word_width_switch() const {
  return static_cast< ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch >(word_width_switch_);
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch Target_BankGroup_AdjustableWordWidth::word_width_switch() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.AdjustableWordWidth.word_width_switch)
  return _internal_word_width_switch();
}
inline void Target_BankGroup_AdjustableWordWidth::_internal_set_word_width_switch(::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch value) {
  
  word_width_switch_ = value;
}
inline void Target_BankGroup_AdjustableWordWidth::set_word_width_switch(::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch value) {
  _internal_set_word_width_switch(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.AdjustableWordWidth.word_width_switch)
}

// -------------------------------------------------------------------

// Target_BankGroup

// string name = 1;
inline void Target_BankGroup::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_BankGroup::name() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.name)
  return _internal_name();
}
inline void Target_BankGroup::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.name)
}
inline std::string* Target_BankGroup::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.BankGroup.name)
  return _internal_mutable_name();
}
inline const std::string& Target_BankGroup::_internal_name() const {
  return name_.Get();
}
inline void Target_BankGroup::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_BankGroup::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.BankGroup.name)
}
inline void Target_BankGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.BankGroup.name)
}
inline void Target_BankGroup::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.BankGroup.name)
}
inline std::string* Target_BankGroup::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_BankGroup::release_name() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.BankGroup.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_BankGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.BankGroup.name)
}

// string type = 9;
inline void Target_BankGroup::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_BankGroup::type() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.type)
  return _internal_type();
}
inline void Target_BankGroup::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.type)
}
inline std::string* Target_BankGroup::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.BankGroup.type)
  return _internal_mutable_type();
}
inline const std::string& Target_BankGroup::_internal_type() const {
  return type_.Get();
}
inline void Target_BankGroup::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_BankGroup::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.BankGroup.type)
}
inline void Target_BankGroup::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.BankGroup.type)
}
inline void Target_BankGroup::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.BankGroup.type)
}
inline std::string* Target_BankGroup::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_BankGroup::release_type() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.BankGroup.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_BankGroup::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.BankGroup.type)
}

// uint32 base_id = 2;
inline void Target_BankGroup::clear_base_id() {
  base_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::_internal_base_id() const {
  return base_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::base_id() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.base_id)
  return _internal_base_id();
}
inline void Target_BankGroup::_internal_set_base_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_id_ = value;
}
inline void Target_BankGroup::set_base_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_id(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.base_id)
}

// uint32 bank_num = 3;
inline void Target_BankGroup::clear_bank_num() {
  bank_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::_internal_bank_num() const {
  return bank_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::bank_num() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.bank_num)
  return _internal_bank_num();
}
inline void Target_BankGroup::_internal_set_bank_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bank_num_ = value;
}
inline void Target_BankGroup::set_bank_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bank_num(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.bank_num)
}

// uint32 bank_width = 4;
inline void Target_BankGroup::clear_bank_width() {
  bank_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::_internal_bank_width() const {
  return bank_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::bank_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.bank_width)
  return _internal_bank_width();
}
inline void Target_BankGroup::_internal_set_bank_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bank_width_ = value;
}
inline void Target_BankGroup::set_bank_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bank_width(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.bank_width)
}

// uint32 bank_depth = 5;
inline void Target_BankGroup::clear_bank_depth() {
  bank_depth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::_internal_bank_depth() const {
  return bank_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::bank_depth() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.bank_depth)
  return _internal_bank_depth();
}
inline void Target_BankGroup::_internal_set_bank_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bank_depth_ = value;
}
inline void Target_BankGroup::set_bank_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bank_depth(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.bank_depth)
}

// uint32 word_width = 6;
inline void Target_BankGroup::clear_word_width() {
  word_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::_internal_word_width() const {
  return word_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_BankGroup::word_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.word_width)
  return _internal_word_width();
}
inline void Target_BankGroup::_internal_set_word_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  word_width_ = value;
}
inline void Target_BankGroup::set_word_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_word_width(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.word_width)
}

// bool cyclic = 7;
inline void Target_BankGroup::clear_cyclic() {
  cyclic_ = false;
}
inline bool Target_BankGroup::_internal_cyclic() const {
  return cyclic_;
}
inline bool Target_BankGroup::cyclic() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.cyclic)
  return _internal_cyclic();
}
inline void Target_BankGroup::_internal_set_cyclic(bool value) {
  
  cyclic_ = value;
}
inline void Target_BankGroup::set_cyclic(bool value) {
  _internal_set_cyclic(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.BankGroup.cyclic)
}

// .vitis.ai.Target.BankGroup.AdjustableWordWidth adjustable_word_width = 8;
inline bool Target_BankGroup::_internal_has_adjustable_word_width() const {
  return this != internal_default_instance() && adjustable_word_width_ != nullptr;
}
inline bool Target_BankGroup::has_adjustable_word_width() const {
  return _internal_has_adjustable_word_width();
}
inline void Target_BankGroup::clear_adjustable_word_width() {
  if (GetArena() == nullptr && adjustable_word_width_ != nullptr) {
    delete adjustable_word_width_;
  }
  adjustable_word_width_ = nullptr;
}
inline const ::vitis::ai::Target_BankGroup_AdjustableWordWidth& Target_BankGroup::_internal_adjustable_word_width() const {
  const ::vitis::ai::Target_BankGroup_AdjustableWordWidth* p = adjustable_word_width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_BankGroup_AdjustableWordWidth*>(
      &::vitis::ai::_Target_BankGroup_AdjustableWordWidth_default_instance_);
}
inline const ::vitis::ai::Target_BankGroup_AdjustableWordWidth& Target_BankGroup::adjustable_word_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.BankGroup.adjustable_word_width)
  return _internal_adjustable_word_width();
}
inline void Target_BankGroup::unsafe_arena_set_allocated_adjustable_word_width(
    ::vitis::ai::Target_BankGroup_AdjustableWordWidth* adjustable_word_width) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjustable_word_width_);
  }
  adjustable_word_width_ = adjustable_word_width;
  if (adjustable_word_width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.BankGroup.adjustable_word_width)
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth* Target_BankGroup::release_adjustable_word_width() {
  
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* temp = adjustable_word_width_;
  adjustable_word_width_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth* Target_BankGroup::unsafe_arena_release_adjustable_word_width() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.BankGroup.adjustable_word_width)
  
  ::vitis::ai::Target_BankGroup_AdjustableWordWidth* temp = adjustable_word_width_;
  adjustable_word_width_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth* Target_BankGroup::_internal_mutable_adjustable_word_width() {
  
  if (adjustable_word_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_BankGroup_AdjustableWordWidth>(GetArena());
    adjustable_word_width_ = p;
  }
  return adjustable_word_width_;
}
inline ::vitis::ai::Target_BankGroup_AdjustableWordWidth* Target_BankGroup::mutable_adjustable_word_width() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.BankGroup.adjustable_word_width)
  return _internal_mutable_adjustable_word_width();
}
inline void Target_BankGroup::set_allocated_adjustable_word_width(::vitis::ai::Target_BankGroup_AdjustableWordWidth* adjustable_word_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete adjustable_word_width_;
  }
  if (adjustable_word_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adjustable_word_width);
    if (message_arena != submessage_arena) {
      adjustable_word_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjustable_word_width, submessage_arena);
    }
    
  } else {
    
  }
  adjustable_word_width_ = adjustable_word_width;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.BankGroup.adjustable_word_width)
}

// -------------------------------------------------------------------

// Target_Load_MeanvalueReduction

// string meanvalue_bank = 1;
inline void Target_Load_MeanvalueReduction::clear_meanvalue_bank() {
  meanvalue_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Load_MeanvalueReduction::meanvalue_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
  return _internal_meanvalue_bank();
}
inline void Target_Load_MeanvalueReduction::set_meanvalue_bank(const std::string& value) {
  _internal_set_meanvalue_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
}
inline std::string* Target_Load_MeanvalueReduction::mutable_meanvalue_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
  return _internal_mutable_meanvalue_bank();
}
inline const std::string& Target_Load_MeanvalueReduction::_internal_meanvalue_bank() const {
  return meanvalue_bank_.Get();
}
inline void Target_Load_MeanvalueReduction::_internal_set_meanvalue_bank(const std::string& value) {
  
  meanvalue_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Load_MeanvalueReduction::set_meanvalue_bank(std::string&& value) {
  
  meanvalue_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
}
inline void Target_Load_MeanvalueReduction::set_meanvalue_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  meanvalue_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
}
inline void Target_Load_MeanvalueReduction::set_meanvalue_bank(const char* value,
    size_t size) {
  
  meanvalue_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
}
inline std::string* Target_Load_MeanvalueReduction::_internal_mutable_meanvalue_bank() {
  
  return meanvalue_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Load_MeanvalueReduction::release_meanvalue_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
  return meanvalue_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Load_MeanvalueReduction::set_allocated_meanvalue_bank(std::string* meanvalue_bank) {
  if (meanvalue_bank != nullptr) {
    
  } else {
    
  }
  meanvalue_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meanvalue_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Load.MeanvalueReduction.meanvalue_bank)
}

// -------------------------------------------------------------------

// Target_Load_FixIFMPortWidth

// uint32 port_width = 1;
inline void Target_Load_FixIFMPortWidth::clear_port_width() {
  port_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Load_FixIFMPortWidth::_internal_port_width() const {
  return port_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Load_FixIFMPortWidth::port_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.FixIFMPortWidth.port_width)
  return _internal_port_width();
}
inline void Target_Load_FixIFMPortWidth::_internal_set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_width_ = value;
}
inline void Target_Load_FixIFMPortWidth::set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_width(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.FixIFMPortWidth.port_width)
}

// -------------------------------------------------------------------

// Target_Load_WeightSplit

// bool wgt_split = 1;
inline void Target_Load_WeightSplit::clear_wgt_split() {
  wgt_split_ = false;
}
inline bool Target_Load_WeightSplit::_internal_wgt_split() const {
  return wgt_split_;
}
inline bool Target_Load_WeightSplit::wgt_split() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.WeightSplit.wgt_split)
  return _internal_wgt_split();
}
inline void Target_Load_WeightSplit::_internal_set_wgt_split(bool value) {
  
  wgt_split_ = value;
}
inline void Target_Load_WeightSplit::set_wgt_split(bool value) {
  _internal_set_wgt_split(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.WeightSplit.wgt_split)
}

// -------------------------------------------------------------------

// Target_Load

// uint32 channel_parallel = 1;
inline void Target_Load::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Load::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Load::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Load::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Load::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.channel_parallel)
}

// repeated string output_bank = 2;
inline int Target_Load::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Load::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Load::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Load::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Load.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Load::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Load::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Load::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Load.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Load::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Load::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Load.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Load::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Load.output_bank)
}
inline void Target_Load::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Load.output_bank)
}
inline std::string* Target_Load::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Load::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Load.output_bank)
}
inline void Target_Load::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Load.output_bank)
}
inline void Target_Load::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Load.output_bank)
}
inline void Target_Load::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Load.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Load::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Load.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Load::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Load.output_bank)
  return &output_bank_;
}

// .vitis.ai.Target.Load.MeanvalueReduction meanvalue_reduction = 3;
inline bool Target_Load::_internal_has_meanvalue_reduction() const {
  return this != internal_default_instance() && meanvalue_reduction_ != nullptr;
}
inline bool Target_Load::has_meanvalue_reduction() const {
  return _internal_has_meanvalue_reduction();
}
inline void Target_Load::clear_meanvalue_reduction() {
  if (GetArena() == nullptr && meanvalue_reduction_ != nullptr) {
    delete meanvalue_reduction_;
  }
  meanvalue_reduction_ = nullptr;
}
inline const ::vitis::ai::Target_Load_MeanvalueReduction& Target_Load::_internal_meanvalue_reduction() const {
  const ::vitis::ai::Target_Load_MeanvalueReduction* p = meanvalue_reduction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Load_MeanvalueReduction*>(
      &::vitis::ai::_Target_Load_MeanvalueReduction_default_instance_);
}
inline const ::vitis::ai::Target_Load_MeanvalueReduction& Target_Load::meanvalue_reduction() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.meanvalue_reduction)
  return _internal_meanvalue_reduction();
}
inline void Target_Load::unsafe_arena_set_allocated_meanvalue_reduction(
    ::vitis::ai::Target_Load_MeanvalueReduction* meanvalue_reduction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meanvalue_reduction_);
  }
  meanvalue_reduction_ = meanvalue_reduction;
  if (meanvalue_reduction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Load.meanvalue_reduction)
}
inline ::vitis::ai::Target_Load_MeanvalueReduction* Target_Load::release_meanvalue_reduction() {
  
  ::vitis::ai::Target_Load_MeanvalueReduction* temp = meanvalue_reduction_;
  meanvalue_reduction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Load_MeanvalueReduction* Target_Load::unsafe_arena_release_meanvalue_reduction() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Load.meanvalue_reduction)
  
  ::vitis::ai::Target_Load_MeanvalueReduction* temp = meanvalue_reduction_;
  meanvalue_reduction_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Load_MeanvalueReduction* Target_Load::_internal_mutable_meanvalue_reduction() {
  
  if (meanvalue_reduction_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Load_MeanvalueReduction>(GetArena());
    meanvalue_reduction_ = p;
  }
  return meanvalue_reduction_;
}
inline ::vitis::ai::Target_Load_MeanvalueReduction* Target_Load::mutable_meanvalue_reduction() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Load.meanvalue_reduction)
  return _internal_mutable_meanvalue_reduction();
}
inline void Target_Load::set_allocated_meanvalue_reduction(::vitis::ai::Target_Load_MeanvalueReduction* meanvalue_reduction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meanvalue_reduction_;
  }
  if (meanvalue_reduction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meanvalue_reduction);
    if (message_arena != submessage_arena) {
      meanvalue_reduction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meanvalue_reduction, submessage_arena);
    }
    
  } else {
    
  }
  meanvalue_reduction_ = meanvalue_reduction;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Load.meanvalue_reduction)
}

// .vitis.ai.Target.Load.FixIFMPortWidth fix_ifm_port_width = 4;
inline bool Target_Load::_internal_has_fix_ifm_port_width() const {
  return this != internal_default_instance() && fix_ifm_port_width_ != nullptr;
}
inline bool Target_Load::has_fix_ifm_port_width() const {
  return _internal_has_fix_ifm_port_width();
}
inline void Target_Load::clear_fix_ifm_port_width() {
  if (GetArena() == nullptr && fix_ifm_port_width_ != nullptr) {
    delete fix_ifm_port_width_;
  }
  fix_ifm_port_width_ = nullptr;
}
inline const ::vitis::ai::Target_Load_FixIFMPortWidth& Target_Load::_internal_fix_ifm_port_width() const {
  const ::vitis::ai::Target_Load_FixIFMPortWidth* p = fix_ifm_port_width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Load_FixIFMPortWidth*>(
      &::vitis::ai::_Target_Load_FixIFMPortWidth_default_instance_);
}
inline const ::vitis::ai::Target_Load_FixIFMPortWidth& Target_Load::fix_ifm_port_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.fix_ifm_port_width)
  return _internal_fix_ifm_port_width();
}
inline void Target_Load::unsafe_arena_set_allocated_fix_ifm_port_width(
    ::vitis::ai::Target_Load_FixIFMPortWidth* fix_ifm_port_width) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fix_ifm_port_width_);
  }
  fix_ifm_port_width_ = fix_ifm_port_width;
  if (fix_ifm_port_width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Load.fix_ifm_port_width)
}
inline ::vitis::ai::Target_Load_FixIFMPortWidth* Target_Load::release_fix_ifm_port_width() {
  
  ::vitis::ai::Target_Load_FixIFMPortWidth* temp = fix_ifm_port_width_;
  fix_ifm_port_width_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Load_FixIFMPortWidth* Target_Load::unsafe_arena_release_fix_ifm_port_width() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Load.fix_ifm_port_width)
  
  ::vitis::ai::Target_Load_FixIFMPortWidth* temp = fix_ifm_port_width_;
  fix_ifm_port_width_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Load_FixIFMPortWidth* Target_Load::_internal_mutable_fix_ifm_port_width() {
  
  if (fix_ifm_port_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Load_FixIFMPortWidth>(GetArena());
    fix_ifm_port_width_ = p;
  }
  return fix_ifm_port_width_;
}
inline ::vitis::ai::Target_Load_FixIFMPortWidth* Target_Load::mutable_fix_ifm_port_width() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Load.fix_ifm_port_width)
  return _internal_mutable_fix_ifm_port_width();
}
inline void Target_Load::set_allocated_fix_ifm_port_width(::vitis::ai::Target_Load_FixIFMPortWidth* fix_ifm_port_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fix_ifm_port_width_;
  }
  if (fix_ifm_port_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fix_ifm_port_width);
    if (message_arena != submessage_arena) {
      fix_ifm_port_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fix_ifm_port_width, submessage_arena);
    }
    
  } else {
    
  }
  fix_ifm_port_width_ = fix_ifm_port_width;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Load.fix_ifm_port_width)
}

// .vitis.ai.Target.Load.WeightSplit weight_split = 5;
inline bool Target_Load::_internal_has_weight_split() const {
  return this != internal_default_instance() && weight_split_ != nullptr;
}
inline bool Target_Load::has_weight_split() const {
  return _internal_has_weight_split();
}
inline void Target_Load::clear_weight_split() {
  if (GetArena() == nullptr && weight_split_ != nullptr) {
    delete weight_split_;
  }
  weight_split_ = nullptr;
}
inline const ::vitis::ai::Target_Load_WeightSplit& Target_Load::_internal_weight_split() const {
  const ::vitis::ai::Target_Load_WeightSplit* p = weight_split_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Load_WeightSplit*>(
      &::vitis::ai::_Target_Load_WeightSplit_default_instance_);
}
inline const ::vitis::ai::Target_Load_WeightSplit& Target_Load::weight_split() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Load.weight_split)
  return _internal_weight_split();
}
inline void Target_Load::unsafe_arena_set_allocated_weight_split(
    ::vitis::ai::Target_Load_WeightSplit* weight_split) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weight_split_);
  }
  weight_split_ = weight_split;
  if (weight_split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Load.weight_split)
}
inline ::vitis::ai::Target_Load_WeightSplit* Target_Load::release_weight_split() {
  
  ::vitis::ai::Target_Load_WeightSplit* temp = weight_split_;
  weight_split_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Load_WeightSplit* Target_Load::unsafe_arena_release_weight_split() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Load.weight_split)
  
  ::vitis::ai::Target_Load_WeightSplit* temp = weight_split_;
  weight_split_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Load_WeightSplit* Target_Load::_internal_mutable_weight_split() {
  
  if (weight_split_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Load_WeightSplit>(GetArena());
    weight_split_ = p;
  }
  return weight_split_;
}
inline ::vitis::ai::Target_Load_WeightSplit* Target_Load::mutable_weight_split() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Load.weight_split)
  return _internal_mutable_weight_split();
}
inline void Target_Load::set_allocated_weight_split(::vitis::ai::Target_Load_WeightSplit* weight_split) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete weight_split_;
  }
  if (weight_split) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(weight_split);
    if (message_arena != submessage_arena) {
      weight_split = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight_split, submessage_arena);
    }
    
  } else {
    
  }
  weight_split_ = weight_split;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Load.weight_split)
}

// -------------------------------------------------------------------

// Target_Save_FixIFMPortWidth

// uint32 port_width = 1;
inline void Target_Save_FixIFMPortWidth::clear_port_width() {
  port_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Save_FixIFMPortWidth::_internal_port_width() const {
  return port_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Save_FixIFMPortWidth::port_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Save.FixIFMPortWidth.port_width)
  return _internal_port_width();
}
inline void Target_Save_FixIFMPortWidth::_internal_set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_width_ = value;
}
inline void Target_Save_FixIFMPortWidth::set_port_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_width(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Save.FixIFMPortWidth.port_width)
}

// -------------------------------------------------------------------

// Target_Save

// uint32 channel_parallel = 1;
inline void Target_Save::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Save::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Save::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Save.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Save::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Save::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Save.channel_parallel)
}

// repeated string input_bank = 2;
inline int Target_Save::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Save::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Save::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Save::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Save.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Save::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Save::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Save.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Save::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Save.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Save::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Save.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Save::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Save.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Save::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Save.input_bank)
}
inline void Target_Save::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Save.input_bank)
}
inline std::string* Target_Save::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Save::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Save.input_bank)
}
inline void Target_Save::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Save.input_bank)
}
inline void Target_Save::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Save.input_bank)
}
inline void Target_Save::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Save.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Save::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Save.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Save::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Save.input_bank)
  return &input_bank_;
}

// .vitis.ai.Target.Save.FixIFMPortWidth fix_ifm_port_width = 3;
inline bool Target_Save::_internal_has_fix_ifm_port_width() const {
  return this != internal_default_instance() && fix_ifm_port_width_ != nullptr;
}
inline bool Target_Save::has_fix_ifm_port_width() const {
  return _internal_has_fix_ifm_port_width();
}
inline void Target_Save::clear_fix_ifm_port_width() {
  if (GetArena() == nullptr && fix_ifm_port_width_ != nullptr) {
    delete fix_ifm_port_width_;
  }
  fix_ifm_port_width_ = nullptr;
}
inline const ::vitis::ai::Target_Save_FixIFMPortWidth& Target_Save::_internal_fix_ifm_port_width() const {
  const ::vitis::ai::Target_Save_FixIFMPortWidth* p = fix_ifm_port_width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Save_FixIFMPortWidth*>(
      &::vitis::ai::_Target_Save_FixIFMPortWidth_default_instance_);
}
inline const ::vitis::ai::Target_Save_FixIFMPortWidth& Target_Save::fix_ifm_port_width() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Save.fix_ifm_port_width)
  return _internal_fix_ifm_port_width();
}
inline void Target_Save::unsafe_arena_set_allocated_fix_ifm_port_width(
    ::vitis::ai::Target_Save_FixIFMPortWidth* fix_ifm_port_width) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fix_ifm_port_width_);
  }
  fix_ifm_port_width_ = fix_ifm_port_width;
  if (fix_ifm_port_width) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Save.fix_ifm_port_width)
}
inline ::vitis::ai::Target_Save_FixIFMPortWidth* Target_Save::release_fix_ifm_port_width() {
  
  ::vitis::ai::Target_Save_FixIFMPortWidth* temp = fix_ifm_port_width_;
  fix_ifm_port_width_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Save_FixIFMPortWidth* Target_Save::unsafe_arena_release_fix_ifm_port_width() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Save.fix_ifm_port_width)
  
  ::vitis::ai::Target_Save_FixIFMPortWidth* temp = fix_ifm_port_width_;
  fix_ifm_port_width_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Save_FixIFMPortWidth* Target_Save::_internal_mutable_fix_ifm_port_width() {
  
  if (fix_ifm_port_width_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Save_FixIFMPortWidth>(GetArena());
    fix_ifm_port_width_ = p;
  }
  return fix_ifm_port_width_;
}
inline ::vitis::ai::Target_Save_FixIFMPortWidth* Target_Save::mutable_fix_ifm_port_width() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Save.fix_ifm_port_width)
  return _internal_mutable_fix_ifm_port_width();
}
inline void Target_Save::set_allocated_fix_ifm_port_width(::vitis::ai::Target_Save_FixIFMPortWidth* fix_ifm_port_width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fix_ifm_port_width_;
  }
  if (fix_ifm_port_width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fix_ifm_port_width);
    if (message_arena != submessage_arena) {
      fix_ifm_port_width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fix_ifm_port_width, submessage_arena);
    }
    
  } else {
    
  }
  fix_ifm_port_width_ = fix_ifm_port_width;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Save.fix_ifm_port_width)
}

// -------------------------------------------------------------------

// Target_Nonlinear

// repeated .vitis.ai.Target.Nonlinear.NonlinearType nonlinear_type = 1;
inline int Target_Nonlinear::_internal_nonlinear_type_size() const {
  return nonlinear_type_.size();
}
inline int Target_Nonlinear::nonlinear_type_size() const {
  return _internal_nonlinear_type_size();
}
inline void Target_Nonlinear::clear_nonlinear_type() {
  nonlinear_type_.Clear();
}
inline ::vitis::ai::Target_Nonlinear_NonlinearType Target_Nonlinear::_internal_nonlinear_type(int index) const {
  return static_cast< ::vitis::ai::Target_Nonlinear_NonlinearType >(nonlinear_type_.Get(index));
}
inline ::vitis::ai::Target_Nonlinear_NonlinearType Target_Nonlinear::nonlinear_type(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Nonlinear.nonlinear_type)
  return _internal_nonlinear_type(index);
}
inline void Target_Nonlinear::set_nonlinear_type(int index, ::vitis::ai::Target_Nonlinear_NonlinearType value) {
  nonlinear_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Nonlinear.nonlinear_type)
}
inline void Target_Nonlinear::_internal_add_nonlinear_type(::vitis::ai::Target_Nonlinear_NonlinearType value) {
  nonlinear_type_.Add(value);
}
inline void Target_Nonlinear::add_nonlinear_type(::vitis::ai::Target_Nonlinear_NonlinearType value) {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Nonlinear.nonlinear_type)
  _internal_add_nonlinear_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Target_Nonlinear::nonlinear_type() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Nonlinear.nonlinear_type)
  return nonlinear_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Nonlinear::_internal_mutable_nonlinear_type() {
  return &nonlinear_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Nonlinear::mutable_nonlinear_type() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Nonlinear.nonlinear_type)
  return _internal_mutable_nonlinear_type();
}

// -------------------------------------------------------------------

// Target_PadLimit

// string pad_left = 1;
inline void Target_PadLimit::clear_pad_left() {
  pad_left_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_PadLimit::pad_left() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.PadLimit.pad_left)
  return _internal_pad_left();
}
inline void Target_PadLimit::set_pad_left(const std::string& value) {
  _internal_set_pad_left(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.PadLimit.pad_left)
}
inline std::string* Target_PadLimit::mutable_pad_left() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.PadLimit.pad_left)
  return _internal_mutable_pad_left();
}
inline const std::string& Target_PadLimit::_internal_pad_left() const {
  return pad_left_.Get();
}
inline void Target_PadLimit::_internal_set_pad_left(const std::string& value) {
  
  pad_left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_PadLimit::set_pad_left(std::string&& value) {
  
  pad_left_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.PadLimit.pad_left)
}
inline void Target_PadLimit::set_pad_left(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pad_left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.PadLimit.pad_left)
}
inline void Target_PadLimit::set_pad_left(const char* value,
    size_t size) {
  
  pad_left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.PadLimit.pad_left)
}
inline std::string* Target_PadLimit::_internal_mutable_pad_left() {
  
  return pad_left_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_PadLimit::release_pad_left() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.PadLimit.pad_left)
  return pad_left_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_PadLimit::set_allocated_pad_left(std::string* pad_left) {
  if (pad_left != nullptr) {
    
  } else {
    
  }
  pad_left_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pad_left,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.PadLimit.pad_left)
}

// string pad_right = 2;
inline void Target_PadLimit::clear_pad_right() {
  pad_right_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_PadLimit::pad_right() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.PadLimit.pad_right)
  return _internal_pad_right();
}
inline void Target_PadLimit::set_pad_right(const std::string& value) {
  _internal_set_pad_right(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.PadLimit.pad_right)
}
inline std::string* Target_PadLimit::mutable_pad_right() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.PadLimit.pad_right)
  return _internal_mutable_pad_right();
}
inline const std::string& Target_PadLimit::_internal_pad_right() const {
  return pad_right_.Get();
}
inline void Target_PadLimit::_internal_set_pad_right(const std::string& value) {
  
  pad_right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_PadLimit::set_pad_right(std::string&& value) {
  
  pad_right_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.PadLimit.pad_right)
}
inline void Target_PadLimit::set_pad_right(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pad_right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.PadLimit.pad_right)
}
inline void Target_PadLimit::set_pad_right(const char* value,
    size_t size) {
  
  pad_right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.PadLimit.pad_right)
}
inline std::string* Target_PadLimit::_internal_mutable_pad_right() {
  
  return pad_right_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_PadLimit::release_pad_right() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.PadLimit.pad_right)
  return pad_right_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_PadLimit::set_allocated_pad_right(std::string* pad_right) {
  if (pad_right != nullptr) {
    
  } else {
    
  }
  pad_right_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pad_right,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.PadLimit.pad_right)
}

// string pad_top = 3;
inline void Target_PadLimit::clear_pad_top() {
  pad_top_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_PadLimit::pad_top() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.PadLimit.pad_top)
  return _internal_pad_top();
}
inline void Target_PadLimit::set_pad_top(const std::string& value) {
  _internal_set_pad_top(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.PadLimit.pad_top)
}
inline std::string* Target_PadLimit::mutable_pad_top() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.PadLimit.pad_top)
  return _internal_mutable_pad_top();
}
inline const std::string& Target_PadLimit::_internal_pad_top() const {
  return pad_top_.Get();
}
inline void Target_PadLimit::_internal_set_pad_top(const std::string& value) {
  
  pad_top_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_PadLimit::set_pad_top(std::string&& value) {
  
  pad_top_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.PadLimit.pad_top)
}
inline void Target_PadLimit::set_pad_top(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pad_top_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.PadLimit.pad_top)
}
inline void Target_PadLimit::set_pad_top(const char* value,
    size_t size) {
  
  pad_top_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.PadLimit.pad_top)
}
inline std::string* Target_PadLimit::_internal_mutable_pad_top() {
  
  return pad_top_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_PadLimit::release_pad_top() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.PadLimit.pad_top)
  return pad_top_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_PadLimit::set_allocated_pad_top(std::string* pad_top) {
  if (pad_top != nullptr) {
    
  } else {
    
  }
  pad_top_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pad_top,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.PadLimit.pad_top)
}

// string pad_bottom = 4;
inline void Target_PadLimit::clear_pad_bottom() {
  pad_bottom_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_PadLimit::pad_bottom() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.PadLimit.pad_bottom)
  return _internal_pad_bottom();
}
inline void Target_PadLimit::set_pad_bottom(const std::string& value) {
  _internal_set_pad_bottom(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.PadLimit.pad_bottom)
}
inline std::string* Target_PadLimit::mutable_pad_bottom() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.PadLimit.pad_bottom)
  return _internal_mutable_pad_bottom();
}
inline const std::string& Target_PadLimit::_internal_pad_bottom() const {
  return pad_bottom_.Get();
}
inline void Target_PadLimit::_internal_set_pad_bottom(const std::string& value) {
  
  pad_bottom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_PadLimit::set_pad_bottom(std::string&& value) {
  
  pad_bottom_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.PadLimit.pad_bottom)
}
inline void Target_PadLimit::set_pad_bottom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pad_bottom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.PadLimit.pad_bottom)
}
inline void Target_PadLimit::set_pad_bottom(const char* value,
    size_t size) {
  
  pad_bottom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.PadLimit.pad_bottom)
}
inline std::string* Target_PadLimit::_internal_mutable_pad_bottom() {
  
  return pad_bottom_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_PadLimit::release_pad_bottom() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.PadLimit.pad_bottom)
  return pad_bottom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_PadLimit::set_allocated_pad_bottom(std::string* pad_bottom) {
  if (pad_bottom != nullptr) {
    
  } else {
    
  }
  pad_bottom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pad_bottom,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.PadLimit.pad_bottom)
}

// -------------------------------------------------------------------

// Target_Conv_OutputBankGroup

// repeated string output_bank = 1;
inline int Target_Conv_OutputBankGroup::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Conv_OutputBankGroup::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Conv_OutputBankGroup::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Conv_OutputBankGroup::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Conv_OutputBankGroup::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Conv_OutputBankGroup::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Conv_OutputBankGroup::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Conv_OutputBankGroup::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Conv_OutputBankGroup::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Conv_OutputBankGroup::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline void Target_Conv_OutputBankGroup::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline std::string* Target_Conv_OutputBankGroup::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Conv_OutputBankGroup::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline void Target_Conv_OutputBankGroup::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline void Target_Conv_OutputBankGroup::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline void Target_Conv_OutputBankGroup::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Conv_OutputBankGroup::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Conv_OutputBankGroup::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Conv.OutputBankGroup.output_bank)
  return &output_bank_;
}

// -------------------------------------------------------------------

// Target_Conv_ChannelAugmentation

// uint32 channel_num = 1;
inline void Target_Conv_ChannelAugmentation::clear_channel_num() {
  channel_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv_ChannelAugmentation::_internal_channel_num() const {
  return channel_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv_ChannelAugmentation::channel_num() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.ChannelAugmentation.channel_num)
  return _internal_channel_num();
}
inline void Target_Conv_ChannelAugmentation::_internal_set_channel_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_num_ = value;
}
inline void Target_Conv_ChannelAugmentation::set_channel_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_num(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.ChannelAugmentation.channel_num)
}

// -------------------------------------------------------------------

// Target_Conv_ConvLimit

// string kernel_size = 1;
inline void Target_Conv_ConvLimit::clear_kernel_size() {
  kernel_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Conv_ConvLimit::kernel_size() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.ConvLimit.kernel_size)
  return _internal_kernel_size();
}
inline void Target_Conv_ConvLimit::set_kernel_size(const std::string& value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.ConvLimit.kernel_size)
}
inline std::string* Target_Conv_ConvLimit::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.ConvLimit.kernel_size)
  return _internal_mutable_kernel_size();
}
inline const std::string& Target_Conv_ConvLimit::_internal_kernel_size() const {
  return kernel_size_.Get();
}
inline void Target_Conv_ConvLimit::_internal_set_kernel_size(const std::string& value) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Conv_ConvLimit::set_kernel_size(std::string&& value) {
  
  kernel_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Conv.ConvLimit.kernel_size)
}
inline void Target_Conv_ConvLimit::set_kernel_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.ConvLimit.kernel_size)
}
inline void Target_Conv_ConvLimit::set_kernel_size(const char* value,
    size_t size) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.ConvLimit.kernel_size)
}
inline std::string* Target_Conv_ConvLimit::_internal_mutable_kernel_size() {
  
  return kernel_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Conv_ConvLimit::release_kernel_size() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.ConvLimit.kernel_size)
  return kernel_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Conv_ConvLimit::set_allocated_kernel_size(std::string* kernel_size) {
  if (kernel_size != nullptr) {
    
  } else {
    
  }
  kernel_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.ConvLimit.kernel_size)
}

// string stride = 2;
inline void Target_Conv_ConvLimit::clear_stride() {
  stride_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Conv_ConvLimit::stride() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.ConvLimit.stride)
  return _internal_stride();
}
inline void Target_Conv_ConvLimit::set_stride(const std::string& value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.ConvLimit.stride)
}
inline std::string* Target_Conv_ConvLimit::mutable_stride() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.ConvLimit.stride)
  return _internal_mutable_stride();
}
inline const std::string& Target_Conv_ConvLimit::_internal_stride() const {
  return stride_.Get();
}
inline void Target_Conv_ConvLimit::_internal_set_stride(const std::string& value) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Conv_ConvLimit::set_stride(std::string&& value) {
  
  stride_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Conv.ConvLimit.stride)
}
inline void Target_Conv_ConvLimit::set_stride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.ConvLimit.stride)
}
inline void Target_Conv_ConvLimit::set_stride(const char* value,
    size_t size) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.ConvLimit.stride)
}
inline std::string* Target_Conv_ConvLimit::_internal_mutable_stride() {
  
  return stride_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Conv_ConvLimit::release_stride() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.ConvLimit.stride)
  return stride_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Conv_ConvLimit::set_allocated_stride(std::string* stride) {
  if (stride != nullptr) {
    
  } else {
    
  }
  stride_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stride,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.ConvLimit.stride)
}

// -------------------------------------------------------------------

// Target_Conv

// uint32 input_channel_parallel = 1;
inline void Target_Conv::clear_input_channel_parallel() {
  input_channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::_internal_input_channel_parallel() const {
  return input_channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::input_channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.input_channel_parallel)
  return _internal_input_channel_parallel();
}
inline void Target_Conv::_internal_set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_channel_parallel_ = value;
}
inline void Target_Conv::set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.input_channel_parallel)
}

// uint32 output_channel_parallel = 2;
inline void Target_Conv::clear_output_channel_parallel() {
  output_channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::_internal_output_channel_parallel() const {
  return output_channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::output_channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.output_channel_parallel)
  return _internal_output_channel_parallel();
}
inline void Target_Conv::_internal_set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_channel_parallel_ = value;
}
inline void Target_Conv::set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.output_channel_parallel)
}

// uint32 pixel_parallel = 3;
inline void Target_Conv::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Conv::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Conv::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Conv::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.pixel_parallel)
}

// repeated string input_bank = 4;
inline int Target_Conv::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Conv::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Conv::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Conv::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Conv.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Conv::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Conv::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Conv::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Conv::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Conv::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Conv::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.input_bank)
}
inline void Target_Conv::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.input_bank)
}
inline std::string* Target_Conv::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Conv::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.input_bank)
}
inline void Target_Conv::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.input_bank)
}
inline void Target_Conv::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Conv.input_bank)
}
inline void Target_Conv::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Conv.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Conv::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Conv.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Conv::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Conv.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 10;
inline int Target_Conv::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Conv::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Conv::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Conv::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Conv.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Conv::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Conv::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Conv::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Conv::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Conv::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Conv::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.output_bank)
}
inline void Target_Conv::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.output_bank)
}
inline std::string* Target_Conv::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Conv::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.output_bank)
}
inline void Target_Conv::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.output_bank)
}
inline void Target_Conv::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Conv.output_bank)
}
inline void Target_Conv::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Conv.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Conv::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Conv.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Conv::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Conv.output_bank)
  return &output_bank_;
}

// repeated .vitis.ai.Target.Conv.OutputBankGroup output_bank_group = 5;
inline int Target_Conv::_internal_output_bank_group_size() const {
  return output_bank_group_.size();
}
inline int Target_Conv::output_bank_group_size() const {
  return _internal_output_bank_group_size();
}
inline void Target_Conv::clear_output_bank_group() {
  output_bank_group_.Clear();
}
inline ::vitis::ai::Target_Conv_OutputBankGroup* Target_Conv::mutable_output_bank_group(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.output_bank_group)
  return output_bank_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_Conv_OutputBankGroup >*
Target_Conv::mutable_output_bank_group() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Conv.output_bank_group)
  return &output_bank_group_;
}
inline const ::vitis::ai::Target_Conv_OutputBankGroup& Target_Conv::_internal_output_bank_group(int index) const {
  return output_bank_group_.Get(index);
}
inline const ::vitis::ai::Target_Conv_OutputBankGroup& Target_Conv::output_bank_group(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.output_bank_group)
  return _internal_output_bank_group(index);
}
inline ::vitis::ai::Target_Conv_OutputBankGroup* Target_Conv::_internal_add_output_bank_group() {
  return output_bank_group_.Add();
}
inline ::vitis::ai::Target_Conv_OutputBankGroup* Target_Conv::add_output_bank_group() {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Conv.output_bank_group)
  return _internal_add_output_bank_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_Conv_OutputBankGroup >&
Target_Conv::output_bank_group() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Conv.output_bank_group)
  return output_bank_group_;
}

// string weight_bank = 6;
inline void Target_Conv::clear_weight_bank() {
  weight_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Conv::weight_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.weight_bank)
  return _internal_weight_bank();
}
inline void Target_Conv::set_weight_bank(const std::string& value) {
  _internal_set_weight_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.weight_bank)
}
inline std::string* Target_Conv::mutable_weight_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.weight_bank)
  return _internal_mutable_weight_bank();
}
inline const std::string& Target_Conv::_internal_weight_bank() const {
  return weight_bank_.Get();
}
inline void Target_Conv::_internal_set_weight_bank(const std::string& value) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Conv::set_weight_bank(std::string&& value) {
  
  weight_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Conv.weight_bank)
}
inline void Target_Conv::set_weight_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.weight_bank)
}
inline void Target_Conv::set_weight_bank(const char* value,
    size_t size) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.weight_bank)
}
inline std::string* Target_Conv::_internal_mutable_weight_bank() {
  
  return weight_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Conv::release_weight_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.weight_bank)
  return weight_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Conv::set_allocated_weight_bank(std::string* weight_bank) {
  if (weight_bank != nullptr) {
    
  } else {
    
  }
  weight_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.weight_bank)
}

// string bias_bank = 7;
inline void Target_Conv::clear_bias_bank() {
  bias_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Conv::bias_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.bias_bank)
  return _internal_bias_bank();
}
inline void Target_Conv::set_bias_bank(const std::string& value) {
  _internal_set_bias_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Conv.bias_bank)
}
inline std::string* Target_Conv::mutable_bias_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.bias_bank)
  return _internal_mutable_bias_bank();
}
inline const std::string& Target_Conv::_internal_bias_bank() const {
  return bias_bank_.Get();
}
inline void Target_Conv::_internal_set_bias_bank(const std::string& value) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Conv::set_bias_bank(std::string&& value) {
  
  bias_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Conv.bias_bank)
}
inline void Target_Conv::set_bias_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Conv.bias_bank)
}
inline void Target_Conv::set_bias_bank(const char* value,
    size_t size) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Conv.bias_bank)
}
inline std::string* Target_Conv::_internal_mutable_bias_bank() {
  
  return bias_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Conv::release_bias_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.bias_bank)
  return bias_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Conv::set_allocated_bias_bank(std::string* bias_bank) {
  if (bias_bank != nullptr) {
    
  } else {
    
  }
  bias_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bias_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.bias_bank)
}

// .vitis.ai.Target.Conv.ChannelAugmentation channel_augmentation = 8;
inline bool Target_Conv::_internal_has_channel_augmentation() const {
  return this != internal_default_instance() && channel_augmentation_ != nullptr;
}
inline bool Target_Conv::has_channel_augmentation() const {
  return _internal_has_channel_augmentation();
}
inline void Target_Conv::clear_channel_augmentation() {
  if (GetArena() == nullptr && channel_augmentation_ != nullptr) {
    delete channel_augmentation_;
  }
  channel_augmentation_ = nullptr;
}
inline const ::vitis::ai::Target_Conv_ChannelAugmentation& Target_Conv::_internal_channel_augmentation() const {
  const ::vitis::ai::Target_Conv_ChannelAugmentation* p = channel_augmentation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Conv_ChannelAugmentation*>(
      &::vitis::ai::_Target_Conv_ChannelAugmentation_default_instance_);
}
inline const ::vitis::ai::Target_Conv_ChannelAugmentation& Target_Conv::channel_augmentation() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.channel_augmentation)
  return _internal_channel_augmentation();
}
inline void Target_Conv::unsafe_arena_set_allocated_channel_augmentation(
    ::vitis::ai::Target_Conv_ChannelAugmentation* channel_augmentation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_augmentation_);
  }
  channel_augmentation_ = channel_augmentation;
  if (channel_augmentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Conv.channel_augmentation)
}
inline ::vitis::ai::Target_Conv_ChannelAugmentation* Target_Conv::release_channel_augmentation() {
  
  ::vitis::ai::Target_Conv_ChannelAugmentation* temp = channel_augmentation_;
  channel_augmentation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Conv_ChannelAugmentation* Target_Conv::unsafe_arena_release_channel_augmentation() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.channel_augmentation)
  
  ::vitis::ai::Target_Conv_ChannelAugmentation* temp = channel_augmentation_;
  channel_augmentation_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Conv_ChannelAugmentation* Target_Conv::_internal_mutable_channel_augmentation() {
  
  if (channel_augmentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Conv_ChannelAugmentation>(GetArena());
    channel_augmentation_ = p;
  }
  return channel_augmentation_;
}
inline ::vitis::ai::Target_Conv_ChannelAugmentation* Target_Conv::mutable_channel_augmentation() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.channel_augmentation)
  return _internal_mutable_channel_augmentation();
}
inline void Target_Conv::set_allocated_channel_augmentation(::vitis::ai::Target_Conv_ChannelAugmentation* channel_augmentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete channel_augmentation_;
  }
  if (channel_augmentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(channel_augmentation);
    if (message_arena != submessage_arena) {
      channel_augmentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_augmentation, submessage_arena);
    }
    
  } else {
    
  }
  channel_augmentation_ = channel_augmentation;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.channel_augmentation)
}

// .vitis.ai.Target.Nonlinear nonlinear = 9;
inline bool Target_Conv::_internal_has_nonlinear() const {
  return this != internal_default_instance() && nonlinear_ != nullptr;
}
inline bool Target_Conv::has_nonlinear() const {
  return _internal_has_nonlinear();
}
inline void Target_Conv::clear_nonlinear() {
  if (GetArena() == nullptr && nonlinear_ != nullptr) {
    delete nonlinear_;
  }
  nonlinear_ = nullptr;
}
inline const ::vitis::ai::Target_Nonlinear& Target_Conv::_internal_nonlinear() const {
  const ::vitis::ai::Target_Nonlinear* p = nonlinear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Nonlinear*>(
      &::vitis::ai::_Target_Nonlinear_default_instance_);
}
inline const ::vitis::ai::Target_Nonlinear& Target_Conv::nonlinear() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.nonlinear)
  return _internal_nonlinear();
}
inline void Target_Conv::unsafe_arena_set_allocated_nonlinear(
    ::vitis::ai::Target_Nonlinear* nonlinear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nonlinear_);
  }
  nonlinear_ = nonlinear;
  if (nonlinear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Conv.nonlinear)
}
inline ::vitis::ai::Target_Nonlinear* Target_Conv::release_nonlinear() {
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Conv::unsafe_arena_release_nonlinear() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.nonlinear)
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Conv::_internal_mutable_nonlinear() {
  
  if (nonlinear_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(GetArena());
    nonlinear_ = p;
  }
  return nonlinear_;
}
inline ::vitis::ai::Target_Nonlinear* Target_Conv::mutable_nonlinear() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.nonlinear)
  return _internal_mutable_nonlinear();
}
inline void Target_Conv::set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nonlinear_;
  }
  if (nonlinear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nonlinear);
    if (message_arena != submessage_arena) {
      nonlinear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonlinear, submessage_arena);
    }
    
  } else {
    
  }
  nonlinear_ = nonlinear;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.nonlinear)
}

// .vitis.ai.Target.Conv.ConvLimit conv_limit = 11;
inline bool Target_Conv::_internal_has_conv_limit() const {
  return this != internal_default_instance() && conv_limit_ != nullptr;
}
inline bool Target_Conv::has_conv_limit() const {
  return _internal_has_conv_limit();
}
inline void Target_Conv::clear_conv_limit() {
  if (GetArena() == nullptr && conv_limit_ != nullptr) {
    delete conv_limit_;
  }
  conv_limit_ = nullptr;
}
inline const ::vitis::ai::Target_Conv_ConvLimit& Target_Conv::_internal_conv_limit() const {
  const ::vitis::ai::Target_Conv_ConvLimit* p = conv_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Conv_ConvLimit*>(
      &::vitis::ai::_Target_Conv_ConvLimit_default_instance_);
}
inline const ::vitis::ai::Target_Conv_ConvLimit& Target_Conv::conv_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Conv.conv_limit)
  return _internal_conv_limit();
}
inline void Target_Conv::unsafe_arena_set_allocated_conv_limit(
    ::vitis::ai::Target_Conv_ConvLimit* conv_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conv_limit_);
  }
  conv_limit_ = conv_limit;
  if (conv_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Conv.conv_limit)
}
inline ::vitis::ai::Target_Conv_ConvLimit* Target_Conv::release_conv_limit() {
  
  ::vitis::ai::Target_Conv_ConvLimit* temp = conv_limit_;
  conv_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Conv_ConvLimit* Target_Conv::unsafe_arena_release_conv_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Conv.conv_limit)
  
  ::vitis::ai::Target_Conv_ConvLimit* temp = conv_limit_;
  conv_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Conv_ConvLimit* Target_Conv::_internal_mutable_conv_limit() {
  
  if (conv_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Conv_ConvLimit>(GetArena());
    conv_limit_ = p;
  }
  return conv_limit_;
}
inline ::vitis::ai::Target_Conv_ConvLimit* Target_Conv::mutable_conv_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Conv.conv_limit)
  return _internal_mutable_conv_limit();
}
inline void Target_Conv::set_allocated_conv_limit(::vitis::ai::Target_Conv_ConvLimit* conv_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conv_limit_;
  }
  if (conv_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conv_limit);
    if (message_arena != submessage_arena) {
      conv_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv_limit, submessage_arena);
    }
    
  } else {
    
  }
  conv_limit_ = conv_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Conv.conv_limit)
}

// -------------------------------------------------------------------

// Target_Eltwise_ConvCascade

// uint32 pixel_parallel = 1;
inline void Target_Eltwise_ConvCascade::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise_ConvCascade::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise_ConvCascade::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.ConvCascade.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Eltwise_ConvCascade::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Eltwise_ConvCascade::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.ConvCascade.pixel_parallel)
}

// -------------------------------------------------------------------

// Target_Eltwise

// uint32 channel_parallel = 1;
inline void Target_Eltwise::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Eltwise::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Eltwise::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.channel_parallel)
}

// uint32 pixel_parallel = 2;
inline void Target_Eltwise::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Eltwise::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Eltwise::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Eltwise::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.pixel_parallel)
}

// repeated string input_bank = 3;
inline int Target_Eltwise::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Eltwise::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Eltwise::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Eltwise::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Eltwise.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Eltwise::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Eltwise::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Eltwise::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Eltwise.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Eltwise::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Eltwise::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Eltwise::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Eltwise.input_bank)
}
inline void Target_Eltwise::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Eltwise.input_bank)
}
inline std::string* Target_Eltwise::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Eltwise::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Eltwise.input_bank)
}
inline void Target_Eltwise::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Eltwise.input_bank)
}
inline void Target_Eltwise::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Eltwise.input_bank)
}
inline void Target_Eltwise::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Eltwise.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Eltwise::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Eltwise.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Eltwise::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Eltwise.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 4;
inline int Target_Eltwise::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Eltwise::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Eltwise::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Eltwise::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Eltwise.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Eltwise::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Eltwise::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Eltwise::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Eltwise.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Eltwise::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Eltwise::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Eltwise::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Eltwise.output_bank)
}
inline void Target_Eltwise::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Eltwise.output_bank)
}
inline std::string* Target_Eltwise::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Eltwise::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Eltwise.output_bank)
}
inline void Target_Eltwise::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Eltwise.output_bank)
}
inline void Target_Eltwise::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Eltwise.output_bank)
}
inline void Target_Eltwise::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Eltwise.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Eltwise::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Eltwise.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Eltwise::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Eltwise.output_bank)
  return &output_bank_;
}

// .vitis.ai.Target.Nonlinear nonlinear = 5;
inline bool Target_Eltwise::_internal_has_nonlinear() const {
  return this != internal_default_instance() && nonlinear_ != nullptr;
}
inline bool Target_Eltwise::has_nonlinear() const {
  return _internal_has_nonlinear();
}
inline void Target_Eltwise::clear_nonlinear() {
  if (GetArena() == nullptr && nonlinear_ != nullptr) {
    delete nonlinear_;
  }
  nonlinear_ = nullptr;
}
inline const ::vitis::ai::Target_Nonlinear& Target_Eltwise::_internal_nonlinear() const {
  const ::vitis::ai::Target_Nonlinear* p = nonlinear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Nonlinear*>(
      &::vitis::ai::_Target_Nonlinear_default_instance_);
}
inline const ::vitis::ai::Target_Nonlinear& Target_Eltwise::nonlinear() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.nonlinear)
  return _internal_nonlinear();
}
inline void Target_Eltwise::unsafe_arena_set_allocated_nonlinear(
    ::vitis::ai::Target_Nonlinear* nonlinear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nonlinear_);
  }
  nonlinear_ = nonlinear;
  if (nonlinear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Eltwise.nonlinear)
}
inline ::vitis::ai::Target_Nonlinear* Target_Eltwise::release_nonlinear() {
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Eltwise::unsafe_arena_release_nonlinear() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Eltwise.nonlinear)
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Eltwise::_internal_mutable_nonlinear() {
  
  if (nonlinear_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(GetArena());
    nonlinear_ = p;
  }
  return nonlinear_;
}
inline ::vitis::ai::Target_Nonlinear* Target_Eltwise::mutable_nonlinear() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Eltwise.nonlinear)
  return _internal_mutable_nonlinear();
}
inline void Target_Eltwise::set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nonlinear_;
  }
  if (nonlinear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nonlinear);
    if (message_arena != submessage_arena) {
      nonlinear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonlinear, submessage_arena);
    }
    
  } else {
    
  }
  nonlinear_ = nonlinear;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Eltwise.nonlinear)
}

// repeated .vitis.ai.Target.Eltwise.ElewType elew_type = 6;
inline int Target_Eltwise::_internal_elew_type_size() const {
  return elew_type_.size();
}
inline int Target_Eltwise::elew_type_size() const {
  return _internal_elew_type_size();
}
inline void Target_Eltwise::clear_elew_type() {
  elew_type_.Clear();
}
inline ::vitis::ai::Target_Eltwise_ElewType Target_Eltwise::_internal_elew_type(int index) const {
  return static_cast< ::vitis::ai::Target_Eltwise_ElewType >(elew_type_.Get(index));
}
inline ::vitis::ai::Target_Eltwise_ElewType Target_Eltwise::elew_type(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.elew_type)
  return _internal_elew_type(index);
}
inline void Target_Eltwise::set_elew_type(int index, ::vitis::ai::Target_Eltwise_ElewType value) {
  elew_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Eltwise.elew_type)
}
inline void Target_Eltwise::_internal_add_elew_type(::vitis::ai::Target_Eltwise_ElewType value) {
  elew_type_.Add(value);
}
inline void Target_Eltwise::add_elew_type(::vitis::ai::Target_Eltwise_ElewType value) {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Eltwise.elew_type)
  _internal_add_elew_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Target_Eltwise::elew_type() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Eltwise.elew_type)
  return elew_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Eltwise::_internal_mutable_elew_type() {
  return &elew_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Eltwise::mutable_elew_type() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Eltwise.elew_type)
  return _internal_mutable_elew_type();
}

// .vitis.ai.Target.Eltwise.ConvCascade conv_cascade = 7;
inline bool Target_Eltwise::_internal_has_conv_cascade() const {
  return this != internal_default_instance() && conv_cascade_ != nullptr;
}
inline bool Target_Eltwise::has_conv_cascade() const {
  return _internal_has_conv_cascade();
}
inline void Target_Eltwise::clear_conv_cascade() {
  if (GetArena() == nullptr && conv_cascade_ != nullptr) {
    delete conv_cascade_;
  }
  conv_cascade_ = nullptr;
}
inline const ::vitis::ai::Target_Eltwise_ConvCascade& Target_Eltwise::_internal_conv_cascade() const {
  const ::vitis::ai::Target_Eltwise_ConvCascade* p = conv_cascade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Eltwise_ConvCascade*>(
      &::vitis::ai::_Target_Eltwise_ConvCascade_default_instance_);
}
inline const ::vitis::ai::Target_Eltwise_ConvCascade& Target_Eltwise::conv_cascade() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Eltwise.conv_cascade)
  return _internal_conv_cascade();
}
inline void Target_Eltwise::unsafe_arena_set_allocated_conv_cascade(
    ::vitis::ai::Target_Eltwise_ConvCascade* conv_cascade) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conv_cascade_);
  }
  conv_cascade_ = conv_cascade;
  if (conv_cascade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Eltwise.conv_cascade)
}
inline ::vitis::ai::Target_Eltwise_ConvCascade* Target_Eltwise::release_conv_cascade() {
  
  ::vitis::ai::Target_Eltwise_ConvCascade* temp = conv_cascade_;
  conv_cascade_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Eltwise_ConvCascade* Target_Eltwise::unsafe_arena_release_conv_cascade() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Eltwise.conv_cascade)
  
  ::vitis::ai::Target_Eltwise_ConvCascade* temp = conv_cascade_;
  conv_cascade_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Eltwise_ConvCascade* Target_Eltwise::_internal_mutable_conv_cascade() {
  
  if (conv_cascade_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Eltwise_ConvCascade>(GetArena());
    conv_cascade_ = p;
  }
  return conv_cascade_;
}
inline ::vitis::ai::Target_Eltwise_ConvCascade* Target_Eltwise::mutable_conv_cascade() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Eltwise.conv_cascade)
  return _internal_mutable_conv_cascade();
}
inline void Target_Eltwise::set_allocated_conv_cascade(::vitis::ai::Target_Eltwise_ConvCascade* conv_cascade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conv_cascade_;
  }
  if (conv_cascade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conv_cascade);
    if (message_arena != submessage_arena) {
      conv_cascade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv_cascade, submessage_arena);
    }
    
  } else {
    
  }
  conv_cascade_ = conv_cascade;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Eltwise.conv_cascade)
}

// -------------------------------------------------------------------

// Target_Pool_AvgLimit

// string kernel_size = 1;
inline void Target_Pool_AvgLimit::clear_kernel_size() {
  kernel_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Pool_AvgLimit::kernel_size() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.AvgLimit.kernel_size)
  return _internal_kernel_size();
}
inline void Target_Pool_AvgLimit::set_kernel_size(const std::string& value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.AvgLimit.kernel_size)
}
inline std::string* Target_Pool_AvgLimit::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.AvgLimit.kernel_size)
  return _internal_mutable_kernel_size();
}
inline const std::string& Target_Pool_AvgLimit::_internal_kernel_size() const {
  return kernel_size_.Get();
}
inline void Target_Pool_AvgLimit::_internal_set_kernel_size(const std::string& value) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Pool_AvgLimit::set_kernel_size(std::string&& value) {
  
  kernel_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Pool.AvgLimit.kernel_size)
}
inline void Target_Pool_AvgLimit::set_kernel_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.AvgLimit.kernel_size)
}
inline void Target_Pool_AvgLimit::set_kernel_size(const char* value,
    size_t size) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.AvgLimit.kernel_size)
}
inline std::string* Target_Pool_AvgLimit::_internal_mutable_kernel_size() {
  
  return kernel_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Pool_AvgLimit::release_kernel_size() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.AvgLimit.kernel_size)
  return kernel_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Pool_AvgLimit::set_allocated_kernel_size(std::string* kernel_size) {
  if (kernel_size != nullptr) {
    
  } else {
    
  }
  kernel_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.AvgLimit.kernel_size)
}

// string stride = 2;
inline void Target_Pool_AvgLimit::clear_stride() {
  stride_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Pool_AvgLimit::stride() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.AvgLimit.stride)
  return _internal_stride();
}
inline void Target_Pool_AvgLimit::set_stride(const std::string& value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.AvgLimit.stride)
}
inline std::string* Target_Pool_AvgLimit::mutable_stride() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.AvgLimit.stride)
  return _internal_mutable_stride();
}
inline const std::string& Target_Pool_AvgLimit::_internal_stride() const {
  return stride_.Get();
}
inline void Target_Pool_AvgLimit::_internal_set_stride(const std::string& value) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Pool_AvgLimit::set_stride(std::string&& value) {
  
  stride_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Pool.AvgLimit.stride)
}
inline void Target_Pool_AvgLimit::set_stride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.AvgLimit.stride)
}
inline void Target_Pool_AvgLimit::set_stride(const char* value,
    size_t size) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.AvgLimit.stride)
}
inline std::string* Target_Pool_AvgLimit::_internal_mutable_stride() {
  
  return stride_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Pool_AvgLimit::release_stride() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.AvgLimit.stride)
  return stride_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Pool_AvgLimit::set_allocated_stride(std::string* stride) {
  if (stride != nullptr) {
    
  } else {
    
  }
  stride_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stride,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.AvgLimit.stride)
}

// -------------------------------------------------------------------

// Target_Pool_MaxLimit

// string kernel_size = 1;
inline void Target_Pool_MaxLimit::clear_kernel_size() {
  kernel_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Pool_MaxLimit::kernel_size() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.MaxLimit.kernel_size)
  return _internal_kernel_size();
}
inline void Target_Pool_MaxLimit::set_kernel_size(const std::string& value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.MaxLimit.kernel_size)
}
inline std::string* Target_Pool_MaxLimit::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.MaxLimit.kernel_size)
  return _internal_mutable_kernel_size();
}
inline const std::string& Target_Pool_MaxLimit::_internal_kernel_size() const {
  return kernel_size_.Get();
}
inline void Target_Pool_MaxLimit::_internal_set_kernel_size(const std::string& value) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Pool_MaxLimit::set_kernel_size(std::string&& value) {
  
  kernel_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Pool.MaxLimit.kernel_size)
}
inline void Target_Pool_MaxLimit::set_kernel_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.MaxLimit.kernel_size)
}
inline void Target_Pool_MaxLimit::set_kernel_size(const char* value,
    size_t size) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.MaxLimit.kernel_size)
}
inline std::string* Target_Pool_MaxLimit::_internal_mutable_kernel_size() {
  
  return kernel_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Pool_MaxLimit::release_kernel_size() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.MaxLimit.kernel_size)
  return kernel_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Pool_MaxLimit::set_allocated_kernel_size(std::string* kernel_size) {
  if (kernel_size != nullptr) {
    
  } else {
    
  }
  kernel_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.MaxLimit.kernel_size)
}

// string stride = 2;
inline void Target_Pool_MaxLimit::clear_stride() {
  stride_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Pool_MaxLimit::stride() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.MaxLimit.stride)
  return _internal_stride();
}
inline void Target_Pool_MaxLimit::set_stride(const std::string& value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.MaxLimit.stride)
}
inline std::string* Target_Pool_MaxLimit::mutable_stride() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.MaxLimit.stride)
  return _internal_mutable_stride();
}
inline const std::string& Target_Pool_MaxLimit::_internal_stride() const {
  return stride_.Get();
}
inline void Target_Pool_MaxLimit::_internal_set_stride(const std::string& value) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Pool_MaxLimit::set_stride(std::string&& value) {
  
  stride_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Pool.MaxLimit.stride)
}
inline void Target_Pool_MaxLimit::set_stride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.MaxLimit.stride)
}
inline void Target_Pool_MaxLimit::set_stride(const char* value,
    size_t size) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.MaxLimit.stride)
}
inline std::string* Target_Pool_MaxLimit::_internal_mutable_stride() {
  
  return stride_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Pool_MaxLimit::release_stride() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.MaxLimit.stride)
  return stride_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Pool_MaxLimit::set_allocated_stride(std::string* stride) {
  if (stride != nullptr) {
    
  } else {
    
  }
  stride_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stride,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.MaxLimit.stride)
}

// -------------------------------------------------------------------

// Target_Pool

// uint32 channel_parallel = 1;
inline void Target_Pool::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Pool::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Pool::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Pool::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Pool::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.channel_parallel)
}

// uint32 pixel_parallel = 2;
inline void Target_Pool::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Pool::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Pool::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Pool::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Pool::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.pixel_parallel)
}

// repeated string input_bank = 3;
inline int Target_Pool::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Pool::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Pool::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Pool::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Pool.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Pool::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Pool::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Pool::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Pool::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Pool::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Pool::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.input_bank)
}
inline void Target_Pool::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.input_bank)
}
inline std::string* Target_Pool::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Pool::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Pool.input_bank)
}
inline void Target_Pool::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Pool.input_bank)
}
inline void Target_Pool::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Pool.input_bank)
}
inline void Target_Pool::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Pool.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Pool::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Pool.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Pool::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Pool.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 4;
inline int Target_Pool::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Pool::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Pool::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Pool::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Pool.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Pool::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Pool::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Pool::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Pool::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Pool::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Pool::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Pool.output_bank)
}
inline void Target_Pool::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Pool.output_bank)
}
inline std::string* Target_Pool::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Pool::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Pool.output_bank)
}
inline void Target_Pool::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Pool.output_bank)
}
inline void Target_Pool::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Pool.output_bank)
}
inline void Target_Pool::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Pool.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Pool::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Pool.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Pool::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Pool.output_bank)
  return &output_bank_;
}

// repeated .vitis.ai.Target.Pool.PoolType pool_type = 5;
inline int Target_Pool::_internal_pool_type_size() const {
  return pool_type_.size();
}
inline int Target_Pool::pool_type_size() const {
  return _internal_pool_type_size();
}
inline void Target_Pool::clear_pool_type() {
  pool_type_.Clear();
}
inline ::vitis::ai::Target_Pool_PoolType Target_Pool::_internal_pool_type(int index) const {
  return static_cast< ::vitis::ai::Target_Pool_PoolType >(pool_type_.Get(index));
}
inline ::vitis::ai::Target_Pool_PoolType Target_Pool::pool_type(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.pool_type)
  return _internal_pool_type(index);
}
inline void Target_Pool::set_pool_type(int index, ::vitis::ai::Target_Pool_PoolType value) {
  pool_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Pool.pool_type)
}
inline void Target_Pool::_internal_add_pool_type(::vitis::ai::Target_Pool_PoolType value) {
  pool_type_.Add(value);
}
inline void Target_Pool::add_pool_type(::vitis::ai::Target_Pool_PoolType value) {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Pool.pool_type)
  _internal_add_pool_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Target_Pool::pool_type() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Pool.pool_type)
  return pool_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Pool::_internal_mutable_pool_type() {
  return &pool_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Pool::mutable_pool_type() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Pool.pool_type)
  return _internal_mutable_pool_type();
}

// .vitis.ai.Target.Nonlinear nonlinear = 6;
inline bool Target_Pool::_internal_has_nonlinear() const {
  return this != internal_default_instance() && nonlinear_ != nullptr;
}
inline bool Target_Pool::has_nonlinear() const {
  return _internal_has_nonlinear();
}
inline void Target_Pool::clear_nonlinear() {
  if (GetArena() == nullptr && nonlinear_ != nullptr) {
    delete nonlinear_;
  }
  nonlinear_ = nullptr;
}
inline const ::vitis::ai::Target_Nonlinear& Target_Pool::_internal_nonlinear() const {
  const ::vitis::ai::Target_Nonlinear* p = nonlinear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Nonlinear*>(
      &::vitis::ai::_Target_Nonlinear_default_instance_);
}
inline const ::vitis::ai::Target_Nonlinear& Target_Pool::nonlinear() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.nonlinear)
  return _internal_nonlinear();
}
inline void Target_Pool::unsafe_arena_set_allocated_nonlinear(
    ::vitis::ai::Target_Nonlinear* nonlinear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nonlinear_);
  }
  nonlinear_ = nonlinear;
  if (nonlinear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Pool.nonlinear)
}
inline ::vitis::ai::Target_Nonlinear* Target_Pool::release_nonlinear() {
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Pool::unsafe_arena_release_nonlinear() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.nonlinear)
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Pool::_internal_mutable_nonlinear() {
  
  if (nonlinear_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(GetArena());
    nonlinear_ = p;
  }
  return nonlinear_;
}
inline ::vitis::ai::Target_Nonlinear* Target_Pool::mutable_nonlinear() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.nonlinear)
  return _internal_mutable_nonlinear();
}
inline void Target_Pool::set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nonlinear_;
  }
  if (nonlinear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nonlinear);
    if (message_arena != submessage_arena) {
      nonlinear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonlinear, submessage_arena);
    }
    
  } else {
    
  }
  nonlinear_ = nonlinear;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.nonlinear)
}

// .vitis.ai.Target.Pool.AvgLimit avg_limit = 7;
inline bool Target_Pool::_internal_has_avg_limit() const {
  return this != internal_default_instance() && avg_limit_ != nullptr;
}
inline bool Target_Pool::has_avg_limit() const {
  return _internal_has_avg_limit();
}
inline void Target_Pool::clear_avg_limit() {
  if (GetArena() == nullptr && avg_limit_ != nullptr) {
    delete avg_limit_;
  }
  avg_limit_ = nullptr;
}
inline const ::vitis::ai::Target_Pool_AvgLimit& Target_Pool::_internal_avg_limit() const {
  const ::vitis::ai::Target_Pool_AvgLimit* p = avg_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Pool_AvgLimit*>(
      &::vitis::ai::_Target_Pool_AvgLimit_default_instance_);
}
inline const ::vitis::ai::Target_Pool_AvgLimit& Target_Pool::avg_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.avg_limit)
  return _internal_avg_limit();
}
inline void Target_Pool::unsafe_arena_set_allocated_avg_limit(
    ::vitis::ai::Target_Pool_AvgLimit* avg_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avg_limit_);
  }
  avg_limit_ = avg_limit;
  if (avg_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Pool.avg_limit)
}
inline ::vitis::ai::Target_Pool_AvgLimit* Target_Pool::release_avg_limit() {
  
  ::vitis::ai::Target_Pool_AvgLimit* temp = avg_limit_;
  avg_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Pool_AvgLimit* Target_Pool::unsafe_arena_release_avg_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.avg_limit)
  
  ::vitis::ai::Target_Pool_AvgLimit* temp = avg_limit_;
  avg_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Pool_AvgLimit* Target_Pool::_internal_mutable_avg_limit() {
  
  if (avg_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Pool_AvgLimit>(GetArena());
    avg_limit_ = p;
  }
  return avg_limit_;
}
inline ::vitis::ai::Target_Pool_AvgLimit* Target_Pool::mutable_avg_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.avg_limit)
  return _internal_mutable_avg_limit();
}
inline void Target_Pool::set_allocated_avg_limit(::vitis::ai::Target_Pool_AvgLimit* avg_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avg_limit_;
  }
  if (avg_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avg_limit);
    if (message_arena != submessage_arena) {
      avg_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avg_limit, submessage_arena);
    }
    
  } else {
    
  }
  avg_limit_ = avg_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.avg_limit)
}

// .vitis.ai.Target.Pool.MaxLimit max_limit = 8;
inline bool Target_Pool::_internal_has_max_limit() const {
  return this != internal_default_instance() && max_limit_ != nullptr;
}
inline bool Target_Pool::has_max_limit() const {
  return _internal_has_max_limit();
}
inline void Target_Pool::clear_max_limit() {
  if (GetArena() == nullptr && max_limit_ != nullptr) {
    delete max_limit_;
  }
  max_limit_ = nullptr;
}
inline const ::vitis::ai::Target_Pool_MaxLimit& Target_Pool::_internal_max_limit() const {
  const ::vitis::ai::Target_Pool_MaxLimit* p = max_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Pool_MaxLimit*>(
      &::vitis::ai::_Target_Pool_MaxLimit_default_instance_);
}
inline const ::vitis::ai::Target_Pool_MaxLimit& Target_Pool::max_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Pool.max_limit)
  return _internal_max_limit();
}
inline void Target_Pool::unsafe_arena_set_allocated_max_limit(
    ::vitis::ai::Target_Pool_MaxLimit* max_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_limit_);
  }
  max_limit_ = max_limit;
  if (max_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Pool.max_limit)
}
inline ::vitis::ai::Target_Pool_MaxLimit* Target_Pool::release_max_limit() {
  
  ::vitis::ai::Target_Pool_MaxLimit* temp = max_limit_;
  max_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Pool_MaxLimit* Target_Pool::unsafe_arena_release_max_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Pool.max_limit)
  
  ::vitis::ai::Target_Pool_MaxLimit* temp = max_limit_;
  max_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Pool_MaxLimit* Target_Pool::_internal_mutable_max_limit() {
  
  if (max_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Pool_MaxLimit>(GetArena());
    max_limit_ = p;
  }
  return max_limit_;
}
inline ::vitis::ai::Target_Pool_MaxLimit* Target_Pool::mutable_max_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Pool.max_limit)
  return _internal_mutable_max_limit();
}
inline void Target_Pool::set_allocated_max_limit(::vitis::ai::Target_Pool_MaxLimit* max_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_limit_;
  }
  if (max_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max_limit);
    if (message_arena != submessage_arena) {
      max_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_limit, submessage_arena);
    }
    
  } else {
    
  }
  max_limit_ = max_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Pool.max_limit)
}

// -------------------------------------------------------------------

// Target_Dwconv_DwconvLimit

// string kernel_size = 1;
inline void Target_Dwconv_DwconvLimit::clear_kernel_size() {
  kernel_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Dwconv_DwconvLimit::kernel_size() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
  return _internal_kernel_size();
}
inline void Target_Dwconv_DwconvLimit::set_kernel_size(const std::string& value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
}
inline std::string* Target_Dwconv_DwconvLimit::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
  return _internal_mutable_kernel_size();
}
inline const std::string& Target_Dwconv_DwconvLimit::_internal_kernel_size() const {
  return kernel_size_.Get();
}
inline void Target_Dwconv_DwconvLimit::_internal_set_kernel_size(const std::string& value) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Dwconv_DwconvLimit::set_kernel_size(std::string&& value) {
  
  kernel_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
}
inline void Target_Dwconv_DwconvLimit::set_kernel_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
}
inline void Target_Dwconv_DwconvLimit::set_kernel_size(const char* value,
    size_t size) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
}
inline std::string* Target_Dwconv_DwconvLimit::_internal_mutable_kernel_size() {
  
  return kernel_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Dwconv_DwconvLimit::release_kernel_size() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
  return kernel_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Dwconv_DwconvLimit::set_allocated_kernel_size(std::string* kernel_size) {
  if (kernel_size != nullptr) {
    
  } else {
    
  }
  kernel_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.DwconvLimit.kernel_size)
}

// string stride = 2;
inline void Target_Dwconv_DwconvLimit::clear_stride() {
  stride_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Dwconv_DwconvLimit::stride() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.DwconvLimit.stride)
  return _internal_stride();
}
inline void Target_Dwconv_DwconvLimit::set_stride(const std::string& value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.DwconvLimit.stride)
}
inline std::string* Target_Dwconv_DwconvLimit::mutable_stride() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.DwconvLimit.stride)
  return _internal_mutable_stride();
}
inline const std::string& Target_Dwconv_DwconvLimit::_internal_stride() const {
  return stride_.Get();
}
inline void Target_Dwconv_DwconvLimit::_internal_set_stride(const std::string& value) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Dwconv_DwconvLimit::set_stride(std::string&& value) {
  
  stride_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Dwconv.DwconvLimit.stride)
}
inline void Target_Dwconv_DwconvLimit::set_stride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.DwconvLimit.stride)
}
inline void Target_Dwconv_DwconvLimit::set_stride(const char* value,
    size_t size) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.DwconvLimit.stride)
}
inline std::string* Target_Dwconv_DwconvLimit::_internal_mutable_stride() {
  
  return stride_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Dwconv_DwconvLimit::release_stride() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.DwconvLimit.stride)
  return stride_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Dwconv_DwconvLimit::set_allocated_stride(std::string* stride) {
  if (stride != nullptr) {
    
  } else {
    
  }
  stride_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stride,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.DwconvLimit.stride)
}

// -------------------------------------------------------------------

// Target_Dwconv

// uint32 channel_parallel = 1;
inline void Target_Dwconv::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Dwconv::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Dwconv::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Dwconv::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Dwconv::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.channel_parallel)
}

// uint32 pixel_parallel = 2;
inline void Target_Dwconv::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Dwconv::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Dwconv::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Dwconv::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Dwconv::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.pixel_parallel)
}

// repeated string input_bank = 3;
inline int Target_Dwconv::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Dwconv::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Dwconv::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Dwconv::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Dwconv.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Dwconv::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Dwconv::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Dwconv::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Dwconv::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Dwconv::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Dwconv::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.input_bank)
}
inline void Target_Dwconv::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.input_bank)
}
inline std::string* Target_Dwconv::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Dwconv::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Dwconv.input_bank)
}
inline void Target_Dwconv::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Dwconv.input_bank)
}
inline void Target_Dwconv::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Dwconv.input_bank)
}
inline void Target_Dwconv::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Dwconv.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Dwconv::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Dwconv.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Dwconv::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Dwconv.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 4;
inline int Target_Dwconv::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Dwconv::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Dwconv::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Dwconv::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Dwconv.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Dwconv::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Dwconv::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Dwconv::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Dwconv::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Dwconv::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Dwconv::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.output_bank)
}
inline void Target_Dwconv::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.output_bank)
}
inline std::string* Target_Dwconv::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Dwconv::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Dwconv.output_bank)
}
inline void Target_Dwconv::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Dwconv.output_bank)
}
inline void Target_Dwconv::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Dwconv.output_bank)
}
inline void Target_Dwconv::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Dwconv.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Dwconv::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Dwconv.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Dwconv::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Dwconv.output_bank)
  return &output_bank_;
}

// string weight_bank = 5;
inline void Target_Dwconv::clear_weight_bank() {
  weight_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Dwconv::weight_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.weight_bank)
  return _internal_weight_bank();
}
inline void Target_Dwconv::set_weight_bank(const std::string& value) {
  _internal_set_weight_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.weight_bank)
}
inline std::string* Target_Dwconv::mutable_weight_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.weight_bank)
  return _internal_mutable_weight_bank();
}
inline const std::string& Target_Dwconv::_internal_weight_bank() const {
  return weight_bank_.Get();
}
inline void Target_Dwconv::_internal_set_weight_bank(const std::string& value) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Dwconv::set_weight_bank(std::string&& value) {
  
  weight_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Dwconv.weight_bank)
}
inline void Target_Dwconv::set_weight_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.weight_bank)
}
inline void Target_Dwconv::set_weight_bank(const char* value,
    size_t size) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.weight_bank)
}
inline std::string* Target_Dwconv::_internal_mutable_weight_bank() {
  
  return weight_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Dwconv::release_weight_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.weight_bank)
  return weight_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Dwconv::set_allocated_weight_bank(std::string* weight_bank) {
  if (weight_bank != nullptr) {
    
  } else {
    
  }
  weight_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.weight_bank)
}

// string bias_bank = 6;
inline void Target_Dwconv::clear_bias_bank() {
  bias_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Dwconv::bias_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.bias_bank)
  return _internal_bias_bank();
}
inline void Target_Dwconv::set_bias_bank(const std::string& value) {
  _internal_set_bias_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Dwconv.bias_bank)
}
inline std::string* Target_Dwconv::mutable_bias_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.bias_bank)
  return _internal_mutable_bias_bank();
}
inline const std::string& Target_Dwconv::_internal_bias_bank() const {
  return bias_bank_.Get();
}
inline void Target_Dwconv::_internal_set_bias_bank(const std::string& value) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Dwconv::set_bias_bank(std::string&& value) {
  
  bias_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Dwconv.bias_bank)
}
inline void Target_Dwconv::set_bias_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Dwconv.bias_bank)
}
inline void Target_Dwconv::set_bias_bank(const char* value,
    size_t size) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Dwconv.bias_bank)
}
inline std::string* Target_Dwconv::_internal_mutable_bias_bank() {
  
  return bias_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Dwconv::release_bias_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.bias_bank)
  return bias_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Dwconv::set_allocated_bias_bank(std::string* bias_bank) {
  if (bias_bank != nullptr) {
    
  } else {
    
  }
  bias_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bias_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.bias_bank)
}

// .vitis.ai.Target.Nonlinear nonlinear = 7;
inline bool Target_Dwconv::_internal_has_nonlinear() const {
  return this != internal_default_instance() && nonlinear_ != nullptr;
}
inline bool Target_Dwconv::has_nonlinear() const {
  return _internal_has_nonlinear();
}
inline void Target_Dwconv::clear_nonlinear() {
  if (GetArena() == nullptr && nonlinear_ != nullptr) {
    delete nonlinear_;
  }
  nonlinear_ = nullptr;
}
inline const ::vitis::ai::Target_Nonlinear& Target_Dwconv::_internal_nonlinear() const {
  const ::vitis::ai::Target_Nonlinear* p = nonlinear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Nonlinear*>(
      &::vitis::ai::_Target_Nonlinear_default_instance_);
}
inline const ::vitis::ai::Target_Nonlinear& Target_Dwconv::nonlinear() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.nonlinear)
  return _internal_nonlinear();
}
inline void Target_Dwconv::unsafe_arena_set_allocated_nonlinear(
    ::vitis::ai::Target_Nonlinear* nonlinear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nonlinear_);
  }
  nonlinear_ = nonlinear;
  if (nonlinear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Dwconv.nonlinear)
}
inline ::vitis::ai::Target_Nonlinear* Target_Dwconv::release_nonlinear() {
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Dwconv::unsafe_arena_release_nonlinear() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.nonlinear)
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Dwconv::_internal_mutable_nonlinear() {
  
  if (nonlinear_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(GetArena());
    nonlinear_ = p;
  }
  return nonlinear_;
}
inline ::vitis::ai::Target_Nonlinear* Target_Dwconv::mutable_nonlinear() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.nonlinear)
  return _internal_mutable_nonlinear();
}
inline void Target_Dwconv::set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nonlinear_;
  }
  if (nonlinear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nonlinear);
    if (message_arena != submessage_arena) {
      nonlinear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonlinear, submessage_arena);
    }
    
  } else {
    
  }
  nonlinear_ = nonlinear;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.nonlinear)
}

// .vitis.ai.Target.Dwconv.DwconvLimit dwconv_limit = 8;
inline bool Target_Dwconv::_internal_has_dwconv_limit() const {
  return this != internal_default_instance() && dwconv_limit_ != nullptr;
}
inline bool Target_Dwconv::has_dwconv_limit() const {
  return _internal_has_dwconv_limit();
}
inline void Target_Dwconv::clear_dwconv_limit() {
  if (GetArena() == nullptr && dwconv_limit_ != nullptr) {
    delete dwconv_limit_;
  }
  dwconv_limit_ = nullptr;
}
inline const ::vitis::ai::Target_Dwconv_DwconvLimit& Target_Dwconv::_internal_dwconv_limit() const {
  const ::vitis::ai::Target_Dwconv_DwconvLimit* p = dwconv_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Dwconv_DwconvLimit*>(
      &::vitis::ai::_Target_Dwconv_DwconvLimit_default_instance_);
}
inline const ::vitis::ai::Target_Dwconv_DwconvLimit& Target_Dwconv::dwconv_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Dwconv.dwconv_limit)
  return _internal_dwconv_limit();
}
inline void Target_Dwconv::unsafe_arena_set_allocated_dwconv_limit(
    ::vitis::ai::Target_Dwconv_DwconvLimit* dwconv_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dwconv_limit_);
  }
  dwconv_limit_ = dwconv_limit;
  if (dwconv_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Dwconv.dwconv_limit)
}
inline ::vitis::ai::Target_Dwconv_DwconvLimit* Target_Dwconv::release_dwconv_limit() {
  
  ::vitis::ai::Target_Dwconv_DwconvLimit* temp = dwconv_limit_;
  dwconv_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Dwconv_DwconvLimit* Target_Dwconv::unsafe_arena_release_dwconv_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Dwconv.dwconv_limit)
  
  ::vitis::ai::Target_Dwconv_DwconvLimit* temp = dwconv_limit_;
  dwconv_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Dwconv_DwconvLimit* Target_Dwconv::_internal_mutable_dwconv_limit() {
  
  if (dwconv_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Dwconv_DwconvLimit>(GetArena());
    dwconv_limit_ = p;
  }
  return dwconv_limit_;
}
inline ::vitis::ai::Target_Dwconv_DwconvLimit* Target_Dwconv::mutable_dwconv_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Dwconv.dwconv_limit)
  return _internal_mutable_dwconv_limit();
}
inline void Target_Dwconv::set_allocated_dwconv_limit(::vitis::ai::Target_Dwconv_DwconvLimit* dwconv_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dwconv_limit_;
  }
  if (dwconv_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dwconv_limit);
    if (message_arena != submessage_arena) {
      dwconv_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dwconv_limit, submessage_arena);
    }
    
  } else {
    
  }
  dwconv_limit_ = dwconv_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Dwconv.dwconv_limit)
}

// -------------------------------------------------------------------

// Target_Move

// uint32 input_channel_parallel = 1;
inline void Target_Move::clear_input_channel_parallel() {
  input_channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::_internal_input_channel_parallel() const {
  return input_channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::input_channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Move.input_channel_parallel)
  return _internal_input_channel_parallel();
}
inline void Target_Move::_internal_set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_channel_parallel_ = value;
}
inline void Target_Move::set_input_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.input_channel_parallel)
}

// uint32 output_channel_parallel = 2;
inline void Target_Move::clear_output_channel_parallel() {
  output_channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::_internal_output_channel_parallel() const {
  return output_channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::output_channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Move.output_channel_parallel)
  return _internal_output_channel_parallel();
}
inline void Target_Move::_internal_set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_channel_parallel_ = value;
}
inline void Target_Move::set_output_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.output_channel_parallel)
}

// uint32 pixel_parallel = 3;
inline void Target_Move::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Move::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Move.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Move::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Move::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.pixel_parallel)
}

// repeated string input_bank = 4;
inline int Target_Move::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Move::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Move::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Move::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Move.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Move::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Move::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Move.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Move::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Move.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Move::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Move::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Move::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Move.input_bank)
}
inline void Target_Move::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Move.input_bank)
}
inline std::string* Target_Move::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Move::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Move.input_bank)
}
inline void Target_Move::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Move.input_bank)
}
inline void Target_Move::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Move.input_bank)
}
inline void Target_Move::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Move.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Move::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Move.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Move::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Move.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 5;
inline int Target_Move::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Move::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Move::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Move::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Move.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Move::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Move::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Move.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Move::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Move.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Move::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Move::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Move.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Move::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Move.output_bank)
}
inline void Target_Move::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Move.output_bank)
}
inline std::string* Target_Move::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Move::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Move.output_bank)
}
inline void Target_Move::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Move.output_bank)
}
inline void Target_Move::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Move.output_bank)
}
inline void Target_Move::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Move.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Move::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Move.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Move::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Move.output_bank)
  return &output_bank_;
}

// -------------------------------------------------------------------

// Target_Threshold

// uint32 channel_parallel = 1;
inline void Target_Threshold::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Threshold::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Threshold::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Threshold.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Threshold::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Threshold::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.channel_parallel)
}

// uint32 pixel_parallel = 2;
inline void Target_Threshold::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Threshold::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Threshold::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Threshold.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Threshold::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Threshold::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.pixel_parallel)
}

// repeated string input_bank = 3;
inline int Target_Threshold::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Threshold::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Threshold::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Threshold::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Threshold.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Threshold::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Threshold::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Threshold.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Threshold::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Threshold.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Threshold::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Threshold::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Threshold::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Threshold.input_bank)
}
inline void Target_Threshold::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Threshold.input_bank)
}
inline std::string* Target_Threshold::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Threshold::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Threshold.input_bank)
}
inline void Target_Threshold::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Threshold.input_bank)
}
inline void Target_Threshold::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Threshold.input_bank)
}
inline void Target_Threshold::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Threshold.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Threshold::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Threshold.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Threshold::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Threshold.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 4;
inline int Target_Threshold::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Threshold::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Threshold::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Threshold::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Threshold.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Threshold::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Threshold::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Threshold.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Threshold::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Threshold.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Threshold::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Threshold::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Threshold::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Threshold.output_bank)
}
inline void Target_Threshold::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Threshold.output_bank)
}
inline std::string* Target_Threshold::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Threshold::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Threshold.output_bank)
}
inline void Target_Threshold::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Threshold.output_bank)
}
inline void Target_Threshold::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Threshold.output_bank)
}
inline void Target_Threshold::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Threshold.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Threshold::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Threshold.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Threshold::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Threshold.output_bank)
  return &output_bank_;
}

// string param_bank = 5;
inline void Target_Threshold::clear_param_bank() {
  param_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Threshold::param_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Threshold.param_bank)
  return _internal_param_bank();
}
inline void Target_Threshold::set_param_bank(const std::string& value) {
  _internal_set_param_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Threshold.param_bank)
}
inline std::string* Target_Threshold::mutable_param_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Threshold.param_bank)
  return _internal_mutable_param_bank();
}
inline const std::string& Target_Threshold::_internal_param_bank() const {
  return param_bank_.Get();
}
inline void Target_Threshold::_internal_set_param_bank(const std::string& value) {
  
  param_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Threshold::set_param_bank(std::string&& value) {
  
  param_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Threshold.param_bank)
}
inline void Target_Threshold::set_param_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  param_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Threshold.param_bank)
}
inline void Target_Threshold::set_param_bank(const char* value,
    size_t size) {
  
  param_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Threshold.param_bank)
}
inline std::string* Target_Threshold::_internal_mutable_param_bank() {
  
  return param_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Threshold::release_param_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Threshold.param_bank)
  return param_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Threshold::set_allocated_param_bank(std::string* param_bank) {
  if (param_bank != nullptr) {
    
  } else {
    
  }
  param_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Threshold.param_bank)
}

// -------------------------------------------------------------------

// Target_Alu_AluLimit

// string kernel_size = 1;
inline void Target_Alu_AluLimit::clear_kernel_size() {
  kernel_size_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Alu_AluLimit::kernel_size() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.AluLimit.kernel_size)
  return _internal_kernel_size();
}
inline void Target_Alu_AluLimit::set_kernel_size(const std::string& value) {
  _internal_set_kernel_size(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.AluLimit.kernel_size)
}
inline std::string* Target_Alu_AluLimit::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.AluLimit.kernel_size)
  return _internal_mutable_kernel_size();
}
inline const std::string& Target_Alu_AluLimit::_internal_kernel_size() const {
  return kernel_size_.Get();
}
inline void Target_Alu_AluLimit::_internal_set_kernel_size(const std::string& value) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Alu_AluLimit::set_kernel_size(std::string&& value) {
  
  kernel_size_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Alu.AluLimit.kernel_size)
}
inline void Target_Alu_AluLimit::set_kernel_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.AluLimit.kernel_size)
}
inline void Target_Alu_AluLimit::set_kernel_size(const char* value,
    size_t size) {
  
  kernel_size_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.AluLimit.kernel_size)
}
inline std::string* Target_Alu_AluLimit::_internal_mutable_kernel_size() {
  
  return kernel_size_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Alu_AluLimit::release_kernel_size() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.AluLimit.kernel_size)
  return kernel_size_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Alu_AluLimit::set_allocated_kernel_size(std::string* kernel_size) {
  if (kernel_size != nullptr) {
    
  } else {
    
  }
  kernel_size_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_size,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.AluLimit.kernel_size)
}

// string stride = 2;
inline void Target_Alu_AluLimit::clear_stride() {
  stride_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Alu_AluLimit::stride() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.AluLimit.stride)
  return _internal_stride();
}
inline void Target_Alu_AluLimit::set_stride(const std::string& value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.AluLimit.stride)
}
inline std::string* Target_Alu_AluLimit::mutable_stride() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.AluLimit.stride)
  return _internal_mutable_stride();
}
inline const std::string& Target_Alu_AluLimit::_internal_stride() const {
  return stride_.Get();
}
inline void Target_Alu_AluLimit::_internal_set_stride(const std::string& value) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Alu_AluLimit::set_stride(std::string&& value) {
  
  stride_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Alu.AluLimit.stride)
}
inline void Target_Alu_AluLimit::set_stride(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.AluLimit.stride)
}
inline void Target_Alu_AluLimit::set_stride(const char* value,
    size_t size) {
  
  stride_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.AluLimit.stride)
}
inline std::string* Target_Alu_AluLimit::_internal_mutable_stride() {
  
  return stride_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Alu_AluLimit::release_stride() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.AluLimit.stride)
  return stride_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Alu_AluLimit::set_allocated_stride(std::string* stride) {
  if (stride != nullptr) {
    
  } else {
    
  }
  stride_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stride,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.AluLimit.stride)
}

// -------------------------------------------------------------------

// Target_Alu

// uint32 channel_parallel = 1;
inline void Target_Alu::clear_channel_parallel() {
  channel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Alu::_internal_channel_parallel() const {
  return channel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Alu::channel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.channel_parallel)
  return _internal_channel_parallel();
}
inline void Target_Alu::_internal_set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_parallel_ = value;
}
inline void Target_Alu::set_channel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.channel_parallel)
}

// uint32 pixel_parallel = 2;
inline void Target_Alu::clear_pixel_parallel() {
  pixel_parallel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Alu::_internal_pixel_parallel() const {
  return pixel_parallel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target_Alu::pixel_parallel() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.pixel_parallel)
  return _internal_pixel_parallel();
}
inline void Target_Alu::_internal_set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pixel_parallel_ = value;
}
inline void Target_Alu::set_pixel_parallel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pixel_parallel(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.pixel_parallel)
}

// repeated string input_bank = 3;
inline int Target_Alu::_internal_input_bank_size() const {
  return input_bank_.size();
}
inline int Target_Alu::input_bank_size() const {
  return _internal_input_bank_size();
}
inline void Target_Alu::clear_input_bank() {
  input_bank_.Clear();
}
inline std::string* Target_Alu::add_input_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Alu.input_bank)
  return _internal_add_input_bank();
}
inline const std::string& Target_Alu::_internal_input_bank(int index) const {
  return input_bank_.Get(index);
}
inline const std::string& Target_Alu::input_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.input_bank)
  return _internal_input_bank(index);
}
inline std::string* Target_Alu::mutable_input_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.input_bank)
  return input_bank_.Mutable(index);
}
inline void Target_Alu::set_input_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.input_bank)
  input_bank_.Mutable(index)->assign(value);
}
inline void Target_Alu::set_input_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.input_bank)
  input_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Alu::set_input_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.input_bank)
}
inline void Target_Alu::set_input_bank(int index, const char* value, size_t size) {
  input_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.input_bank)
}
inline std::string* Target_Alu::_internal_add_input_bank() {
  return input_bank_.Add();
}
inline void Target_Alu::add_input_bank(const std::string& value) {
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Alu.input_bank)
}
inline void Target_Alu::add_input_bank(std::string&& value) {
  input_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Alu.input_bank)
}
inline void Target_Alu::add_input_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Alu.input_bank)
}
inline void Target_Alu::add_input_bank(const char* value, size_t size) {
  input_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Alu.input_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Alu::input_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Alu.input_bank)
  return input_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Alu::mutable_input_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Alu.input_bank)
  return &input_bank_;
}

// repeated string output_bank = 4;
inline int Target_Alu::_internal_output_bank_size() const {
  return output_bank_.size();
}
inline int Target_Alu::output_bank_size() const {
  return _internal_output_bank_size();
}
inline void Target_Alu::clear_output_bank() {
  output_bank_.Clear();
}
inline std::string* Target_Alu::add_output_bank() {
  // @@protoc_insertion_point(field_add_mutable:vitis.ai.Target.Alu.output_bank)
  return _internal_add_output_bank();
}
inline const std::string& Target_Alu::_internal_output_bank(int index) const {
  return output_bank_.Get(index);
}
inline const std::string& Target_Alu::output_bank(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.output_bank)
  return _internal_output_bank(index);
}
inline std::string* Target_Alu::mutable_output_bank(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.output_bank)
  return output_bank_.Mutable(index);
}
inline void Target_Alu::set_output_bank(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.output_bank)
  output_bank_.Mutable(index)->assign(value);
}
inline void Target_Alu::set_output_bank(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.output_bank)
  output_bank_.Mutable(index)->assign(std::move(value));
}
inline void Target_Alu::set_output_bank(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.output_bank)
}
inline void Target_Alu::set_output_bank(int index, const char* value, size_t size) {
  output_bank_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.output_bank)
}
inline std::string* Target_Alu::_internal_add_output_bank() {
  return output_bank_.Add();
}
inline void Target_Alu::add_output_bank(const std::string& value) {
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Alu.output_bank)
}
inline void Target_Alu::add_output_bank(std::string&& value) {
  output_bank_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Alu.output_bank)
}
inline void Target_Alu::add_output_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_bank_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:vitis.ai.Target.Alu.output_bank)
}
inline void Target_Alu::add_output_bank(const char* value, size_t size) {
  output_bank_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:vitis.ai.Target.Alu.output_bank)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Target_Alu::output_bank() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Alu.output_bank)
  return output_bank_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Target_Alu::mutable_output_bank() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Alu.output_bank)
  return &output_bank_;
}

// string weight_bank = 5;
inline void Target_Alu::clear_weight_bank() {
  weight_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Alu::weight_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.weight_bank)
  return _internal_weight_bank();
}
inline void Target_Alu::set_weight_bank(const std::string& value) {
  _internal_set_weight_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.weight_bank)
}
inline std::string* Target_Alu::mutable_weight_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.weight_bank)
  return _internal_mutable_weight_bank();
}
inline const std::string& Target_Alu::_internal_weight_bank() const {
  return weight_bank_.Get();
}
inline void Target_Alu::_internal_set_weight_bank(const std::string& value) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Alu::set_weight_bank(std::string&& value) {
  
  weight_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Alu.weight_bank)
}
inline void Target_Alu::set_weight_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.weight_bank)
}
inline void Target_Alu::set_weight_bank(const char* value,
    size_t size) {
  
  weight_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.weight_bank)
}
inline std::string* Target_Alu::_internal_mutable_weight_bank() {
  
  return weight_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Alu::release_weight_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.weight_bank)
  return weight_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Alu::set_allocated_weight_bank(std::string* weight_bank) {
  if (weight_bank != nullptr) {
    
  } else {
    
  }
  weight_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weight_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.weight_bank)
}

// string bias_bank = 6;
inline void Target_Alu::clear_bias_bank() {
  bias_bank_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target_Alu::bias_bank() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.bias_bank)
  return _internal_bias_bank();
}
inline void Target_Alu::set_bias_bank(const std::string& value) {
  _internal_set_bias_bank(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.bias_bank)
}
inline std::string* Target_Alu::mutable_bias_bank() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.bias_bank)
  return _internal_mutable_bias_bank();
}
inline const std::string& Target_Alu::_internal_bias_bank() const {
  return bias_bank_.Get();
}
inline void Target_Alu::_internal_set_bias_bank(const std::string& value) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target_Alu::set_bias_bank(std::string&& value) {
  
  bias_bank_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.Alu.bias_bank)
}
inline void Target_Alu::set_bias_bank(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.Alu.bias_bank)
}
inline void Target_Alu::set_bias_bank(const char* value,
    size_t size) {
  
  bias_bank_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.Alu.bias_bank)
}
inline std::string* Target_Alu::_internal_mutable_bias_bank() {
  
  return bias_bank_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target_Alu::release_bias_bank() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.bias_bank)
  return bias_bank_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target_Alu::set_allocated_bias_bank(std::string* bias_bank) {
  if (bias_bank != nullptr) {
    
  } else {
    
  }
  bias_bank_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bias_bank,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.bias_bank)
}

// repeated .vitis.ai.Target.Alu.AluType alu_type = 7;
inline int Target_Alu::_internal_alu_type_size() const {
  return alu_type_.size();
}
inline int Target_Alu::alu_type_size() const {
  return _internal_alu_type_size();
}
inline void Target_Alu::clear_alu_type() {
  alu_type_.Clear();
}
inline ::vitis::ai::Target_Alu_AluType Target_Alu::_internal_alu_type(int index) const {
  return static_cast< ::vitis::ai::Target_Alu_AluType >(alu_type_.Get(index));
}
inline ::vitis::ai::Target_Alu_AluType Target_Alu::alu_type(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.alu_type)
  return _internal_alu_type(index);
}
inline void Target_Alu::set_alu_type(int index, ::vitis::ai::Target_Alu_AluType value) {
  alu_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.Alu.alu_type)
}
inline void Target_Alu::_internal_add_alu_type(::vitis::ai::Target_Alu_AluType value) {
  alu_type_.Add(value);
}
inline void Target_Alu::add_alu_type(::vitis::ai::Target_Alu_AluType value) {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.Alu.alu_type)
  _internal_add_alu_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Target_Alu::alu_type() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.Alu.alu_type)
  return alu_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Alu::_internal_mutable_alu_type() {
  return &alu_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Target_Alu::mutable_alu_type() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.Alu.alu_type)
  return _internal_mutable_alu_type();
}

// .vitis.ai.Target.Nonlinear nonlinear = 8;
inline bool Target_Alu::_internal_has_nonlinear() const {
  return this != internal_default_instance() && nonlinear_ != nullptr;
}
inline bool Target_Alu::has_nonlinear() const {
  return _internal_has_nonlinear();
}
inline void Target_Alu::clear_nonlinear() {
  if (GetArena() == nullptr && nonlinear_ != nullptr) {
    delete nonlinear_;
  }
  nonlinear_ = nullptr;
}
inline const ::vitis::ai::Target_Nonlinear& Target_Alu::_internal_nonlinear() const {
  const ::vitis::ai::Target_Nonlinear* p = nonlinear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Nonlinear*>(
      &::vitis::ai::_Target_Nonlinear_default_instance_);
}
inline const ::vitis::ai::Target_Nonlinear& Target_Alu::nonlinear() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.nonlinear)
  return _internal_nonlinear();
}
inline void Target_Alu::unsafe_arena_set_allocated_nonlinear(
    ::vitis::ai::Target_Nonlinear* nonlinear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nonlinear_);
  }
  nonlinear_ = nonlinear;
  if (nonlinear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Alu.nonlinear)
}
inline ::vitis::ai::Target_Nonlinear* Target_Alu::release_nonlinear() {
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Alu::unsafe_arena_release_nonlinear() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.nonlinear)
  
  ::vitis::ai::Target_Nonlinear* temp = nonlinear_;
  nonlinear_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Nonlinear* Target_Alu::_internal_mutable_nonlinear() {
  
  if (nonlinear_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Nonlinear>(GetArena());
    nonlinear_ = p;
  }
  return nonlinear_;
}
inline ::vitis::ai::Target_Nonlinear* Target_Alu::mutable_nonlinear() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.nonlinear)
  return _internal_mutable_nonlinear();
}
inline void Target_Alu::set_allocated_nonlinear(::vitis::ai::Target_Nonlinear* nonlinear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nonlinear_;
  }
  if (nonlinear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nonlinear);
    if (message_arena != submessage_arena) {
      nonlinear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nonlinear, submessage_arena);
    }
    
  } else {
    
  }
  nonlinear_ = nonlinear;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.nonlinear)
}

// .vitis.ai.Target.Alu.AluLimit alu_limit = 9;
inline bool Target_Alu::_internal_has_alu_limit() const {
  return this != internal_default_instance() && alu_limit_ != nullptr;
}
inline bool Target_Alu::has_alu_limit() const {
  return _internal_has_alu_limit();
}
inline void Target_Alu::clear_alu_limit() {
  if (GetArena() == nullptr && alu_limit_ != nullptr) {
    delete alu_limit_;
  }
  alu_limit_ = nullptr;
}
inline const ::vitis::ai::Target_Alu_AluLimit& Target_Alu::_internal_alu_limit() const {
  const ::vitis::ai::Target_Alu_AluLimit* p = alu_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Alu_AluLimit*>(
      &::vitis::ai::_Target_Alu_AluLimit_default_instance_);
}
inline const ::vitis::ai::Target_Alu_AluLimit& Target_Alu::alu_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.alu_limit)
  return _internal_alu_limit();
}
inline void Target_Alu::unsafe_arena_set_allocated_alu_limit(
    ::vitis::ai::Target_Alu_AluLimit* alu_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alu_limit_);
  }
  alu_limit_ = alu_limit;
  if (alu_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Alu.alu_limit)
}
inline ::vitis::ai::Target_Alu_AluLimit* Target_Alu::release_alu_limit() {
  
  ::vitis::ai::Target_Alu_AluLimit* temp = alu_limit_;
  alu_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Alu_AluLimit* Target_Alu::unsafe_arena_release_alu_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.alu_limit)
  
  ::vitis::ai::Target_Alu_AluLimit* temp = alu_limit_;
  alu_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Alu_AluLimit* Target_Alu::_internal_mutable_alu_limit() {
  
  if (alu_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Alu_AluLimit>(GetArena());
    alu_limit_ = p;
  }
  return alu_limit_;
}
inline ::vitis::ai::Target_Alu_AluLimit* Target_Alu::mutable_alu_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.alu_limit)
  return _internal_mutable_alu_limit();
}
inline void Target_Alu::set_allocated_alu_limit(::vitis::ai::Target_Alu_AluLimit* alu_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alu_limit_;
  }
  if (alu_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alu_limit);
    if (message_arena != submessage_arena) {
      alu_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alu_limit, submessage_arena);
    }
    
  } else {
    
  }
  alu_limit_ = alu_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.alu_limit)
}

// .vitis.ai.Target.PadLimit pad_limit = 10;
inline bool Target_Alu::_internal_has_pad_limit() const {
  return this != internal_default_instance() && pad_limit_ != nullptr;
}
inline bool Target_Alu::has_pad_limit() const {
  return _internal_has_pad_limit();
}
inline void Target_Alu::clear_pad_limit() {
  if (GetArena() == nullptr && pad_limit_ != nullptr) {
    delete pad_limit_;
  }
  pad_limit_ = nullptr;
}
inline const ::vitis::ai::Target_PadLimit& Target_Alu::_internal_pad_limit() const {
  const ::vitis::ai::Target_PadLimit* p = pad_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_PadLimit*>(
      &::vitis::ai::_Target_PadLimit_default_instance_);
}
inline const ::vitis::ai::Target_PadLimit& Target_Alu::pad_limit() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.Alu.pad_limit)
  return _internal_pad_limit();
}
inline void Target_Alu::unsafe_arena_set_allocated_pad_limit(
    ::vitis::ai::Target_PadLimit* pad_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pad_limit_);
  }
  pad_limit_ = pad_limit;
  if (pad_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.Alu.pad_limit)
}
inline ::vitis::ai::Target_PadLimit* Target_Alu::release_pad_limit() {
  
  ::vitis::ai::Target_PadLimit* temp = pad_limit_;
  pad_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_PadLimit* Target_Alu::unsafe_arena_release_pad_limit() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.Alu.pad_limit)
  
  ::vitis::ai::Target_PadLimit* temp = pad_limit_;
  pad_limit_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_PadLimit* Target_Alu::_internal_mutable_pad_limit() {
  
  if (pad_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_PadLimit>(GetArena());
    pad_limit_ = p;
  }
  return pad_limit_;
}
inline ::vitis::ai::Target_PadLimit* Target_Alu::mutable_pad_limit() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.Alu.pad_limit)
  return _internal_mutable_pad_limit();
}
inline void Target_Alu::set_allocated_pad_limit(::vitis::ai::Target_PadLimit* pad_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pad_limit_;
  }
  if (pad_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pad_limit);
    if (message_arena != submessage_arena) {
      pad_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pad_limit, submessage_arena);
    }
    
  } else {
    
  }
  pad_limit_ = pad_limit;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.Alu.pad_limit)
}

// -------------------------------------------------------------------

// Target

// string name = 1;
inline void Target::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target::name() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.name)
  return _internal_name();
}
inline void Target::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.name)
}
inline std::string* Target::mutable_name() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.name)
  return _internal_mutable_name();
}
inline const std::string& Target::_internal_name() const {
  return name_.Get();
}
inline void Target::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.name)
}
inline void Target::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.name)
}
inline void Target::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.name)
}
inline std::string* Target::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target::release_name() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.name)
}

// string type = 2;
inline void Target::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Target::type() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.type)
  return _internal_type();
}
inline void Target::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.type)
}
inline std::string* Target::mutable_type() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.type)
  return _internal_mutable_type();
}
inline const std::string& Target::_internal_type() const {
  return type_.Get();
}
inline void Target::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Target::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vitis.ai.Target.type)
}
inline void Target::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:vitis.ai.Target.type)
}
inline void Target::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vitis.ai.Target.type)
}
inline std::string* Target::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Target::release_type() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Target::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.type)
}

// uint64 isa_version = 3;
inline void Target::clear_isa_version() {
  isa_version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::_internal_isa_version() const {
  return isa_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::isa_version() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.isa_version)
  return _internal_isa_version();
}
inline void Target::_internal_set_isa_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  isa_version_ = value;
}
inline void Target::set_isa_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_isa_version(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.isa_version)
}

// uint64 feature_code = 4;
inline void Target::clear_feature_code() {
  feature_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::_internal_feature_code() const {
  return feature_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Target::feature_code() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.feature_code)
  return _internal_feature_code();
}
inline void Target::_internal_set_feature_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  feature_code_ = value;
}
inline void Target::set_feature_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_feature_code(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.feature_code)
}

// repeated .vitis.ai.Target.BankGroup bank_group = 5;
inline int Target::_internal_bank_group_size() const {
  return bank_group_.size();
}
inline int Target::bank_group_size() const {
  return _internal_bank_group_size();
}
inline void Target::clear_bank_group() {
  bank_group_.Clear();
}
inline ::vitis::ai::Target_BankGroup* Target::mutable_bank_group(int index) {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.bank_group)
  return bank_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_BankGroup >*
Target::mutable_bank_group() {
  // @@protoc_insertion_point(field_mutable_list:vitis.ai.Target.bank_group)
  return &bank_group_;
}
inline const ::vitis::ai::Target_BankGroup& Target::_internal_bank_group(int index) const {
  return bank_group_.Get(index);
}
inline const ::vitis::ai::Target_BankGroup& Target::bank_group(int index) const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.bank_group)
  return _internal_bank_group(index);
}
inline ::vitis::ai::Target_BankGroup* Target::_internal_add_bank_group() {
  return bank_group_.Add();
}
inline ::vitis::ai::Target_BankGroup* Target::add_bank_group() {
  // @@protoc_insertion_point(field_add:vitis.ai.Target.bank_group)
  return _internal_add_bank_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vitis::ai::Target_BankGroup >&
Target::bank_group() const {
  // @@protoc_insertion_point(field_list:vitis.ai.Target.bank_group)
  return bank_group_;
}

// .vitis.ai.Target.Load load_engine = 6;
inline bool Target::_internal_has_load_engine() const {
  return this != internal_default_instance() && load_engine_ != nullptr;
}
inline bool Target::has_load_engine() const {
  return _internal_has_load_engine();
}
inline void Target::clear_load_engine() {
  if (GetArena() == nullptr && load_engine_ != nullptr) {
    delete load_engine_;
  }
  load_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Load& Target::_internal_load_engine() const {
  const ::vitis::ai::Target_Load* p = load_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Load*>(
      &::vitis::ai::_Target_Load_default_instance_);
}
inline const ::vitis::ai::Target_Load& Target::load_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.load_engine)
  return _internal_load_engine();
}
inline void Target::unsafe_arena_set_allocated_load_engine(
    ::vitis::ai::Target_Load* load_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(load_engine_);
  }
  load_engine_ = load_engine;
  if (load_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.load_engine)
}
inline ::vitis::ai::Target_Load* Target::release_load_engine() {
  
  ::vitis::ai::Target_Load* temp = load_engine_;
  load_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Load* Target::unsafe_arena_release_load_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.load_engine)
  
  ::vitis::ai::Target_Load* temp = load_engine_;
  load_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Load* Target::_internal_mutable_load_engine() {
  
  if (load_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Load>(GetArena());
    load_engine_ = p;
  }
  return load_engine_;
}
inline ::vitis::ai::Target_Load* Target::mutable_load_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.load_engine)
  return _internal_mutable_load_engine();
}
inline void Target::set_allocated_load_engine(::vitis::ai::Target_Load* load_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete load_engine_;
  }
  if (load_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(load_engine);
    if (message_arena != submessage_arena) {
      load_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_engine, submessage_arena);
    }
    
  } else {
    
  }
  load_engine_ = load_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.load_engine)
}

// .vitis.ai.Target.Save save_engine = 7;
inline bool Target::_internal_has_save_engine() const {
  return this != internal_default_instance() && save_engine_ != nullptr;
}
inline bool Target::has_save_engine() const {
  return _internal_has_save_engine();
}
inline void Target::clear_save_engine() {
  if (GetArena() == nullptr && save_engine_ != nullptr) {
    delete save_engine_;
  }
  save_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Save& Target::_internal_save_engine() const {
  const ::vitis::ai::Target_Save* p = save_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Save*>(
      &::vitis::ai::_Target_Save_default_instance_);
}
inline const ::vitis::ai::Target_Save& Target::save_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.save_engine)
  return _internal_save_engine();
}
inline void Target::unsafe_arena_set_allocated_save_engine(
    ::vitis::ai::Target_Save* save_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_engine_);
  }
  save_engine_ = save_engine;
  if (save_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.save_engine)
}
inline ::vitis::ai::Target_Save* Target::release_save_engine() {
  
  ::vitis::ai::Target_Save* temp = save_engine_;
  save_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Save* Target::unsafe_arena_release_save_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.save_engine)
  
  ::vitis::ai::Target_Save* temp = save_engine_;
  save_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Save* Target::_internal_mutable_save_engine() {
  
  if (save_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Save>(GetArena());
    save_engine_ = p;
  }
  return save_engine_;
}
inline ::vitis::ai::Target_Save* Target::mutable_save_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.save_engine)
  return _internal_mutable_save_engine();
}
inline void Target::set_allocated_save_engine(::vitis::ai::Target_Save* save_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete save_engine_;
  }
  if (save_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(save_engine);
    if (message_arena != submessage_arena) {
      save_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_engine, submessage_arena);
    }
    
  } else {
    
  }
  save_engine_ = save_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.save_engine)
}

// .vitis.ai.Target.Conv conv_engine = 8;
inline bool Target::_internal_has_conv_engine() const {
  return this != internal_default_instance() && conv_engine_ != nullptr;
}
inline bool Target::has_conv_engine() const {
  return _internal_has_conv_engine();
}
inline void Target::clear_conv_engine() {
  if (GetArena() == nullptr && conv_engine_ != nullptr) {
    delete conv_engine_;
  }
  conv_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Conv& Target::_internal_conv_engine() const {
  const ::vitis::ai::Target_Conv* p = conv_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Conv*>(
      &::vitis::ai::_Target_Conv_default_instance_);
}
inline const ::vitis::ai::Target_Conv& Target::conv_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.conv_engine)
  return _internal_conv_engine();
}
inline void Target::unsafe_arena_set_allocated_conv_engine(
    ::vitis::ai::Target_Conv* conv_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(conv_engine_);
  }
  conv_engine_ = conv_engine;
  if (conv_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.conv_engine)
}
inline ::vitis::ai::Target_Conv* Target::release_conv_engine() {
  
  ::vitis::ai::Target_Conv* temp = conv_engine_;
  conv_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Conv* Target::unsafe_arena_release_conv_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.conv_engine)
  
  ::vitis::ai::Target_Conv* temp = conv_engine_;
  conv_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Conv* Target::_internal_mutable_conv_engine() {
  
  if (conv_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Conv>(GetArena());
    conv_engine_ = p;
  }
  return conv_engine_;
}
inline ::vitis::ai::Target_Conv* Target::mutable_conv_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.conv_engine)
  return _internal_mutable_conv_engine();
}
inline void Target::set_allocated_conv_engine(::vitis::ai::Target_Conv* conv_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete conv_engine_;
  }
  if (conv_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(conv_engine);
    if (message_arena != submessage_arena) {
      conv_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conv_engine, submessage_arena);
    }
    
  } else {
    
  }
  conv_engine_ = conv_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.conv_engine)
}

// .vitis.ai.Target.Eltwise eltwise_engine = 9;
inline bool Target::_internal_has_eltwise_engine() const {
  return this != internal_default_instance() && eltwise_engine_ != nullptr;
}
inline bool Target::has_eltwise_engine() const {
  return _internal_has_eltwise_engine();
}
inline void Target::clear_eltwise_engine() {
  if (GetArena() == nullptr && eltwise_engine_ != nullptr) {
    delete eltwise_engine_;
  }
  eltwise_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Eltwise& Target::_internal_eltwise_engine() const {
  const ::vitis::ai::Target_Eltwise* p = eltwise_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Eltwise*>(
      &::vitis::ai::_Target_Eltwise_default_instance_);
}
inline const ::vitis::ai::Target_Eltwise& Target::eltwise_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.eltwise_engine)
  return _internal_eltwise_engine();
}
inline void Target::unsafe_arena_set_allocated_eltwise_engine(
    ::vitis::ai::Target_Eltwise* eltwise_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eltwise_engine_);
  }
  eltwise_engine_ = eltwise_engine;
  if (eltwise_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.eltwise_engine)
}
inline ::vitis::ai::Target_Eltwise* Target::release_eltwise_engine() {
  
  ::vitis::ai::Target_Eltwise* temp = eltwise_engine_;
  eltwise_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Eltwise* Target::unsafe_arena_release_eltwise_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.eltwise_engine)
  
  ::vitis::ai::Target_Eltwise* temp = eltwise_engine_;
  eltwise_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Eltwise* Target::_internal_mutable_eltwise_engine() {
  
  if (eltwise_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Eltwise>(GetArena());
    eltwise_engine_ = p;
  }
  return eltwise_engine_;
}
inline ::vitis::ai::Target_Eltwise* Target::mutable_eltwise_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.eltwise_engine)
  return _internal_mutable_eltwise_engine();
}
inline void Target::set_allocated_eltwise_engine(::vitis::ai::Target_Eltwise* eltwise_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete eltwise_engine_;
  }
  if (eltwise_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(eltwise_engine);
    if (message_arena != submessage_arena) {
      eltwise_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eltwise_engine, submessage_arena);
    }
    
  } else {
    
  }
  eltwise_engine_ = eltwise_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.eltwise_engine)
}

// .vitis.ai.Target.Pool pool_engine = 10;
inline bool Target::_internal_has_pool_engine() const {
  return this != internal_default_instance() && pool_engine_ != nullptr;
}
inline bool Target::has_pool_engine() const {
  return _internal_has_pool_engine();
}
inline void Target::clear_pool_engine() {
  if (GetArena() == nullptr && pool_engine_ != nullptr) {
    delete pool_engine_;
  }
  pool_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Pool& Target::_internal_pool_engine() const {
  const ::vitis::ai::Target_Pool* p = pool_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Pool*>(
      &::vitis::ai::_Target_Pool_default_instance_);
}
inline const ::vitis::ai::Target_Pool& Target::pool_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.pool_engine)
  return _internal_pool_engine();
}
inline void Target::unsafe_arena_set_allocated_pool_engine(
    ::vitis::ai::Target_Pool* pool_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pool_engine_);
  }
  pool_engine_ = pool_engine;
  if (pool_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.pool_engine)
}
inline ::vitis::ai::Target_Pool* Target::release_pool_engine() {
  
  ::vitis::ai::Target_Pool* temp = pool_engine_;
  pool_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Pool* Target::unsafe_arena_release_pool_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.pool_engine)
  
  ::vitis::ai::Target_Pool* temp = pool_engine_;
  pool_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Pool* Target::_internal_mutable_pool_engine() {
  
  if (pool_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Pool>(GetArena());
    pool_engine_ = p;
  }
  return pool_engine_;
}
inline ::vitis::ai::Target_Pool* Target::mutable_pool_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.pool_engine)
  return _internal_mutable_pool_engine();
}
inline void Target::set_allocated_pool_engine(::vitis::ai::Target_Pool* pool_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pool_engine_;
  }
  if (pool_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pool_engine);
    if (message_arena != submessage_arena) {
      pool_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pool_engine, submessage_arena);
    }
    
  } else {
    
  }
  pool_engine_ = pool_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.pool_engine)
}

// .vitis.ai.Target.Dwconv dwconv_engine = 11;
inline bool Target::_internal_has_dwconv_engine() const {
  return this != internal_default_instance() && dwconv_engine_ != nullptr;
}
inline bool Target::has_dwconv_engine() const {
  return _internal_has_dwconv_engine();
}
inline void Target::clear_dwconv_engine() {
  if (GetArena() == nullptr && dwconv_engine_ != nullptr) {
    delete dwconv_engine_;
  }
  dwconv_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Dwconv& Target::_internal_dwconv_engine() const {
  const ::vitis::ai::Target_Dwconv* p = dwconv_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Dwconv*>(
      &::vitis::ai::_Target_Dwconv_default_instance_);
}
inline const ::vitis::ai::Target_Dwconv& Target::dwconv_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.dwconv_engine)
  return _internal_dwconv_engine();
}
inline void Target::unsafe_arena_set_allocated_dwconv_engine(
    ::vitis::ai::Target_Dwconv* dwconv_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dwconv_engine_);
  }
  dwconv_engine_ = dwconv_engine;
  if (dwconv_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.dwconv_engine)
}
inline ::vitis::ai::Target_Dwconv* Target::release_dwconv_engine() {
  
  ::vitis::ai::Target_Dwconv* temp = dwconv_engine_;
  dwconv_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Dwconv* Target::unsafe_arena_release_dwconv_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.dwconv_engine)
  
  ::vitis::ai::Target_Dwconv* temp = dwconv_engine_;
  dwconv_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Dwconv* Target::_internal_mutable_dwconv_engine() {
  
  if (dwconv_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Dwconv>(GetArena());
    dwconv_engine_ = p;
  }
  return dwconv_engine_;
}
inline ::vitis::ai::Target_Dwconv* Target::mutable_dwconv_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.dwconv_engine)
  return _internal_mutable_dwconv_engine();
}
inline void Target::set_allocated_dwconv_engine(::vitis::ai::Target_Dwconv* dwconv_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dwconv_engine_;
  }
  if (dwconv_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dwconv_engine);
    if (message_arena != submessage_arena) {
      dwconv_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dwconv_engine, submessage_arena);
    }
    
  } else {
    
  }
  dwconv_engine_ = dwconv_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.dwconv_engine)
}

// .vitis.ai.Target.Move move_engine = 12;
inline bool Target::_internal_has_move_engine() const {
  return this != internal_default_instance() && move_engine_ != nullptr;
}
inline bool Target::has_move_engine() const {
  return _internal_has_move_engine();
}
inline void Target::clear_move_engine() {
  if (GetArena() == nullptr && move_engine_ != nullptr) {
    delete move_engine_;
  }
  move_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Move& Target::_internal_move_engine() const {
  const ::vitis::ai::Target_Move* p = move_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Move*>(
      &::vitis::ai::_Target_Move_default_instance_);
}
inline const ::vitis::ai::Target_Move& Target::move_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.move_engine)
  return _internal_move_engine();
}
inline void Target::unsafe_arena_set_allocated_move_engine(
    ::vitis::ai::Target_Move* move_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_engine_);
  }
  move_engine_ = move_engine;
  if (move_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.move_engine)
}
inline ::vitis::ai::Target_Move* Target::release_move_engine() {
  
  ::vitis::ai::Target_Move* temp = move_engine_;
  move_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Move* Target::unsafe_arena_release_move_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.move_engine)
  
  ::vitis::ai::Target_Move* temp = move_engine_;
  move_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Move* Target::_internal_mutable_move_engine() {
  
  if (move_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Move>(GetArena());
    move_engine_ = p;
  }
  return move_engine_;
}
inline ::vitis::ai::Target_Move* Target::mutable_move_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.move_engine)
  return _internal_mutable_move_engine();
}
inline void Target::set_allocated_move_engine(::vitis::ai::Target_Move* move_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete move_engine_;
  }
  if (move_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(move_engine);
    if (message_arena != submessage_arena) {
      move_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_engine, submessage_arena);
    }
    
  } else {
    
  }
  move_engine_ = move_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.move_engine)
}

// .vitis.ai.Target.Threshold threshold_engine = 13;
inline bool Target::_internal_has_threshold_engine() const {
  return this != internal_default_instance() && threshold_engine_ != nullptr;
}
inline bool Target::has_threshold_engine() const {
  return _internal_has_threshold_engine();
}
inline void Target::clear_threshold_engine() {
  if (GetArena() == nullptr && threshold_engine_ != nullptr) {
    delete threshold_engine_;
  }
  threshold_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Threshold& Target::_internal_threshold_engine() const {
  const ::vitis::ai::Target_Threshold* p = threshold_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Threshold*>(
      &::vitis::ai::_Target_Threshold_default_instance_);
}
inline const ::vitis::ai::Target_Threshold& Target::threshold_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.threshold_engine)
  return _internal_threshold_engine();
}
inline void Target::unsafe_arena_set_allocated_threshold_engine(
    ::vitis::ai::Target_Threshold* threshold_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threshold_engine_);
  }
  threshold_engine_ = threshold_engine;
  if (threshold_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.threshold_engine)
}
inline ::vitis::ai::Target_Threshold* Target::release_threshold_engine() {
  
  ::vitis::ai::Target_Threshold* temp = threshold_engine_;
  threshold_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Threshold* Target::unsafe_arena_release_threshold_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.threshold_engine)
  
  ::vitis::ai::Target_Threshold* temp = threshold_engine_;
  threshold_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Threshold* Target::_internal_mutable_threshold_engine() {
  
  if (threshold_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Threshold>(GetArena());
    threshold_engine_ = p;
  }
  return threshold_engine_;
}
inline ::vitis::ai::Target_Threshold* Target::mutable_threshold_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.threshold_engine)
  return _internal_mutable_threshold_engine();
}
inline void Target::set_allocated_threshold_engine(::vitis::ai::Target_Threshold* threshold_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete threshold_engine_;
  }
  if (threshold_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(threshold_engine);
    if (message_arena != submessage_arena) {
      threshold_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_engine, submessage_arena);
    }
    
  } else {
    
  }
  threshold_engine_ = threshold_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.threshold_engine)
}

// .vitis.ai.Target.Alu alu_engine = 15;
inline bool Target::_internal_has_alu_engine() const {
  return this != internal_default_instance() && alu_engine_ != nullptr;
}
inline bool Target::has_alu_engine() const {
  return _internal_has_alu_engine();
}
inline void Target::clear_alu_engine() {
  if (GetArena() == nullptr && alu_engine_ != nullptr) {
    delete alu_engine_;
  }
  alu_engine_ = nullptr;
}
inline const ::vitis::ai::Target_Alu& Target::_internal_alu_engine() const {
  const ::vitis::ai::Target_Alu* p = alu_engine_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vitis::ai::Target_Alu*>(
      &::vitis::ai::_Target_Alu_default_instance_);
}
inline const ::vitis::ai::Target_Alu& Target::alu_engine() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.alu_engine)
  return _internal_alu_engine();
}
inline void Target::unsafe_arena_set_allocated_alu_engine(
    ::vitis::ai::Target_Alu* alu_engine) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alu_engine_);
  }
  alu_engine_ = alu_engine;
  if (alu_engine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vitis.ai.Target.alu_engine)
}
inline ::vitis::ai::Target_Alu* Target::release_alu_engine() {
  
  ::vitis::ai::Target_Alu* temp = alu_engine_;
  alu_engine_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vitis::ai::Target_Alu* Target::unsafe_arena_release_alu_engine() {
  // @@protoc_insertion_point(field_release:vitis.ai.Target.alu_engine)
  
  ::vitis::ai::Target_Alu* temp = alu_engine_;
  alu_engine_ = nullptr;
  return temp;
}
inline ::vitis::ai::Target_Alu* Target::_internal_mutable_alu_engine() {
  
  if (alu_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::vitis::ai::Target_Alu>(GetArena());
    alu_engine_ = p;
  }
  return alu_engine_;
}
inline ::vitis::ai::Target_Alu* Target::mutable_alu_engine() {
  // @@protoc_insertion_point(field_mutable:vitis.ai.Target.alu_engine)
  return _internal_mutable_alu_engine();
}
inline void Target::set_allocated_alu_engine(::vitis::ai::Target_Alu* alu_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alu_engine_;
  }
  if (alu_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alu_engine);
    if (message_arena != submessage_arena) {
      alu_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alu_engine, submessage_arena);
    }
    
  } else {
    
  }
  alu_engine_ = alu_engine;
  // @@protoc_insertion_point(field_set_allocated:vitis.ai.Target.alu_engine)
}

// uint32 batch = 14;
inline void Target::clear_batch() {
  batch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target::_internal_batch() const {
  return batch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Target::batch() const {
  // @@protoc_insertion_point(field_get:vitis.ai.Target.batch)
  return _internal_batch();
}
inline void Target::_internal_set_batch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  batch_ = value;
}
inline void Target::set_batch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_batch(value);
  // @@protoc_insertion_point(field_set:vitis.ai.Target.batch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ai
}  // namespace vitis

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch>() {
  return ::vitis::ai::Target_BankGroup_AdjustableWordWidth_WordWidthSwitch_descriptor();
}
template <> struct is_proto_enum< ::vitis::ai::Target_Nonlinear_NonlinearType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vitis::ai::Target_Nonlinear_NonlinearType>() {
  return ::vitis::ai::Target_Nonlinear_NonlinearType_descriptor();
}
template <> struct is_proto_enum< ::vitis::ai::Target_Eltwise_ElewType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vitis::ai::Target_Eltwise_ElewType>() {
  return ::vitis::ai::Target_Eltwise_ElewType_descriptor();
}
template <> struct is_proto_enum< ::vitis::ai::Target_Pool_PoolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vitis::ai::Target_Pool_PoolType>() {
  return ::vitis::ai::Target_Pool_PoolType_descriptor();
}
template <> struct is_proto_enum< ::vitis::ai::Target_Alu_AluType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vitis::ai::Target_Alu_AluType>() {
  return ::vitis::ai::Target_Alu_AluType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_target_2eproto
