// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AWBNormalization (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        src_data_V_V_dout,
        src_data_V_V_empty_n,
        src_data_V_V_read,
        dst_rows_dout,
        dst_rows_empty_n,
        dst_rows_read,
        dst_cols_dout,
        dst_cols_empty_n,
        dst_cols_read,
        dst_data_V_V_din,
        dst_data_V_V_full_n,
        dst_data_V_V_write,
        histogram_0_address0,
        histogram_0_ce0,
        histogram_0_q0,
        histogram_1_address0,
        histogram_1_ce0,
        histogram_1_q0,
        histogram_2_address0,
        histogram_2_ce0,
        histogram_2_q0,
        dst_rows_out_din,
        dst_rows_out_full_n,
        dst_rows_out_write,
        dst_cols_out_din,
        dst_cols_out_full_n,
        dst_cols_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [119:0] src_data_V_V_dout;
input   src_data_V_V_empty_n;
output   src_data_V_V_read;
input  [15:0] dst_rows_dout;
input   dst_rows_empty_n;
output   dst_rows_read;
input  [15:0] dst_cols_dout;
input   dst_cols_empty_n;
output   dst_cols_read;
output  [119:0] dst_data_V_V_din;
input   dst_data_V_V_full_n;
output   dst_data_V_V_write;
output  [9:0] histogram_0_address0;
output   histogram_0_ce0;
input  [31:0] histogram_0_q0;
output  [9:0] histogram_1_address0;
output   histogram_1_ce0;
input  [31:0] histogram_1_q0;
output  [9:0] histogram_2_address0;
output   histogram_2_ce0;
input  [31:0] histogram_2_q0;
output  [15:0] dst_rows_out_din;
input   dst_rows_out_full_n;
output   dst_rows_out_write;
output  [15:0] dst_cols_out_din;
input   dst_cols_out_full_n;
output   dst_cols_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg src_data_V_V_read;
reg dst_rows_read;
reg dst_cols_read;
reg dst_data_V_V_write;
reg dst_rows_out_write;
reg dst_cols_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    dst_rows_blk_n;
reg    dst_cols_blk_n;
reg    dst_rows_out_blk_n;
reg    dst_cols_out_blk_n;
reg   [15:0] dst_rows_read_reg_82;
reg    ap_block_state1;
reg   [15:0] dst_cols_read_reg_87;
wire    grp_AWBNormalizationkern_fu_66_ap_start;
wire    grp_AWBNormalizationkern_fu_66_ap_done;
wire    grp_AWBNormalizationkern_fu_66_ap_idle;
wire    grp_AWBNormalizationkern_fu_66_ap_ready;
wire    grp_AWBNormalizationkern_fu_66_src_data_V_V_read;
wire   [119:0] grp_AWBNormalizationkern_fu_66_dst_data_V_V_din;
wire    grp_AWBNormalizationkern_fu_66_dst_data_V_V_write;
wire   [9:0] grp_AWBNormalizationkern_fu_66_hist_0_address0;
wire    grp_AWBNormalizationkern_fu_66_hist_0_ce0;
wire   [9:0] grp_AWBNormalizationkern_fu_66_hist_1_address0;
wire    grp_AWBNormalizationkern_fu_66_hist_1_ce0;
wire   [9:0] grp_AWBNormalizationkern_fu_66_hist_2_address0;
wire    grp_AWBNormalizationkern_fu_66_hist_2_ce0;
reg    grp_AWBNormalizationkern_fu_66_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_AWBNormalizationkern_fu_66_ap_start_reg = 1'b0;
end

AWBNormalizationkern grp_AWBNormalizationkern_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AWBNormalizationkern_fu_66_ap_start),
    .ap_done(grp_AWBNormalizationkern_fu_66_ap_done),
    .ap_idle(grp_AWBNormalizationkern_fu_66_ap_idle),
    .ap_ready(grp_AWBNormalizationkern_fu_66_ap_ready),
    .src_data_V_V_dout(src_data_V_V_dout),
    .src_data_V_V_empty_n(src_data_V_V_empty_n),
    .src_data_V_V_read(grp_AWBNormalizationkern_fu_66_src_data_V_V_read),
    .dst_rows_read(dst_rows_read_reg_82),
    .dst_cols_read(dst_cols_read_reg_87),
    .dst_data_V_V_din(grp_AWBNormalizationkern_fu_66_dst_data_V_V_din),
    .dst_data_V_V_full_n(dst_data_V_V_full_n),
    .dst_data_V_V_write(grp_AWBNormalizationkern_fu_66_dst_data_V_V_write),
    .hist_0_address0(grp_AWBNormalizationkern_fu_66_hist_0_address0),
    .hist_0_ce0(grp_AWBNormalizationkern_fu_66_hist_0_ce0),
    .hist_0_q0(histogram_0_q0),
    .hist_1_address0(grp_AWBNormalizationkern_fu_66_hist_1_address0),
    .hist_1_ce0(grp_AWBNormalizationkern_fu_66_hist_1_ce0),
    .hist_1_q0(histogram_1_q0),
    .hist_2_address0(grp_AWBNormalizationkern_fu_66_hist_2_address0),
    .hist_2_ce0(grp_AWBNormalizationkern_fu_66_hist_2_ce0),
    .hist_2_q0(histogram_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_AWBNormalizationkern_fu_66_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AWBNormalizationkern_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_AWBNormalizationkern_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_AWBNormalizationkern_fu_66_ap_ready == 1'b1)) begin
            grp_AWBNormalizationkern_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_read_reg_87 <= dst_cols_dout;
        dst_rows_read_reg_82 <= dst_rows_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_AWBNormalizationkern_fu_66_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_blk_n = dst_cols_empty_n;
    end else begin
        dst_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_out_blk_n = dst_cols_out_full_n;
    end else begin
        dst_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_out_write = 1'b1;
    end else begin
        dst_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_cols_read = 1'b1;
    end else begin
        dst_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_data_V_V_write = grp_AWBNormalizationkern_fu_66_dst_data_V_V_write;
    end else begin
        dst_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_blk_n = dst_rows_empty_n;
    end else begin
        dst_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_out_blk_n = dst_rows_out_full_n;
    end else begin
        dst_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_out_write = 1'b1;
    end else begin
        dst_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dst_rows_read = 1'b1;
    end else begin
        dst_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_AWBNormalizationkern_fu_66_ap_done == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        src_data_V_V_read = grp_AWBNormalizationkern_fu_66_src_data_V_V_read;
    end else begin
        src_data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_AWBNormalizationkern_fu_66_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (dst_cols_out_full_n == 1'b0) | (dst_rows_out_full_n == 1'b0) | (dst_cols_empty_n == 1'b0) | (dst_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign dst_cols_out_din = dst_cols_dout;

assign dst_data_V_V_din = grp_AWBNormalizationkern_fu_66_dst_data_V_V_din;

assign dst_rows_out_din = dst_rows_dout;

assign grp_AWBNormalizationkern_fu_66_ap_start = grp_AWBNormalizationkern_fu_66_ap_start_reg;

assign histogram_0_address0 = grp_AWBNormalizationkern_fu_66_hist_0_address0;

assign histogram_0_ce0 = grp_AWBNormalizationkern_fu_66_hist_0_ce0;

assign histogram_1_address0 = grp_AWBNormalizationkern_fu_66_hist_1_address0;

assign histogram_1_ce0 = grp_AWBNormalizationkern_fu_66_hist_1_ce0;

assign histogram_2_address0 = grp_AWBNormalizationkern_fu_66_hist_2_address0;

assign histogram_2_ce0 = grp_AWBNormalizationkern_fu_66_hist_2_ce0;

assign start_out = real_start;

endmodule //AWBNormalization
