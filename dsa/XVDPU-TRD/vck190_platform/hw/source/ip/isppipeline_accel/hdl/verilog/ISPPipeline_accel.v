// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ISPPipeline_accel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-1LP-e-S-es1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.051000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=127,HLS_SYN_DSP=0,HLS_SYN_FF=49745,HLS_SYN_LUT=47474,HLS_VERSION=2020_2}" *)

module ISPPipeline_accel (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [39:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [4:0] s_axis_video_TKEEP;
input  [4:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [95:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [11:0] m_axis_video_TKEEP;
output  [11:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] width;
wire   [15:0] height;
wire   [15:0] bayer_phase;
reg   [0:0] flag;
reg   [9:0] hist0_0_address0;
reg    hist0_0_ce0;
reg    hist0_0_we0;
wire   [31:0] hist0_0_q0;
reg   [9:0] hist0_1_address0;
reg    hist0_1_ce0;
reg    hist0_1_we0;
wire   [31:0] hist0_1_q0;
reg   [9:0] hist0_2_address0;
reg    hist0_2_ce0;
reg    hist0_2_we0;
wire   [31:0] hist0_2_q0;
reg   [9:0] hist1_0_address0;
reg    hist1_0_ce0;
reg    hist1_0_we0;
wire   [31:0] hist1_0_q0;
reg   [9:0] hist1_1_address0;
reg    hist1_1_ce0;
reg    hist1_1_we0;
wire   [31:0] hist1_1_q0;
reg   [9:0] hist1_2_address0;
reg    hist1_2_ce0;
reg    hist1_2_we0;
wire   [31:0] hist1_2_q0;
reg   [15:0] height_read_reg_173;
reg   [15:0] width_read_reg_178;
wire   [95:0] grp_ISPpipeline_fu_109_m_axis_video_TDATA;
wire   [11:0] grp_ISPpipeline_fu_109_m_axis_video_TKEEP;
wire   [11:0] grp_ISPpipeline_fu_109_m_axis_video_TSTRB;
wire   [0:0] grp_ISPpipeline_fu_109_m_axis_video_TUSER;
wire   [0:0] grp_ISPpipeline_fu_109_m_axis_video_TLAST;
wire   [0:0] grp_ISPpipeline_fu_109_m_axis_video_TID;
wire   [0:0] grp_ISPpipeline_fu_109_m_axis_video_TDEST;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_0_address0;
wire    grp_ISPpipeline_fu_109_hist0_0_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_0_d0;
wire    grp_ISPpipeline_fu_109_hist0_0_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_0_address1;
wire    grp_ISPpipeline_fu_109_hist0_0_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_0_d1;
wire    grp_ISPpipeline_fu_109_hist0_0_we1;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_1_address0;
wire    grp_ISPpipeline_fu_109_hist0_1_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_1_d0;
wire    grp_ISPpipeline_fu_109_hist0_1_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_1_address1;
wire    grp_ISPpipeline_fu_109_hist0_1_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_1_d1;
wire    grp_ISPpipeline_fu_109_hist0_1_we1;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_2_address0;
wire    grp_ISPpipeline_fu_109_hist0_2_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_2_d0;
wire    grp_ISPpipeline_fu_109_hist0_2_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist0_2_address1;
wire    grp_ISPpipeline_fu_109_hist0_2_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist0_2_d1;
wire    grp_ISPpipeline_fu_109_hist0_2_we1;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_0_address0;
wire    grp_ISPpipeline_fu_109_hist1_0_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_0_d0;
reg   [31:0] grp_ISPpipeline_fu_109_hist1_0_q0;
wire    grp_ISPpipeline_fu_109_hist1_0_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_0_address1;
wire    grp_ISPpipeline_fu_109_hist1_0_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_0_d1;
wire    grp_ISPpipeline_fu_109_hist1_0_we1;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_1_address0;
wire    grp_ISPpipeline_fu_109_hist1_1_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_1_d0;
reg   [31:0] grp_ISPpipeline_fu_109_hist1_1_q0;
wire    grp_ISPpipeline_fu_109_hist1_1_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_1_address1;
wire    grp_ISPpipeline_fu_109_hist1_1_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_1_d1;
wire    grp_ISPpipeline_fu_109_hist1_1_we1;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_2_address0;
wire    grp_ISPpipeline_fu_109_hist1_2_ce0;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_2_d0;
reg   [31:0] grp_ISPpipeline_fu_109_hist1_2_q0;
wire    grp_ISPpipeline_fu_109_hist1_2_we0;
wire   [9:0] grp_ISPpipeline_fu_109_hist1_2_address1;
wire    grp_ISPpipeline_fu_109_hist1_2_ce1;
wire   [31:0] grp_ISPpipeline_fu_109_hist1_2_d1;
wire    grp_ISPpipeline_fu_109_hist1_2_we1;
wire    grp_ISPpipeline_fu_109_ap_start;
wire    grp_ISPpipeline_fu_109_s_axis_video_TREADY;
wire    grp_ISPpipeline_fu_109_ap_done;
wire    grp_ISPpipeline_fu_109_m_axis_video_TVALID;
wire    grp_ISPpipeline_fu_109_m_axis_video_TREADY;
wire    grp_ISPpipeline_fu_109_ap_ready;
wire    grp_ISPpipeline_fu_109_ap_idle;
reg    grp_ISPpipeline_fu_109_ap_continue;
reg   [0:0] storemerge_reg_96;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_ISPpipeline_fu_109_ap_ready;
wire    ap_sync_grp_ISPpipeline_fu_109_ap_done;
reg    ap_block_state2_on_subcall_done;
wire    ap_CS_fsm_state3;
reg    ap_block_state3_on_subcall_done;
reg    grp_ISPpipeline_fu_109_ap_start_reg;
wire   [0:0] flag_load_load_fu_163_p1;
reg    ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready;
reg    ap_sync_reg_grp_ISPpipeline_fu_109_ap_done;
wire    ap_CS_fsm_state4;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [39:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [4:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [4:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 flag = 1'd0;
#0 grp_ISPpipeline_fu_109_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready = 1'b0;
#0 ap_sync_reg_grp_ISPpipeline_fu_109_ap_done = 1'b0;
end

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist0_0_address0),
    .ce0(hist0_0_ce0),
    .we0(hist0_0_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_0_d0),
    .q0(hist0_0_q0)
);

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist0_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist0_1_address0),
    .ce0(hist0_1_ce0),
    .we0(hist0_1_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_1_d0),
    .q0(hist0_1_q0)
);

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist0_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist0_2_address0),
    .ce0(hist0_2_ce0),
    .we0(hist0_2_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_2_d0),
    .q0(hist0_2_q0)
);

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist1_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist1_0_address0),
    .ce0(hist1_0_ce0),
    .we0(hist1_0_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_0_d0),
    .q0(hist1_0_q0)
);

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist1_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist1_1_address0),
    .ce0(hist1_1_ce0),
    .we0(hist1_1_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_1_d0),
    .q0(hist1_1_q0)
);

ISPPipeline_accelbml #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
hist1_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hist1_2_address0),
    .ce0(hist1_2_ce0),
    .we0(hist1_2_we0),
    .d0(grp_ISPpipeline_fu_109_hist0_2_d0),
    .q0(hist1_2_q0)
);

ISPPipeline_accel_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ISPPipeline_accel_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width(width),
    .height(height),
    .bayer_phase(bayer_phase),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

ISPpipeline grp_ISPpipeline_fu_109(
    .s_axis_video_TDATA(s_axis_video_TDATA_int),
    .s_axis_video_TKEEP(s_axis_video_TKEEP_int),
    .s_axis_video_TSTRB(s_axis_video_TSTRB_int),
    .s_axis_video_TUSER(s_axis_video_TUSER_int),
    .s_axis_video_TLAST(s_axis_video_TLAST_int),
    .s_axis_video_TID(s_axis_video_TID_int),
    .s_axis_video_TDEST(s_axis_video_TDEST_int),
    .m_axis_video_TDATA(grp_ISPpipeline_fu_109_m_axis_video_TDATA),
    .m_axis_video_TKEEP(grp_ISPpipeline_fu_109_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(grp_ISPpipeline_fu_109_m_axis_video_TSTRB),
    .m_axis_video_TUSER(grp_ISPpipeline_fu_109_m_axis_video_TUSER),
    .m_axis_video_TLAST(grp_ISPpipeline_fu_109_m_axis_video_TLAST),
    .m_axis_video_TID(grp_ISPpipeline_fu_109_m_axis_video_TID),
    .m_axis_video_TDEST(grp_ISPpipeline_fu_109_m_axis_video_TDEST),
    .height(height_read_reg_173),
    .width(width_read_reg_178),
    .hist0_0_address0(grp_ISPpipeline_fu_109_hist0_0_address0),
    .hist0_0_ce0(grp_ISPpipeline_fu_109_hist0_0_ce0),
    .hist0_0_d0(grp_ISPpipeline_fu_109_hist0_0_d0),
    .hist0_0_q0(32'd0),
    .hist0_0_we0(grp_ISPpipeline_fu_109_hist0_0_we0),
    .hist0_0_address1(grp_ISPpipeline_fu_109_hist0_0_address1),
    .hist0_0_ce1(grp_ISPpipeline_fu_109_hist0_0_ce1),
    .hist0_0_d1(grp_ISPpipeline_fu_109_hist0_0_d1),
    .hist0_0_q1(32'd0),
    .hist0_0_we1(grp_ISPpipeline_fu_109_hist0_0_we1),
    .hist0_1_address0(grp_ISPpipeline_fu_109_hist0_1_address0),
    .hist0_1_ce0(grp_ISPpipeline_fu_109_hist0_1_ce0),
    .hist0_1_d0(grp_ISPpipeline_fu_109_hist0_1_d0),
    .hist0_1_q0(32'd0),
    .hist0_1_we0(grp_ISPpipeline_fu_109_hist0_1_we0),
    .hist0_1_address1(grp_ISPpipeline_fu_109_hist0_1_address1),
    .hist0_1_ce1(grp_ISPpipeline_fu_109_hist0_1_ce1),
    .hist0_1_d1(grp_ISPpipeline_fu_109_hist0_1_d1),
    .hist0_1_q1(32'd0),
    .hist0_1_we1(grp_ISPpipeline_fu_109_hist0_1_we1),
    .hist0_2_address0(grp_ISPpipeline_fu_109_hist0_2_address0),
    .hist0_2_ce0(grp_ISPpipeline_fu_109_hist0_2_ce0),
    .hist0_2_d0(grp_ISPpipeline_fu_109_hist0_2_d0),
    .hist0_2_q0(32'd0),
    .hist0_2_we0(grp_ISPpipeline_fu_109_hist0_2_we0),
    .hist0_2_address1(grp_ISPpipeline_fu_109_hist0_2_address1),
    .hist0_2_ce1(grp_ISPpipeline_fu_109_hist0_2_ce1),
    .hist0_2_d1(grp_ISPpipeline_fu_109_hist0_2_d1),
    .hist0_2_q1(32'd0),
    .hist0_2_we1(grp_ISPpipeline_fu_109_hist0_2_we1),
    .hist1_0_address0(grp_ISPpipeline_fu_109_hist1_0_address0),
    .hist1_0_ce0(grp_ISPpipeline_fu_109_hist1_0_ce0),
    .hist1_0_d0(grp_ISPpipeline_fu_109_hist1_0_d0),
    .hist1_0_q0(grp_ISPpipeline_fu_109_hist1_0_q0),
    .hist1_0_we0(grp_ISPpipeline_fu_109_hist1_0_we0),
    .hist1_0_address1(grp_ISPpipeline_fu_109_hist1_0_address1),
    .hist1_0_ce1(grp_ISPpipeline_fu_109_hist1_0_ce1),
    .hist1_0_d1(grp_ISPpipeline_fu_109_hist1_0_d1),
    .hist1_0_q1(32'd0),
    .hist1_0_we1(grp_ISPpipeline_fu_109_hist1_0_we1),
    .hist1_1_address0(grp_ISPpipeline_fu_109_hist1_1_address0),
    .hist1_1_ce0(grp_ISPpipeline_fu_109_hist1_1_ce0),
    .hist1_1_d0(grp_ISPpipeline_fu_109_hist1_1_d0),
    .hist1_1_q0(grp_ISPpipeline_fu_109_hist1_1_q0),
    .hist1_1_we0(grp_ISPpipeline_fu_109_hist1_1_we0),
    .hist1_1_address1(grp_ISPpipeline_fu_109_hist1_1_address1),
    .hist1_1_ce1(grp_ISPpipeline_fu_109_hist1_1_ce1),
    .hist1_1_d1(grp_ISPpipeline_fu_109_hist1_1_d1),
    .hist1_1_q1(32'd0),
    .hist1_1_we1(grp_ISPpipeline_fu_109_hist1_1_we1),
    .hist1_2_address0(grp_ISPpipeline_fu_109_hist1_2_address0),
    .hist1_2_ce0(grp_ISPpipeline_fu_109_hist1_2_ce0),
    .hist1_2_d0(grp_ISPpipeline_fu_109_hist1_2_d0),
    .hist1_2_q0(grp_ISPpipeline_fu_109_hist1_2_q0),
    .hist1_2_we0(grp_ISPpipeline_fu_109_hist1_2_we0),
    .hist1_2_address1(grp_ISPpipeline_fu_109_hist1_2_address1),
    .hist1_2_ce1(grp_ISPpipeline_fu_109_hist1_2_ce1),
    .hist1_2_d1(grp_ISPpipeline_fu_109_hist1_2_d1),
    .hist1_2_q1(32'd0),
    .hist1_2_we1(grp_ISPpipeline_fu_109_hist1_2_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .height_ap_vld(1'b1),
    .width_ap_vld(1'b1),
    .ap_start(grp_ISPpipeline_fu_109_ap_start),
    .s_axis_video_TVALID(s_axis_video_TVALID_int),
    .s_axis_video_TREADY(grp_ISPpipeline_fu_109_s_axis_video_TREADY),
    .ap_done(grp_ISPpipeline_fu_109_ap_done),
    .m_axis_video_TVALID(grp_ISPpipeline_fu_109_m_axis_video_TVALID),
    .m_axis_video_TREADY(grp_ISPpipeline_fu_109_m_axis_video_TREADY),
    .ap_ready(grp_ISPpipeline_fu_109_ap_ready),
    .ap_idle(grp_ISPpipeline_fu_109_ap_idle),
    .ap_continue(grp_ISPpipeline_fu_109_ap_continue)
);

regslice_both #(
    .DataWidth( 40 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 5 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 96 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TDATA),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 12 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TKEEP),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 12 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TSTRB),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TUSER),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TLAST),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TID),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_ISPpipeline_fu_109_m_axis_video_TDEST),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_ISPpipeline_fu_109_ap_done <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_sync_reg_grp_ISPpipeline_fu_109_ap_done <= 1'b0;
        end else if ((grp_ISPpipeline_fu_109_ap_done == 1'b1)) begin
            ap_sync_reg_grp_ISPpipeline_fu_109_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready <= 1'b0;
        end else if ((grp_ISPpipeline_fu_109_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_ISPpipeline_fu_109_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_ISPpipeline_fu_109_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state3)) | ((ap_sync_grp_ISPpipeline_fu_109_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((flag_load_load_fu_163_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((flag_load_load_fu_163_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_ISPpipeline_fu_109_ap_start_reg <= 1'b1;
        end else if ((grp_ISPpipeline_fu_109_ap_ready == 1'b1)) begin
            grp_ISPpipeline_fu_109_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        storemerge_reg_96 <= 1'd0;
    end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        storemerge_reg_96 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        flag <= storemerge_reg_96;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        height_read_reg_173 <= height;
        width_read_reg_178 <= width;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_ISPpipeline_fu_109_ap_continue = 1'b1;
    end else begin
        grp_ISPpipeline_fu_109_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_ISPpipeline_fu_109_hist1_0_q0 = hist0_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_ISPpipeline_fu_109_hist1_0_q0 = hist1_0_q0;
    end else begin
        grp_ISPpipeline_fu_109_hist1_0_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_ISPpipeline_fu_109_hist1_1_q0 = hist0_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_ISPpipeline_fu_109_hist1_1_q0 = hist1_1_q0;
    end else begin
        grp_ISPpipeline_fu_109_hist1_1_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_ISPpipeline_fu_109_hist1_2_q0 = hist0_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_ISPpipeline_fu_109_hist1_2_q0 = hist1_2_q0;
    end else begin
        grp_ISPpipeline_fu_109_hist1_2_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_0_address0 = grp_ISPpipeline_fu_109_hist1_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_0_address0 = grp_ISPpipeline_fu_109_hist0_0_address0;
    end else begin
        hist0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_0_ce0 = grp_ISPpipeline_fu_109_hist1_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_0_ce0 = grp_ISPpipeline_fu_109_hist0_0_ce0;
    end else begin
        hist0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_0_we0 = grp_ISPpipeline_fu_109_hist0_0_we0;
    end else begin
        hist0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_1_address0 = grp_ISPpipeline_fu_109_hist1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_1_address0 = grp_ISPpipeline_fu_109_hist0_1_address0;
    end else begin
        hist0_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_1_ce0 = grp_ISPpipeline_fu_109_hist1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_1_ce0 = grp_ISPpipeline_fu_109_hist0_1_ce0;
    end else begin
        hist0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_1_we0 = grp_ISPpipeline_fu_109_hist0_1_we0;
    end else begin
        hist0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_2_address0 = grp_ISPpipeline_fu_109_hist1_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_2_address0 = grp_ISPpipeline_fu_109_hist0_2_address0;
    end else begin
        hist0_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist0_2_ce0 = grp_ISPpipeline_fu_109_hist1_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_2_ce0 = grp_ISPpipeline_fu_109_hist0_2_ce0;
    end else begin
        hist0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist0_2_we0 = grp_ISPpipeline_fu_109_hist0_2_we0;
    end else begin
        hist0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_0_address0 = grp_ISPpipeline_fu_109_hist1_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_0_address0 = grp_ISPpipeline_fu_109_hist0_0_address0;
    end else begin
        hist1_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_0_ce0 = grp_ISPpipeline_fu_109_hist1_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_0_ce0 = grp_ISPpipeline_fu_109_hist0_0_ce0;
    end else begin
        hist1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_0_we0 = grp_ISPpipeline_fu_109_hist0_0_we0;
    end else begin
        hist1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_1_address0 = grp_ISPpipeline_fu_109_hist1_1_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_1_address0 = grp_ISPpipeline_fu_109_hist0_1_address0;
    end else begin
        hist1_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_1_ce0 = grp_ISPpipeline_fu_109_hist1_1_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_1_ce0 = grp_ISPpipeline_fu_109_hist0_1_ce0;
    end else begin
        hist1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_1_we0 = grp_ISPpipeline_fu_109_hist0_1_we0;
    end else begin
        hist1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_2_address0 = grp_ISPpipeline_fu_109_hist1_2_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_2_address0 = grp_ISPpipeline_fu_109_hist0_2_address0;
    end else begin
        hist1_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hist1_2_ce0 = grp_ISPpipeline_fu_109_hist1_2_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_2_ce0 = grp_ISPpipeline_fu_109_hist0_2_ce0;
    end else begin
        hist1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hist1_2_we0 = grp_ISPpipeline_fu_109_hist0_2_we0;
    end else begin
        hist1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        m_axis_video_TVALID_int = grp_ISPpipeline_fu_109_m_axis_video_TVALID;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        s_axis_video_TREADY_int = grp_ISPpipeline_fu_109_s_axis_video_TREADY;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((flag_load_load_fu_163_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((flag_load_load_fu_163_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_ISPpipeline_fu_109_ap_ready & ap_sync_grp_ISPpipeline_fu_109_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((ap_sync_grp_ISPpipeline_fu_109_ap_ready & ap_sync_grp_ISPpipeline_fu_109_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_ISPpipeline_fu_109_ap_done = (grp_ISPpipeline_fu_109_ap_done | ap_sync_reg_grp_ISPpipeline_fu_109_ap_done);

assign ap_sync_grp_ISPpipeline_fu_109_ap_ready = (grp_ISPpipeline_fu_109_ap_ready | ap_sync_reg_grp_ISPpipeline_fu_109_ap_ready);

assign flag_load_load_fu_163_p1 = flag;

assign grp_ISPpipeline_fu_109_ap_start = grp_ISPpipeline_fu_109_ap_start_reg;

assign grp_ISPpipeline_fu_109_m_axis_video_TREADY = ((m_axis_video_TREADY_int & ap_CS_fsm_state3) | (m_axis_video_TREADY_int & ap_CS_fsm_state2));

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

endmodule //ISPPipeline_accel
