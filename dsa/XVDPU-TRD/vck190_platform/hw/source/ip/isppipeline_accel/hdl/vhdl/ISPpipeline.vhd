-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ISPpipeline is
port (
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (4 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (4 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    hist0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_0_ce0 : OUT STD_LOGIC;
    hist0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_0_we0 : OUT STD_LOGIC;
    hist0_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_0_ce1 : OUT STD_LOGIC;
    hist0_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_0_we1 : OUT STD_LOGIC;
    hist0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_1_ce0 : OUT STD_LOGIC;
    hist0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_1_we0 : OUT STD_LOGIC;
    hist0_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_1_ce1 : OUT STD_LOGIC;
    hist0_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_1_we1 : OUT STD_LOGIC;
    hist0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_2_ce0 : OUT STD_LOGIC;
    hist0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_2_we0 : OUT STD_LOGIC;
    hist0_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist0_2_ce1 : OUT STD_LOGIC;
    hist0_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist0_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist0_2_we1 : OUT STD_LOGIC;
    hist1_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_0_ce0 : OUT STD_LOGIC;
    hist1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_0_we0 : OUT STD_LOGIC;
    hist1_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_0_ce1 : OUT STD_LOGIC;
    hist1_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_0_we1 : OUT STD_LOGIC;
    hist1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_1_ce0 : OUT STD_LOGIC;
    hist1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_1_we0 : OUT STD_LOGIC;
    hist1_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_1_ce1 : OUT STD_LOGIC;
    hist1_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_1_we1 : OUT STD_LOGIC;
    hist1_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_2_ce0 : OUT STD_LOGIC;
    hist1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_2_we0 : OUT STD_LOGIC;
    hist1_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    hist1_2_ce1 : OUT STD_LOGIC;
    hist1_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    hist1_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    hist1_2_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    height_ap_vld : IN STD_LOGIC;
    width_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of ISPpipeline is 
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ISPpipeline_Block_Ma_U0_ap_start : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_start_full_n : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ap_done : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ap_continue : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ap_idle : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ap_ready : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_start_out : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_start_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_imgInput1_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_imgInput1_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_imgInput1_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_imgInput1_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_imgInput2_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_imgInput2_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_imgInput2_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_imgInput2_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_bpc_out_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_bpc_out_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_bpc_out_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_bpc_out_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_gain_out_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_gain_out_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_gain_out_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_gain_out_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ltm_in_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_ltm_in_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ltm_in_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_ltm_in_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_lsc_out_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_lsc_out_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_lsc_out_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_lsc_out_cols_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_aecin_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_aecin_rows_out_write : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_aecin_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal ISPpipeline_Block_Ma_U0_aecin_cols_out_write : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_start : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_done : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_continue : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_idle : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_ready : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_start_out : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_start_write : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_s_axis_video_TREADY : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_bayer_mat_rows_read : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_bayer_mat_cols_read : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_bayer_mat_data_V_V_din : STD_LOGIC_VECTOR (39 downto 0);
    signal AXIVideo2BayerMat_U0_bayer_mat_data_V_V_write : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_bayer_mat_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AXIVideo2BayerMat_U0_bayer_mat_rows_out_write : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_bayer_mat_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AXIVideo2BayerMat_U0_bayer_mat_cols_out_write : STD_LOGIC;
    signal blackLevelCorrection_U0_ap_start : STD_LOGIC;
    signal blackLevelCorrection_U0_ap_done : STD_LOGIC;
    signal blackLevelCorrection_U0_ap_continue : STD_LOGIC;
    signal blackLevelCorrection_U0_ap_idle : STD_LOGIC;
    signal blackLevelCorrection_U0_ap_ready : STD_LOGIC;
    signal blackLevelCorrection_U0_p_Src_rows_read : STD_LOGIC;
    signal blackLevelCorrection_U0_p_Src_cols_read : STD_LOGIC;
    signal blackLevelCorrection_U0_p_Src_data_V_V_read : STD_LOGIC;
    signal blackLevelCorrection_U0_p_Dst_data_V_V_din : STD_LOGIC_VECTOR (39 downto 0);
    signal blackLevelCorrection_U0_p_Dst_data_V_V_write : STD_LOGIC;
    signal badpixelcorrection_U0_ap_start : STD_LOGIC;
    signal badpixelcorrection_U0_ap_done : STD_LOGIC;
    signal badpixelcorrection_U0_ap_continue : STD_LOGIC;
    signal badpixelcorrection_U0_ap_idle : STD_LOGIC;
    signal badpixelcorrection_U0_ap_ready : STD_LOGIC;
    signal badpixelcorrection_U0_p_src_rows_read : STD_LOGIC;
    signal badpixelcorrection_U0_p_src_cols_read : STD_LOGIC;
    signal badpixelcorrection_U0_p_src_data_V_V_read : STD_LOGIC;
    signal badpixelcorrection_U0_p_dst_data_V_V_din : STD_LOGIC_VECTOR (39 downto 0);
    signal badpixelcorrection_U0_p_dst_data_V_V_write : STD_LOGIC;
    signal gaincontrol_U0_ap_start : STD_LOGIC;
    signal gaincontrol_U0_ap_done : STD_LOGIC;
    signal gaincontrol_U0_ap_continue : STD_LOGIC;
    signal gaincontrol_U0_ap_idle : STD_LOGIC;
    signal gaincontrol_U0_ap_ready : STD_LOGIC;
    signal gaincontrol_U0_src1_rows_read : STD_LOGIC;
    signal gaincontrol_U0_src1_cols_read : STD_LOGIC;
    signal gaincontrol_U0_src1_data_V_V_read : STD_LOGIC;
    signal gaincontrol_U0_dst_data_V_V_din : STD_LOGIC_VECTOR (39 downto 0);
    signal gaincontrol_U0_dst_data_V_V_write : STD_LOGIC;
    signal demosaicing_U0_ap_start : STD_LOGIC;
    signal demosaicing_U0_ap_done : STD_LOGIC;
    signal demosaicing_U0_ap_continue : STD_LOGIC;
    signal demosaicing_U0_ap_idle : STD_LOGIC;
    signal demosaicing_U0_ap_ready : STD_LOGIC;
    signal demosaicing_U0_src_mat_rows_read : STD_LOGIC;
    signal demosaicing_U0_src_mat_cols_read : STD_LOGIC;
    signal demosaicing_U0_src_mat_data_V_V_read : STD_LOGIC;
    signal demosaicing_U0_dst_mat_data_V_V_din : STD_LOGIC_VECTOR (119 downto 0);
    signal demosaicing_U0_dst_mat_data_V_V_write : STD_LOGIC;
    signal AWBhistogram_U0_ap_start : STD_LOGIC;
    signal AWBhistogram_U0_ap_done : STD_LOGIC;
    signal AWBhistogram_U0_ap_continue : STD_LOGIC;
    signal AWBhistogram_U0_ap_idle : STD_LOGIC;
    signal AWBhistogram_U0_ap_ready : STD_LOGIC;
    signal AWBhistogram_U0_src1_rows_read : STD_LOGIC;
    signal AWBhistogram_U0_src1_cols_read : STD_LOGIC;
    signal AWBhistogram_U0_src1_data_V_V_read : STD_LOGIC;
    signal AWBhistogram_U0_src2_data_V_V_din : STD_LOGIC_VECTOR (119 downto 0);
    signal AWBhistogram_U0_src2_data_V_V_write : STD_LOGIC;
    signal AWBhistogram_U0_histogram_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBhistogram_U0_histogram_0_ce0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_0_we0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AWBhistogram_U0_histogram_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBhistogram_U0_histogram_1_ce0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_1_we0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AWBhistogram_U0_histogram_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBhistogram_U0_histogram_2_ce0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_2_we0 : STD_LOGIC;
    signal AWBhistogram_U0_histogram_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal AWBNormalization_U0_ap_start : STD_LOGIC;
    signal AWBNormalization_U0_ap_done : STD_LOGIC;
    signal AWBNormalization_U0_ap_continue : STD_LOGIC;
    signal AWBNormalization_U0_ap_idle : STD_LOGIC;
    signal AWBNormalization_U0_ap_ready : STD_LOGIC;
    signal AWBNormalization_U0_start_out : STD_LOGIC;
    signal AWBNormalization_U0_start_write : STD_LOGIC;
    signal AWBNormalization_U0_src_data_V_V_read : STD_LOGIC;
    signal AWBNormalization_U0_dst_rows_read : STD_LOGIC;
    signal AWBNormalization_U0_dst_cols_read : STD_LOGIC;
    signal AWBNormalization_U0_dst_data_V_V_din : STD_LOGIC_VECTOR (119 downto 0);
    signal AWBNormalization_U0_dst_data_V_V_write : STD_LOGIC;
    signal AWBNormalization_U0_histogram_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBNormalization_U0_histogram_0_ce0 : STD_LOGIC;
    signal AWBNormalization_U0_histogram_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBNormalization_U0_histogram_1_ce0 : STD_LOGIC;
    signal AWBNormalization_U0_histogram_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AWBNormalization_U0_histogram_2_ce0 : STD_LOGIC;
    signal AWBNormalization_U0_dst_rows_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AWBNormalization_U0_dst_rows_out_write : STD_LOGIC;
    signal AWBNormalization_U0_dst_cols_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AWBNormalization_U0_dst_cols_out_write : STD_LOGIC;
    signal colorcorrectionmatri_U0_ap_start : STD_LOGIC;
    signal colorcorrectionmatri_U0_ap_done : STD_LOGIC;
    signal colorcorrectionmatri_U0_ap_continue : STD_LOGIC;
    signal colorcorrectionmatri_U0_ap_idle : STD_LOGIC;
    signal colorcorrectionmatri_U0_ap_ready : STD_LOGIC;
    signal colorcorrectionmatri_U0_p_src_mat_rows_read : STD_LOGIC;
    signal colorcorrectionmatri_U0_p_src_mat_cols_read : STD_LOGIC;
    signal colorcorrectionmatri_U0_p_src_mat_data_V_V_read : STD_LOGIC;
    signal colorcorrectionmatri_U0_p_dst_mat_data_V_V_din : STD_LOGIC_VECTOR (119 downto 0);
    signal colorcorrectionmatri_U0_p_dst_mat_data_V_V_write : STD_LOGIC;
    signal xf_QuatizationDither_U0_ap_start : STD_LOGIC;
    signal xf_QuatizationDither_U0_ap_done : STD_LOGIC;
    signal xf_QuatizationDither_U0_ap_continue : STD_LOGIC;
    signal xf_QuatizationDither_U0_ap_idle : STD_LOGIC;
    signal xf_QuatizationDither_U0_ap_ready : STD_LOGIC;
    signal xf_QuatizationDither_U0_stream_in_rows_read : STD_LOGIC;
    signal xf_QuatizationDither_U0_stream_in_cols_read : STD_LOGIC;
    signal xf_QuatizationDither_U0_stream_in_data_V_V_read : STD_LOGIC;
    signal xf_QuatizationDither_U0_stream_out_data_V_V_din : STD_LOGIC_VECTOR (95 downto 0);
    signal xf_QuatizationDither_U0_stream_out_data_V_V_write : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_color_mat_rows_read : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_color_mat_cols_read : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_color_mat_data_V_V_read : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (95 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (11 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (11 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal ColorMat2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput1_rows_c_full_n : STD_LOGIC;
    signal imgInput1_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput1_rows_c_empty_n : STD_LOGIC;
    signal imgInput1_cols_c_full_n : STD_LOGIC;
    signal imgInput1_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput1_cols_c_empty_n : STD_LOGIC;
    signal imgInput2_rows_c_full_n : STD_LOGIC;
    signal imgInput2_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput2_rows_c_empty_n : STD_LOGIC;
    signal imgInput2_cols_c_full_n : STD_LOGIC;
    signal imgInput2_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput2_cols_c_empty_n : STD_LOGIC;
    signal bpc_out_rows_c_full_n : STD_LOGIC;
    signal bpc_out_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bpc_out_rows_c_empty_n : STD_LOGIC;
    signal bpc_out_cols_c_full_n : STD_LOGIC;
    signal bpc_out_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bpc_out_cols_c_empty_n : STD_LOGIC;
    signal gain_out_rows_c_full_n : STD_LOGIC;
    signal gain_out_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal gain_out_rows_c_empty_n : STD_LOGIC;
    signal gain_out_cols_c_full_n : STD_LOGIC;
    signal gain_out_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal gain_out_cols_c_empty_n : STD_LOGIC;
    signal demosaic_out_rows_c_full_n : STD_LOGIC;
    signal demosaic_out_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal demosaic_out_rows_c_empty_n : STD_LOGIC;
    signal demosaic_out_cols_c_full_n : STD_LOGIC;
    signal demosaic_out_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal demosaic_out_cols_c_empty_n : STD_LOGIC;
    signal ltm_in_rows_c_full_n : STD_LOGIC;
    signal ltm_in_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ltm_in_rows_c_empty_n : STD_LOGIC;
    signal ltm_in_cols_c_full_n : STD_LOGIC;
    signal ltm_in_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ltm_in_cols_c_empty_n : STD_LOGIC;
    signal lsc_out_rows_c_full_n : STD_LOGIC;
    signal lsc_out_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal lsc_out_rows_c_empty_n : STD_LOGIC;
    signal lsc_out_cols_c_full_n : STD_LOGIC;
    signal lsc_out_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal lsc_out_cols_c_empty_n : STD_LOGIC;
    signal aecin_rows_c_full_n : STD_LOGIC;
    signal aecin_rows_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal aecin_rows_c_empty_n : STD_LOGIC;
    signal aecin_cols_c_full_n : STD_LOGIC;
    signal aecin_cols_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal aecin_cols_c_empty_n : STD_LOGIC;
    signal imgInput1_data_V_V_full_n : STD_LOGIC;
    signal imgInput1_data_V_V_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal imgInput1_data_V_V_empty_n : STD_LOGIC;
    signal imgInput1_rows_c41_full_n : STD_LOGIC;
    signal imgInput1_rows_c41_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput1_rows_c41_empty_n : STD_LOGIC;
    signal imgInput1_cols_c42_full_n : STD_LOGIC;
    signal imgInput1_cols_c42_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal imgInput1_cols_c42_empty_n : STD_LOGIC;
    signal imgInput2_data_V_V_full_n : STD_LOGIC;
    signal imgInput2_data_V_V_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal imgInput2_data_V_V_empty_n : STD_LOGIC;
    signal bpc_out_data_V_V_full_n : STD_LOGIC;
    signal bpc_out_data_V_V_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal bpc_out_data_V_V_empty_n : STD_LOGIC;
    signal gain_out_data_V_V_full_n : STD_LOGIC;
    signal gain_out_data_V_V_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal gain_out_data_V_V_empty_n : STD_LOGIC;
    signal demosaic_out_data_V_s_full_n : STD_LOGIC;
    signal demosaic_out_data_V_s_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal demosaic_out_data_V_s_empty_n : STD_LOGIC;
    signal impop_data_V_V_full_n : STD_LOGIC;
    signal impop_data_V_V_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal impop_data_V_V_empty_n : STD_LOGIC;
    signal ltm_in_data_V_V_full_n : STD_LOGIC;
    signal ltm_in_data_V_V_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal ltm_in_data_V_V_empty_n : STD_LOGIC;
    signal ltm_in_rows_c43_full_n : STD_LOGIC;
    signal ltm_in_rows_c43_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ltm_in_rows_c43_empty_n : STD_LOGIC;
    signal ltm_in_cols_c44_full_n : STD_LOGIC;
    signal ltm_in_cols_c44_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal ltm_in_cols_c44_empty_n : STD_LOGIC;
    signal lsc_out_data_V_V_full_n : STD_LOGIC;
    signal lsc_out_data_V_V_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal lsc_out_data_V_V_empty_n : STD_LOGIC;
    signal aecin_data_V_V_full_n : STD_LOGIC;
    signal aecin_data_V_V_dout : STD_LOGIC_VECTOR (95 downto 0);
    signal aecin_data_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_ISPpipeline_Block_Ma_U0_ap_ready : STD_LOGIC;
    signal ISPpipeline_Block_Ma_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIVideo2BayerMat_U0_ap_ready : STD_LOGIC;
    signal AXIVideo2BayerMat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AWBNormalization_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AWBNormalization_U0_ap_ready : STD_LOGIC;
    signal AWBNormalization_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_badpixelcorrection_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_badpixelcorrection_U0_full_n : STD_LOGIC;
    signal start_for_badpixelcorrection_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_badpixelcorrection_U0_empty_n : STD_LOGIC;
    signal start_for_gaincontrol_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gaincontrol_U0_full_n : STD_LOGIC;
    signal start_for_gaincontrol_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gaincontrol_U0_empty_n : STD_LOGIC;
    signal start_for_demosaicing_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_demosaicing_U0_full_n : STD_LOGIC;
    signal start_for_demosaicing_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_demosaicing_U0_empty_n : STD_LOGIC;
    signal start_for_AWBhistogram_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AWBhistogram_U0_full_n : STD_LOGIC;
    signal start_for_AWBhistogram_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AWBhistogram_U0_empty_n : STD_LOGIC;
    signal start_for_xf_QuatizationDither_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xf_QuatizationDither_U0_full_n : STD_LOGIC;
    signal start_for_xf_QuatizationDither_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_xf_QuatizationDither_U0_empty_n : STD_LOGIC;
    signal start_for_ColorMat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ColorMat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_ColorMat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ColorMat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal start_for_blackLevelCorrection_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_blackLevelCorrection_U0_full_n : STD_LOGIC;
    signal start_for_blackLevelCorrection_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_blackLevelCorrection_U0_empty_n : STD_LOGIC;
    signal blackLevelCorrection_U0_start_full_n : STD_LOGIC;
    signal blackLevelCorrection_U0_start_write : STD_LOGIC;
    signal badpixelcorrection_U0_start_full_n : STD_LOGIC;
    signal badpixelcorrection_U0_start_write : STD_LOGIC;
    signal gaincontrol_U0_start_full_n : STD_LOGIC;
    signal gaincontrol_U0_start_write : STD_LOGIC;
    signal demosaicing_U0_start_full_n : STD_LOGIC;
    signal demosaicing_U0_start_write : STD_LOGIC;
    signal AWBhistogram_U0_start_full_n : STD_LOGIC;
    signal AWBhistogram_U0_start_write : STD_LOGIC;
    signal start_for_colorcorrectionmatri_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_colorcorrectionmatri_U0_full_n : STD_LOGIC;
    signal start_for_colorcorrectionmatri_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_colorcorrectionmatri_U0_empty_n : STD_LOGIC;
    signal colorcorrectionmatri_U0_start_full_n : STD_LOGIC;
    signal colorcorrectionmatri_U0_start_write : STD_LOGIC;
    signal xf_QuatizationDither_U0_start_full_n : STD_LOGIC;
    signal xf_QuatizationDither_U0_start_write : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal ColorMat2AXIvideo_U0_start_write : STD_LOGIC;

    component ISPpipeline_Block_Ma IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        imgInput1_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgInput1_rows_out_full_n : IN STD_LOGIC;
        imgInput1_rows_out_write : OUT STD_LOGIC;
        imgInput1_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgInput1_cols_out_full_n : IN STD_LOGIC;
        imgInput1_cols_out_write : OUT STD_LOGIC;
        imgInput2_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgInput2_rows_out_full_n : IN STD_LOGIC;
        imgInput2_rows_out_write : OUT STD_LOGIC;
        imgInput2_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        imgInput2_cols_out_full_n : IN STD_LOGIC;
        imgInput2_cols_out_write : OUT STD_LOGIC;
        bpc_out_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bpc_out_rows_out_full_n : IN STD_LOGIC;
        bpc_out_rows_out_write : OUT STD_LOGIC;
        bpc_out_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bpc_out_cols_out_full_n : IN STD_LOGIC;
        bpc_out_cols_out_write : OUT STD_LOGIC;
        gain_out_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gain_out_rows_out_full_n : IN STD_LOGIC;
        gain_out_rows_out_write : OUT STD_LOGIC;
        gain_out_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gain_out_cols_out_full_n : IN STD_LOGIC;
        gain_out_cols_out_write : OUT STD_LOGIC;
        demosaic_out_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        demosaic_out_rows_out_full_n : IN STD_LOGIC;
        demosaic_out_rows_out_write : OUT STD_LOGIC;
        demosaic_out_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        demosaic_out_cols_out_full_n : IN STD_LOGIC;
        demosaic_out_cols_out_write : OUT STD_LOGIC;
        ltm_in_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ltm_in_rows_out_full_n : IN STD_LOGIC;
        ltm_in_rows_out_write : OUT STD_LOGIC;
        ltm_in_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        ltm_in_cols_out_full_n : IN STD_LOGIC;
        ltm_in_cols_out_write : OUT STD_LOGIC;
        lsc_out_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsc_out_rows_out_full_n : IN STD_LOGIC;
        lsc_out_rows_out_write : OUT STD_LOGIC;
        lsc_out_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsc_out_cols_out_full_n : IN STD_LOGIC;
        lsc_out_cols_out_write : OUT STD_LOGIC;
        aecin_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        aecin_rows_out_full_n : IN STD_LOGIC;
        aecin_rows_out_write : OUT STD_LOGIC;
        aecin_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        aecin_cols_out_full_n : IN STD_LOGIC;
        aecin_cols_out_write : OUT STD_LOGIC );
    end component;


    component AXIVideo2BayerMat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (4 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (4 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        bayer_mat_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bayer_mat_rows_empty_n : IN STD_LOGIC;
        bayer_mat_rows_read : OUT STD_LOGIC;
        bayer_mat_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bayer_mat_cols_empty_n : IN STD_LOGIC;
        bayer_mat_cols_read : OUT STD_LOGIC;
        bayer_mat_data_V_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        bayer_mat_data_V_V_full_n : IN STD_LOGIC;
        bayer_mat_data_V_V_write : OUT STD_LOGIC;
        bayer_mat_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bayer_mat_rows_out_full_n : IN STD_LOGIC;
        bayer_mat_rows_out_write : OUT STD_LOGIC;
        bayer_mat_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bayer_mat_cols_out_full_n : IN STD_LOGIC;
        bayer_mat_cols_out_write : OUT STD_LOGIC );
    end component;


    component blackLevelCorrection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_Src_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_Src_rows_empty_n : IN STD_LOGIC;
        p_Src_rows_read : OUT STD_LOGIC;
        p_Src_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_Src_cols_empty_n : IN STD_LOGIC;
        p_Src_cols_read : OUT STD_LOGIC;
        p_Src_data_V_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        p_Src_data_V_V_empty_n : IN STD_LOGIC;
        p_Src_data_V_V_read : OUT STD_LOGIC;
        p_Dst_data_V_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        p_Dst_data_V_V_full_n : IN STD_LOGIC;
        p_Dst_data_V_V_write : OUT STD_LOGIC );
    end component;


    component badpixelcorrection IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_rows_empty_n : IN STD_LOGIC;
        p_src_rows_read : OUT STD_LOGIC;
        p_src_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_cols_empty_n : IN STD_LOGIC;
        p_src_cols_read : OUT STD_LOGIC;
        p_src_data_V_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        p_src_data_V_V_empty_n : IN STD_LOGIC;
        p_src_data_V_V_read : OUT STD_LOGIC;
        p_dst_data_V_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        p_dst_data_V_V_full_n : IN STD_LOGIC;
        p_dst_data_V_V_write : OUT STD_LOGIC );
    end component;


    component gaincontrol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src1_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_rows_empty_n : IN STD_LOGIC;
        src1_rows_read : OUT STD_LOGIC;
        src1_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_cols_empty_n : IN STD_LOGIC;
        src1_cols_read : OUT STD_LOGIC;
        src1_data_V_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        src1_data_V_V_empty_n : IN STD_LOGIC;
        src1_data_V_V_read : OUT STD_LOGIC;
        dst_data_V_V_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        dst_data_V_V_full_n : IN STD_LOGIC;
        dst_data_V_V_write : OUT STD_LOGIC );
    end component;


    component demosaicing IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_mat_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_mat_rows_empty_n : IN STD_LOGIC;
        src_mat_rows_read : OUT STD_LOGIC;
        src_mat_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_mat_cols_empty_n : IN STD_LOGIC;
        src_mat_cols_read : OUT STD_LOGIC;
        src_mat_data_V_V_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        src_mat_data_V_V_empty_n : IN STD_LOGIC;
        src_mat_data_V_V_read : OUT STD_LOGIC;
        dst_mat_data_V_V_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        dst_mat_data_V_V_full_n : IN STD_LOGIC;
        dst_mat_data_V_V_write : OUT STD_LOGIC );
    end component;


    component AWBhistogram IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src1_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_rows_empty_n : IN STD_LOGIC;
        src1_rows_read : OUT STD_LOGIC;
        src1_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src1_cols_empty_n : IN STD_LOGIC;
        src1_cols_read : OUT STD_LOGIC;
        src1_data_V_V_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        src1_data_V_V_empty_n : IN STD_LOGIC;
        src1_data_V_V_read : OUT STD_LOGIC;
        src2_data_V_V_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        src2_data_V_V_full_n : IN STD_LOGIC;
        src2_data_V_V_write : OUT STD_LOGIC;
        histogram_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_0_ce0 : OUT STD_LOGIC;
        histogram_0_we0 : OUT STD_LOGIC;
        histogram_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        histogram_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_1_ce0 : OUT STD_LOGIC;
        histogram_1_we0 : OUT STD_LOGIC;
        histogram_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        histogram_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_2_ce0 : OUT STD_LOGIC;
        histogram_2_we0 : OUT STD_LOGIC;
        histogram_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AWBNormalization IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_data_V_V_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        src_data_V_V_empty_n : IN STD_LOGIC;
        src_data_V_V_read : OUT STD_LOGIC;
        dst_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_empty_n : IN STD_LOGIC;
        dst_rows_read : OUT STD_LOGIC;
        dst_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_empty_n : IN STD_LOGIC;
        dst_cols_read : OUT STD_LOGIC;
        dst_data_V_V_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        dst_data_V_V_full_n : IN STD_LOGIC;
        dst_data_V_V_write : OUT STD_LOGIC;
        histogram_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_0_ce0 : OUT STD_LOGIC;
        histogram_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        histogram_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_1_ce0 : OUT STD_LOGIC;
        histogram_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        histogram_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        histogram_2_ce0 : OUT STD_LOGIC;
        histogram_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_rows_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_rows_out_full_n : IN STD_LOGIC;
        dst_rows_out_write : OUT STD_LOGIC;
        dst_cols_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_cols_out_full_n : IN STD_LOGIC;
        dst_cols_out_write : OUT STD_LOGIC );
    end component;


    component colorcorrectionmatri IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_mat_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_mat_rows_empty_n : IN STD_LOGIC;
        p_src_mat_rows_read : OUT STD_LOGIC;
        p_src_mat_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        p_src_mat_cols_empty_n : IN STD_LOGIC;
        p_src_mat_cols_read : OUT STD_LOGIC;
        p_src_mat_data_V_V_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        p_src_mat_data_V_V_empty_n : IN STD_LOGIC;
        p_src_mat_data_V_V_read : OUT STD_LOGIC;
        p_dst_mat_data_V_V_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        p_dst_mat_data_V_V_full_n : IN STD_LOGIC;
        p_dst_mat_data_V_V_write : OUT STD_LOGIC );
    end component;


    component xf_QuatizationDither IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_rows_empty_n : IN STD_LOGIC;
        stream_in_rows_read : OUT STD_LOGIC;
        stream_in_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_cols_empty_n : IN STD_LOGIC;
        stream_in_cols_read : OUT STD_LOGIC;
        stream_in_data_V_V_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        stream_in_data_V_V_empty_n : IN STD_LOGIC;
        stream_in_data_V_V_read : OUT STD_LOGIC;
        stream_out_data_V_V_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        stream_out_data_V_V_full_n : IN STD_LOGIC;
        stream_out_data_V_V_write : OUT STD_LOGIC );
    end component;


    component ColorMat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        color_mat_rows_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        color_mat_rows_empty_n : IN STD_LOGIC;
        color_mat_rows_read : OUT STD_LOGIC;
        color_mat_cols_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        color_mat_cols_empty_n : IN STD_LOGIC;
        color_mat_cols_read : OUT STD_LOGIC;
        color_mat_data_V_V_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        color_mat_data_V_V_empty_n : IN STD_LOGIC;
        color_mat_data_V_V_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (95 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (11 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (11 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d11_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w40_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (39 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (39 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w120_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (119 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (119 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w120_d4096_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (119 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (119 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w96_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (95 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (95 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_badpixebek IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gainconbfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_demosaibgk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AWBhistbhl IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_xf_Quatbil IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ColorMabjl IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_blackLebkl IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_colorcobll IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ISPpipeline_Block_Ma_U0 : component ISPpipeline_Block_Ma
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ISPpipeline_Block_Ma_U0_ap_start,
        start_full_n => ISPpipeline_Block_Ma_U0_start_full_n,
        ap_done => ISPpipeline_Block_Ma_U0_ap_done,
        ap_continue => ISPpipeline_Block_Ma_U0_ap_continue,
        ap_idle => ISPpipeline_Block_Ma_U0_ap_idle,
        ap_ready => ISPpipeline_Block_Ma_U0_ap_ready,
        start_out => ISPpipeline_Block_Ma_U0_start_out,
        start_write => ISPpipeline_Block_Ma_U0_start_write,
        height => height,
        width => width,
        imgInput1_rows_out_din => ISPpipeline_Block_Ma_U0_imgInput1_rows_out_din,
        imgInput1_rows_out_full_n => imgInput1_rows_c_full_n,
        imgInput1_rows_out_write => ISPpipeline_Block_Ma_U0_imgInput1_rows_out_write,
        imgInput1_cols_out_din => ISPpipeline_Block_Ma_U0_imgInput1_cols_out_din,
        imgInput1_cols_out_full_n => imgInput1_cols_c_full_n,
        imgInput1_cols_out_write => ISPpipeline_Block_Ma_U0_imgInput1_cols_out_write,
        imgInput2_rows_out_din => ISPpipeline_Block_Ma_U0_imgInput2_rows_out_din,
        imgInput2_rows_out_full_n => imgInput2_rows_c_full_n,
        imgInput2_rows_out_write => ISPpipeline_Block_Ma_U0_imgInput2_rows_out_write,
        imgInput2_cols_out_din => ISPpipeline_Block_Ma_U0_imgInput2_cols_out_din,
        imgInput2_cols_out_full_n => imgInput2_cols_c_full_n,
        imgInput2_cols_out_write => ISPpipeline_Block_Ma_U0_imgInput2_cols_out_write,
        bpc_out_rows_out_din => ISPpipeline_Block_Ma_U0_bpc_out_rows_out_din,
        bpc_out_rows_out_full_n => bpc_out_rows_c_full_n,
        bpc_out_rows_out_write => ISPpipeline_Block_Ma_U0_bpc_out_rows_out_write,
        bpc_out_cols_out_din => ISPpipeline_Block_Ma_U0_bpc_out_cols_out_din,
        bpc_out_cols_out_full_n => bpc_out_cols_c_full_n,
        bpc_out_cols_out_write => ISPpipeline_Block_Ma_U0_bpc_out_cols_out_write,
        gain_out_rows_out_din => ISPpipeline_Block_Ma_U0_gain_out_rows_out_din,
        gain_out_rows_out_full_n => gain_out_rows_c_full_n,
        gain_out_rows_out_write => ISPpipeline_Block_Ma_U0_gain_out_rows_out_write,
        gain_out_cols_out_din => ISPpipeline_Block_Ma_U0_gain_out_cols_out_din,
        gain_out_cols_out_full_n => gain_out_cols_c_full_n,
        gain_out_cols_out_write => ISPpipeline_Block_Ma_U0_gain_out_cols_out_write,
        demosaic_out_rows_out_din => ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_din,
        demosaic_out_rows_out_full_n => demosaic_out_rows_c_full_n,
        demosaic_out_rows_out_write => ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_write,
        demosaic_out_cols_out_din => ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_din,
        demosaic_out_cols_out_full_n => demosaic_out_cols_c_full_n,
        demosaic_out_cols_out_write => ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_write,
        ltm_in_rows_out_din => ISPpipeline_Block_Ma_U0_ltm_in_rows_out_din,
        ltm_in_rows_out_full_n => ltm_in_rows_c_full_n,
        ltm_in_rows_out_write => ISPpipeline_Block_Ma_U0_ltm_in_rows_out_write,
        ltm_in_cols_out_din => ISPpipeline_Block_Ma_U0_ltm_in_cols_out_din,
        ltm_in_cols_out_full_n => ltm_in_cols_c_full_n,
        ltm_in_cols_out_write => ISPpipeline_Block_Ma_U0_ltm_in_cols_out_write,
        lsc_out_rows_out_din => ISPpipeline_Block_Ma_U0_lsc_out_rows_out_din,
        lsc_out_rows_out_full_n => lsc_out_rows_c_full_n,
        lsc_out_rows_out_write => ISPpipeline_Block_Ma_U0_lsc_out_rows_out_write,
        lsc_out_cols_out_din => ISPpipeline_Block_Ma_U0_lsc_out_cols_out_din,
        lsc_out_cols_out_full_n => lsc_out_cols_c_full_n,
        lsc_out_cols_out_write => ISPpipeline_Block_Ma_U0_lsc_out_cols_out_write,
        aecin_rows_out_din => ISPpipeline_Block_Ma_U0_aecin_rows_out_din,
        aecin_rows_out_full_n => aecin_rows_c_full_n,
        aecin_rows_out_write => ISPpipeline_Block_Ma_U0_aecin_rows_out_write,
        aecin_cols_out_din => ISPpipeline_Block_Ma_U0_aecin_cols_out_din,
        aecin_cols_out_full_n => aecin_cols_c_full_n,
        aecin_cols_out_write => ISPpipeline_Block_Ma_U0_aecin_cols_out_write);

    AXIVideo2BayerMat_U0 : component AXIVideo2BayerMat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AXIVideo2BayerMat_U0_ap_start,
        start_full_n => start_for_blackLevelCorrection_U0_full_n,
        ap_done => AXIVideo2BayerMat_U0_ap_done,
        ap_continue => AXIVideo2BayerMat_U0_ap_continue,
        ap_idle => AXIVideo2BayerMat_U0_ap_idle,
        ap_ready => AXIVideo2BayerMat_U0_ap_ready,
        start_out => AXIVideo2BayerMat_U0_start_out,
        start_write => AXIVideo2BayerMat_U0_start_write,
        s_axis_video_TDATA => s_axis_video_TDATA,
        s_axis_video_TVALID => s_axis_video_TVALID,
        s_axis_video_TREADY => AXIVideo2BayerMat_U0_s_axis_video_TREADY,
        s_axis_video_TKEEP => s_axis_video_TKEEP,
        s_axis_video_TSTRB => s_axis_video_TSTRB,
        s_axis_video_TUSER => s_axis_video_TUSER,
        s_axis_video_TLAST => s_axis_video_TLAST,
        s_axis_video_TID => s_axis_video_TID,
        s_axis_video_TDEST => s_axis_video_TDEST,
        bayer_mat_rows_dout => imgInput1_rows_c_dout,
        bayer_mat_rows_empty_n => imgInput1_rows_c_empty_n,
        bayer_mat_rows_read => AXIVideo2BayerMat_U0_bayer_mat_rows_read,
        bayer_mat_cols_dout => imgInput1_cols_c_dout,
        bayer_mat_cols_empty_n => imgInput1_cols_c_empty_n,
        bayer_mat_cols_read => AXIVideo2BayerMat_U0_bayer_mat_cols_read,
        bayer_mat_data_V_V_din => AXIVideo2BayerMat_U0_bayer_mat_data_V_V_din,
        bayer_mat_data_V_V_full_n => imgInput1_data_V_V_full_n,
        bayer_mat_data_V_V_write => AXIVideo2BayerMat_U0_bayer_mat_data_V_V_write,
        bayer_mat_rows_out_din => AXIVideo2BayerMat_U0_bayer_mat_rows_out_din,
        bayer_mat_rows_out_full_n => imgInput1_rows_c41_full_n,
        bayer_mat_rows_out_write => AXIVideo2BayerMat_U0_bayer_mat_rows_out_write,
        bayer_mat_cols_out_din => AXIVideo2BayerMat_U0_bayer_mat_cols_out_din,
        bayer_mat_cols_out_full_n => imgInput1_cols_c42_full_n,
        bayer_mat_cols_out_write => AXIVideo2BayerMat_U0_bayer_mat_cols_out_write);

    blackLevelCorrection_U0 : component blackLevelCorrection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blackLevelCorrection_U0_ap_start,
        ap_done => blackLevelCorrection_U0_ap_done,
        ap_continue => blackLevelCorrection_U0_ap_continue,
        ap_idle => blackLevelCorrection_U0_ap_idle,
        ap_ready => blackLevelCorrection_U0_ap_ready,
        p_Src_rows_dout => imgInput1_rows_c41_dout,
        p_Src_rows_empty_n => imgInput1_rows_c41_empty_n,
        p_Src_rows_read => blackLevelCorrection_U0_p_Src_rows_read,
        p_Src_cols_dout => imgInput1_cols_c42_dout,
        p_Src_cols_empty_n => imgInput1_cols_c42_empty_n,
        p_Src_cols_read => blackLevelCorrection_U0_p_Src_cols_read,
        p_Src_data_V_V_dout => imgInput1_data_V_V_dout,
        p_Src_data_V_V_empty_n => imgInput1_data_V_V_empty_n,
        p_Src_data_V_V_read => blackLevelCorrection_U0_p_Src_data_V_V_read,
        p_Dst_data_V_V_din => blackLevelCorrection_U0_p_Dst_data_V_V_din,
        p_Dst_data_V_V_full_n => imgInput2_data_V_V_full_n,
        p_Dst_data_V_V_write => blackLevelCorrection_U0_p_Dst_data_V_V_write);

    badpixelcorrection_U0 : component badpixelcorrection
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => badpixelcorrection_U0_ap_start,
        ap_done => badpixelcorrection_U0_ap_done,
        ap_continue => badpixelcorrection_U0_ap_continue,
        ap_idle => badpixelcorrection_U0_ap_idle,
        ap_ready => badpixelcorrection_U0_ap_ready,
        p_src_rows_dout => imgInput2_rows_c_dout,
        p_src_rows_empty_n => imgInput2_rows_c_empty_n,
        p_src_rows_read => badpixelcorrection_U0_p_src_rows_read,
        p_src_cols_dout => imgInput2_cols_c_dout,
        p_src_cols_empty_n => imgInput2_cols_c_empty_n,
        p_src_cols_read => badpixelcorrection_U0_p_src_cols_read,
        p_src_data_V_V_dout => imgInput2_data_V_V_dout,
        p_src_data_V_V_empty_n => imgInput2_data_V_V_empty_n,
        p_src_data_V_V_read => badpixelcorrection_U0_p_src_data_V_V_read,
        p_dst_data_V_V_din => badpixelcorrection_U0_p_dst_data_V_V_din,
        p_dst_data_V_V_full_n => bpc_out_data_V_V_full_n,
        p_dst_data_V_V_write => badpixelcorrection_U0_p_dst_data_V_V_write);

    gaincontrol_U0 : component gaincontrol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gaincontrol_U0_ap_start,
        ap_done => gaincontrol_U0_ap_done,
        ap_continue => gaincontrol_U0_ap_continue,
        ap_idle => gaincontrol_U0_ap_idle,
        ap_ready => gaincontrol_U0_ap_ready,
        src1_rows_dout => bpc_out_rows_c_dout,
        src1_rows_empty_n => bpc_out_rows_c_empty_n,
        src1_rows_read => gaincontrol_U0_src1_rows_read,
        src1_cols_dout => bpc_out_cols_c_dout,
        src1_cols_empty_n => bpc_out_cols_c_empty_n,
        src1_cols_read => gaincontrol_U0_src1_cols_read,
        src1_data_V_V_dout => bpc_out_data_V_V_dout,
        src1_data_V_V_empty_n => bpc_out_data_V_V_empty_n,
        src1_data_V_V_read => gaincontrol_U0_src1_data_V_V_read,
        dst_data_V_V_din => gaincontrol_U0_dst_data_V_V_din,
        dst_data_V_V_full_n => gain_out_data_V_V_full_n,
        dst_data_V_V_write => gaincontrol_U0_dst_data_V_V_write);

    demosaicing_U0 : component demosaicing
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => demosaicing_U0_ap_start,
        ap_done => demosaicing_U0_ap_done,
        ap_continue => demosaicing_U0_ap_continue,
        ap_idle => demosaicing_U0_ap_idle,
        ap_ready => demosaicing_U0_ap_ready,
        src_mat_rows_dout => gain_out_rows_c_dout,
        src_mat_rows_empty_n => gain_out_rows_c_empty_n,
        src_mat_rows_read => demosaicing_U0_src_mat_rows_read,
        src_mat_cols_dout => gain_out_cols_c_dout,
        src_mat_cols_empty_n => gain_out_cols_c_empty_n,
        src_mat_cols_read => demosaicing_U0_src_mat_cols_read,
        src_mat_data_V_V_dout => gain_out_data_V_V_dout,
        src_mat_data_V_V_empty_n => gain_out_data_V_V_empty_n,
        src_mat_data_V_V_read => demosaicing_U0_src_mat_data_V_V_read,
        dst_mat_data_V_V_din => demosaicing_U0_dst_mat_data_V_V_din,
        dst_mat_data_V_V_full_n => demosaic_out_data_V_s_full_n,
        dst_mat_data_V_V_write => demosaicing_U0_dst_mat_data_V_V_write);

    AWBhistogram_U0 : component AWBhistogram
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AWBhistogram_U0_ap_start,
        ap_done => AWBhistogram_U0_ap_done,
        ap_continue => AWBhistogram_U0_ap_continue,
        ap_idle => AWBhistogram_U0_ap_idle,
        ap_ready => AWBhistogram_U0_ap_ready,
        src1_rows_dout => demosaic_out_rows_c_dout,
        src1_rows_empty_n => demosaic_out_rows_c_empty_n,
        src1_rows_read => AWBhistogram_U0_src1_rows_read,
        src1_cols_dout => demosaic_out_cols_c_dout,
        src1_cols_empty_n => demosaic_out_cols_c_empty_n,
        src1_cols_read => AWBhistogram_U0_src1_cols_read,
        src1_data_V_V_dout => demosaic_out_data_V_s_dout,
        src1_data_V_V_empty_n => demosaic_out_data_V_s_empty_n,
        src1_data_V_V_read => AWBhistogram_U0_src1_data_V_V_read,
        src2_data_V_V_din => AWBhistogram_U0_src2_data_V_V_din,
        src2_data_V_V_full_n => impop_data_V_V_full_n,
        src2_data_V_V_write => AWBhistogram_U0_src2_data_V_V_write,
        histogram_0_address0 => AWBhistogram_U0_histogram_0_address0,
        histogram_0_ce0 => AWBhistogram_U0_histogram_0_ce0,
        histogram_0_we0 => AWBhistogram_U0_histogram_0_we0,
        histogram_0_d0 => AWBhistogram_U0_histogram_0_d0,
        histogram_1_address0 => AWBhistogram_U0_histogram_1_address0,
        histogram_1_ce0 => AWBhistogram_U0_histogram_1_ce0,
        histogram_1_we0 => AWBhistogram_U0_histogram_1_we0,
        histogram_1_d0 => AWBhistogram_U0_histogram_1_d0,
        histogram_2_address0 => AWBhistogram_U0_histogram_2_address0,
        histogram_2_ce0 => AWBhistogram_U0_histogram_2_ce0,
        histogram_2_we0 => AWBhistogram_U0_histogram_2_we0,
        histogram_2_d0 => AWBhistogram_U0_histogram_2_d0);

    AWBNormalization_U0 : component AWBNormalization
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AWBNormalization_U0_ap_start,
        start_full_n => start_for_colorcorrectionmatri_U0_full_n,
        ap_done => AWBNormalization_U0_ap_done,
        ap_continue => AWBNormalization_U0_ap_continue,
        ap_idle => AWBNormalization_U0_ap_idle,
        ap_ready => AWBNormalization_U0_ap_ready,
        start_out => AWBNormalization_U0_start_out,
        start_write => AWBNormalization_U0_start_write,
        src_data_V_V_dout => impop_data_V_V_dout,
        src_data_V_V_empty_n => impop_data_V_V_empty_n,
        src_data_V_V_read => AWBNormalization_U0_src_data_V_V_read,
        dst_rows_dout => ltm_in_rows_c_dout,
        dst_rows_empty_n => ltm_in_rows_c_empty_n,
        dst_rows_read => AWBNormalization_U0_dst_rows_read,
        dst_cols_dout => ltm_in_cols_c_dout,
        dst_cols_empty_n => ltm_in_cols_c_empty_n,
        dst_cols_read => AWBNormalization_U0_dst_cols_read,
        dst_data_V_V_din => AWBNormalization_U0_dst_data_V_V_din,
        dst_data_V_V_full_n => ltm_in_data_V_V_full_n,
        dst_data_V_V_write => AWBNormalization_U0_dst_data_V_V_write,
        histogram_0_address0 => AWBNormalization_U0_histogram_0_address0,
        histogram_0_ce0 => AWBNormalization_U0_histogram_0_ce0,
        histogram_0_q0 => hist1_0_q0,
        histogram_1_address0 => AWBNormalization_U0_histogram_1_address0,
        histogram_1_ce0 => AWBNormalization_U0_histogram_1_ce0,
        histogram_1_q0 => hist1_1_q0,
        histogram_2_address0 => AWBNormalization_U0_histogram_2_address0,
        histogram_2_ce0 => AWBNormalization_U0_histogram_2_ce0,
        histogram_2_q0 => hist1_2_q0,
        dst_rows_out_din => AWBNormalization_U0_dst_rows_out_din,
        dst_rows_out_full_n => ltm_in_rows_c43_full_n,
        dst_rows_out_write => AWBNormalization_U0_dst_rows_out_write,
        dst_cols_out_din => AWBNormalization_U0_dst_cols_out_din,
        dst_cols_out_full_n => ltm_in_cols_c44_full_n,
        dst_cols_out_write => AWBNormalization_U0_dst_cols_out_write);

    colorcorrectionmatri_U0 : component colorcorrectionmatri
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => colorcorrectionmatri_U0_ap_start,
        ap_done => colorcorrectionmatri_U0_ap_done,
        ap_continue => colorcorrectionmatri_U0_ap_continue,
        ap_idle => colorcorrectionmatri_U0_ap_idle,
        ap_ready => colorcorrectionmatri_U0_ap_ready,
        p_src_mat_rows_dout => ltm_in_rows_c43_dout,
        p_src_mat_rows_empty_n => ltm_in_rows_c43_empty_n,
        p_src_mat_rows_read => colorcorrectionmatri_U0_p_src_mat_rows_read,
        p_src_mat_cols_dout => ltm_in_cols_c44_dout,
        p_src_mat_cols_empty_n => ltm_in_cols_c44_empty_n,
        p_src_mat_cols_read => colorcorrectionmatri_U0_p_src_mat_cols_read,
        p_src_mat_data_V_V_dout => ltm_in_data_V_V_dout,
        p_src_mat_data_V_V_empty_n => ltm_in_data_V_V_empty_n,
        p_src_mat_data_V_V_read => colorcorrectionmatri_U0_p_src_mat_data_V_V_read,
        p_dst_mat_data_V_V_din => colorcorrectionmatri_U0_p_dst_mat_data_V_V_din,
        p_dst_mat_data_V_V_full_n => lsc_out_data_V_V_full_n,
        p_dst_mat_data_V_V_write => colorcorrectionmatri_U0_p_dst_mat_data_V_V_write);

    xf_QuatizationDither_U0 : component xf_QuatizationDither
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => xf_QuatizationDither_U0_ap_start,
        ap_done => xf_QuatizationDither_U0_ap_done,
        ap_continue => xf_QuatizationDither_U0_ap_continue,
        ap_idle => xf_QuatizationDither_U0_ap_idle,
        ap_ready => xf_QuatizationDither_U0_ap_ready,
        stream_in_rows_dout => lsc_out_rows_c_dout,
        stream_in_rows_empty_n => lsc_out_rows_c_empty_n,
        stream_in_rows_read => xf_QuatizationDither_U0_stream_in_rows_read,
        stream_in_cols_dout => lsc_out_cols_c_dout,
        stream_in_cols_empty_n => lsc_out_cols_c_empty_n,
        stream_in_cols_read => xf_QuatizationDither_U0_stream_in_cols_read,
        stream_in_data_V_V_dout => lsc_out_data_V_V_dout,
        stream_in_data_V_V_empty_n => lsc_out_data_V_V_empty_n,
        stream_in_data_V_V_read => xf_QuatizationDither_U0_stream_in_data_V_V_read,
        stream_out_data_V_V_din => xf_QuatizationDither_U0_stream_out_data_V_V_din,
        stream_out_data_V_V_full_n => aecin_data_V_V_full_n,
        stream_out_data_V_V_write => xf_QuatizationDither_U0_stream_out_data_V_V_write);

    ColorMat2AXIvideo_U0 : component ColorMat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ColorMat2AXIvideo_U0_ap_start,
        ap_done => ColorMat2AXIvideo_U0_ap_done,
        ap_continue => ColorMat2AXIvideo_U0_ap_continue,
        ap_idle => ColorMat2AXIvideo_U0_ap_idle,
        ap_ready => ColorMat2AXIvideo_U0_ap_ready,
        color_mat_rows_dout => aecin_rows_c_dout,
        color_mat_rows_empty_n => aecin_rows_c_empty_n,
        color_mat_rows_read => ColorMat2AXIvideo_U0_color_mat_rows_read,
        color_mat_cols_dout => aecin_cols_c_dout,
        color_mat_cols_empty_n => aecin_cols_c_empty_n,
        color_mat_cols_read => ColorMat2AXIvideo_U0_color_mat_cols_read,
        color_mat_data_V_V_dout => aecin_data_V_V_dout,
        color_mat_data_V_V_empty_n => aecin_data_V_V_empty_n,
        color_mat_data_V_V_read => ColorMat2AXIvideo_U0_color_mat_data_V_V_read,
        m_axis_video_TDATA => ColorMat2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => ColorMat2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => ColorMat2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => ColorMat2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => ColorMat2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => ColorMat2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => ColorMat2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => ColorMat2AXIvideo_U0_m_axis_video_TDEST);

    imgInput1_rows_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_imgInput1_rows_out_din,
        if_full_n => imgInput1_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_imgInput1_rows_out_write,
        if_dout => imgInput1_rows_c_dout,
        if_empty_n => imgInput1_rows_c_empty_n,
        if_read => AXIVideo2BayerMat_U0_bayer_mat_rows_read);

    imgInput1_cols_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_imgInput1_cols_out_din,
        if_full_n => imgInput1_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_imgInput1_cols_out_write,
        if_dout => imgInput1_cols_c_dout,
        if_empty_n => imgInput1_cols_c_empty_n,
        if_read => AXIVideo2BayerMat_U0_bayer_mat_cols_read);

    imgInput2_rows_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_imgInput2_rows_out_din,
        if_full_n => imgInput2_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_imgInput2_rows_out_write,
        if_dout => imgInput2_rows_c_dout,
        if_empty_n => imgInput2_rows_c_empty_n,
        if_read => badpixelcorrection_U0_p_src_rows_read);

    imgInput2_cols_c_U : component fifo_w16_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_imgInput2_cols_out_din,
        if_full_n => imgInput2_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_imgInput2_cols_out_write,
        if_dout => imgInput2_cols_c_dout,
        if_empty_n => imgInput2_cols_c_empty_n,
        if_read => badpixelcorrection_U0_p_src_cols_read);

    bpc_out_rows_c_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_bpc_out_rows_out_din,
        if_full_n => bpc_out_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_bpc_out_rows_out_write,
        if_dout => bpc_out_rows_c_dout,
        if_empty_n => bpc_out_rows_c_empty_n,
        if_read => gaincontrol_U0_src1_rows_read);

    bpc_out_cols_c_U : component fifo_w16_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_bpc_out_cols_out_din,
        if_full_n => bpc_out_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_bpc_out_cols_out_write,
        if_dout => bpc_out_cols_c_dout,
        if_empty_n => bpc_out_cols_c_empty_n,
        if_read => gaincontrol_U0_src1_cols_read);

    gain_out_rows_c_U : component fifo_w16_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_gain_out_rows_out_din,
        if_full_n => gain_out_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_gain_out_rows_out_write,
        if_dout => gain_out_rows_c_dout,
        if_empty_n => gain_out_rows_c_empty_n,
        if_read => demosaicing_U0_src_mat_rows_read);

    gain_out_cols_c_U : component fifo_w16_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_gain_out_cols_out_din,
        if_full_n => gain_out_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_gain_out_cols_out_write,
        if_dout => gain_out_cols_c_dout,
        if_empty_n => gain_out_cols_c_empty_n,
        if_read => demosaicing_U0_src_mat_cols_read);

    demosaic_out_rows_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_din,
        if_full_n => demosaic_out_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_demosaic_out_rows_out_write,
        if_dout => demosaic_out_rows_c_dout,
        if_empty_n => demosaic_out_rows_c_empty_n,
        if_read => AWBhistogram_U0_src1_rows_read);

    demosaic_out_cols_c_U : component fifo_w16_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_din,
        if_full_n => demosaic_out_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_demosaic_out_cols_out_write,
        if_dout => demosaic_out_cols_c_dout,
        if_empty_n => demosaic_out_cols_c_empty_n,
        if_read => AWBhistogram_U0_src1_cols_read);

    ltm_in_rows_c_U : component fifo_w16_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_ltm_in_rows_out_din,
        if_full_n => ltm_in_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_ltm_in_rows_out_write,
        if_dout => ltm_in_rows_c_dout,
        if_empty_n => ltm_in_rows_c_empty_n,
        if_read => AWBNormalization_U0_dst_rows_read);

    ltm_in_cols_c_U : component fifo_w16_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_ltm_in_cols_out_din,
        if_full_n => ltm_in_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_ltm_in_cols_out_write,
        if_dout => ltm_in_cols_c_dout,
        if_empty_n => ltm_in_cols_c_empty_n,
        if_read => AWBNormalization_U0_dst_cols_read);

    lsc_out_rows_c_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_lsc_out_rows_out_din,
        if_full_n => lsc_out_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_lsc_out_rows_out_write,
        if_dout => lsc_out_rows_c_dout,
        if_empty_n => lsc_out_rows_c_empty_n,
        if_read => xf_QuatizationDither_U0_stream_in_rows_read);

    lsc_out_cols_c_U : component fifo_w16_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_lsc_out_cols_out_din,
        if_full_n => lsc_out_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_lsc_out_cols_out_write,
        if_dout => lsc_out_cols_c_dout,
        if_empty_n => lsc_out_cols_c_empty_n,
        if_read => xf_QuatizationDither_U0_stream_in_cols_read);

    aecin_rows_c_U : component fifo_w16_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_aecin_rows_out_din,
        if_full_n => aecin_rows_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_aecin_rows_out_write,
        if_dout => aecin_rows_c_dout,
        if_empty_n => aecin_rows_c_empty_n,
        if_read => ColorMat2AXIvideo_U0_color_mat_rows_read);

    aecin_cols_c_U : component fifo_w16_d11_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ISPpipeline_Block_Ma_U0_aecin_cols_out_din,
        if_full_n => aecin_cols_c_full_n,
        if_write => ISPpipeline_Block_Ma_U0_aecin_cols_out_write,
        if_dout => aecin_cols_c_dout,
        if_empty_n => aecin_cols_c_empty_n,
        if_read => ColorMat2AXIvideo_U0_color_mat_cols_read);

    imgInput1_data_V_V_U : component fifo_w40_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIVideo2BayerMat_U0_bayer_mat_data_V_V_din,
        if_full_n => imgInput1_data_V_V_full_n,
        if_write => AXIVideo2BayerMat_U0_bayer_mat_data_V_V_write,
        if_dout => imgInput1_data_V_V_dout,
        if_empty_n => imgInput1_data_V_V_empty_n,
        if_read => blackLevelCorrection_U0_p_Src_data_V_V_read);

    imgInput1_rows_c41_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIVideo2BayerMat_U0_bayer_mat_rows_out_din,
        if_full_n => imgInput1_rows_c41_full_n,
        if_write => AXIVideo2BayerMat_U0_bayer_mat_rows_out_write,
        if_dout => imgInput1_rows_c41_dout,
        if_empty_n => imgInput1_rows_c41_empty_n,
        if_read => blackLevelCorrection_U0_p_Src_rows_read);

    imgInput1_cols_c42_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIVideo2BayerMat_U0_bayer_mat_cols_out_din,
        if_full_n => imgInput1_cols_c42_full_n,
        if_write => AXIVideo2BayerMat_U0_bayer_mat_cols_out_write,
        if_dout => imgInput1_cols_c42_dout,
        if_empty_n => imgInput1_cols_c42_empty_n,
        if_read => blackLevelCorrection_U0_p_Src_cols_read);

    imgInput2_data_V_V_U : component fifo_w40_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blackLevelCorrection_U0_p_Dst_data_V_V_din,
        if_full_n => imgInput2_data_V_V_full_n,
        if_write => blackLevelCorrection_U0_p_Dst_data_V_V_write,
        if_dout => imgInput2_data_V_V_dout,
        if_empty_n => imgInput2_data_V_V_empty_n,
        if_read => badpixelcorrection_U0_p_src_data_V_V_read);

    bpc_out_data_V_V_U : component fifo_w40_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => badpixelcorrection_U0_p_dst_data_V_V_din,
        if_full_n => bpc_out_data_V_V_full_n,
        if_write => badpixelcorrection_U0_p_dst_data_V_V_write,
        if_dout => bpc_out_data_V_V_dout,
        if_empty_n => bpc_out_data_V_V_empty_n,
        if_read => gaincontrol_U0_src1_data_V_V_read);

    gain_out_data_V_V_U : component fifo_w40_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gaincontrol_U0_dst_data_V_V_din,
        if_full_n => gain_out_data_V_V_full_n,
        if_write => gaincontrol_U0_dst_data_V_V_write,
        if_dout => gain_out_data_V_V_dout,
        if_empty_n => gain_out_data_V_V_empty_n,
        if_read => demosaicing_U0_src_mat_data_V_V_read);

    demosaic_out_data_V_s_U : component fifo_w120_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => demosaicing_U0_dst_mat_data_V_V_din,
        if_full_n => demosaic_out_data_V_s_full_n,
        if_write => demosaicing_U0_dst_mat_data_V_V_write,
        if_dout => demosaic_out_data_V_s_dout,
        if_empty_n => demosaic_out_data_V_s_empty_n,
        if_read => AWBhistogram_U0_src1_data_V_V_read);

    impop_data_V_V_U : component fifo_w120_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AWBhistogram_U0_src2_data_V_V_din,
        if_full_n => impop_data_V_V_full_n,
        if_write => AWBhistogram_U0_src2_data_V_V_write,
        if_dout => impop_data_V_V_dout,
        if_empty_n => impop_data_V_V_empty_n,
        if_read => AWBNormalization_U0_src_data_V_V_read);

    ltm_in_data_V_V_U : component fifo_w120_d4096_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AWBNormalization_U0_dst_data_V_V_din,
        if_full_n => ltm_in_data_V_V_full_n,
        if_write => AWBNormalization_U0_dst_data_V_V_write,
        if_dout => ltm_in_data_V_V_dout,
        if_empty_n => ltm_in_data_V_V_empty_n,
        if_read => colorcorrectionmatri_U0_p_src_mat_data_V_V_read);

    ltm_in_rows_c43_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AWBNormalization_U0_dst_rows_out_din,
        if_full_n => ltm_in_rows_c43_full_n,
        if_write => AWBNormalization_U0_dst_rows_out_write,
        if_dout => ltm_in_rows_c43_dout,
        if_empty_n => ltm_in_rows_c43_empty_n,
        if_read => colorcorrectionmatri_U0_p_src_mat_rows_read);

    ltm_in_cols_c44_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AWBNormalization_U0_dst_cols_out_din,
        if_full_n => ltm_in_cols_c44_full_n,
        if_write => AWBNormalization_U0_dst_cols_out_write,
        if_dout => ltm_in_cols_c44_dout,
        if_empty_n => ltm_in_cols_c44_empty_n,
        if_read => colorcorrectionmatri_U0_p_src_mat_cols_read);

    lsc_out_data_V_V_U : component fifo_w120_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => colorcorrectionmatri_U0_p_dst_mat_data_V_V_din,
        if_full_n => lsc_out_data_V_V_full_n,
        if_write => colorcorrectionmatri_U0_p_dst_mat_data_V_V_write,
        if_dout => lsc_out_data_V_V_dout,
        if_empty_n => lsc_out_data_V_V_empty_n,
        if_read => xf_QuatizationDither_U0_stream_in_data_V_V_read);

    aecin_data_V_V_U : component fifo_w96_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => xf_QuatizationDither_U0_stream_out_data_V_V_din,
        if_full_n => aecin_data_V_V_full_n,
        if_write => xf_QuatizationDither_U0_stream_out_data_V_V_write,
        if_dout => aecin_data_V_V_dout,
        if_empty_n => aecin_data_V_V_empty_n,
        if_read => ColorMat2AXIvideo_U0_color_mat_data_V_V_read);

    start_for_badpixebek_U : component start_for_badpixebek
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_badpixelcorrection_U0_din,
        if_full_n => start_for_badpixelcorrection_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_badpixelcorrection_U0_dout,
        if_empty_n => start_for_badpixelcorrection_U0_empty_n,
        if_read => badpixelcorrection_U0_ap_ready);

    start_for_gainconbfk_U : component start_for_gainconbfk
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gaincontrol_U0_din,
        if_full_n => start_for_gaincontrol_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_gaincontrol_U0_dout,
        if_empty_n => start_for_gaincontrol_U0_empty_n,
        if_read => gaincontrol_U0_ap_ready);

    start_for_demosaibgk_U : component start_for_demosaibgk
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_demosaicing_U0_din,
        if_full_n => start_for_demosaicing_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_demosaicing_U0_dout,
        if_empty_n => start_for_demosaicing_U0_empty_n,
        if_read => demosaicing_U0_ap_ready);

    start_for_AWBhistbhl_U : component start_for_AWBhistbhl
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AWBhistogram_U0_din,
        if_full_n => start_for_AWBhistogram_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_AWBhistogram_U0_dout,
        if_empty_n => start_for_AWBhistogram_U0_empty_n,
        if_read => AWBhistogram_U0_ap_ready);

    start_for_xf_Quatbil_U : component start_for_xf_Quatbil
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_xf_QuatizationDither_U0_din,
        if_full_n => start_for_xf_QuatizationDither_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_xf_QuatizationDither_U0_dout,
        if_empty_n => start_for_xf_QuatizationDither_U0_empty_n,
        if_read => xf_QuatizationDither_U0_ap_ready);

    start_for_ColorMabjl_U : component start_for_ColorMabjl
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ColorMat2AXIvideo_U0_din,
        if_full_n => start_for_ColorMat2AXIvideo_U0_full_n,
        if_write => ISPpipeline_Block_Ma_U0_start_write,
        if_dout => start_for_ColorMat2AXIvideo_U0_dout,
        if_empty_n => start_for_ColorMat2AXIvideo_U0_empty_n,
        if_read => ColorMat2AXIvideo_U0_ap_ready);

    start_for_blackLebkl_U : component start_for_blackLebkl
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_blackLevelCorrection_U0_din,
        if_full_n => start_for_blackLevelCorrection_U0_full_n,
        if_write => AXIVideo2BayerMat_U0_start_write,
        if_dout => start_for_blackLevelCorrection_U0_dout,
        if_empty_n => start_for_blackLevelCorrection_U0_empty_n,
        if_read => blackLevelCorrection_U0_ap_ready);

    start_for_colorcobll_U : component start_for_colorcobll
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_colorcorrectionmatri_U0_din,
        if_full_n => start_for_colorcorrectionmatri_U0_full_n,
        if_write => AWBNormalization_U0_start_write,
        if_dout => start_for_colorcorrectionmatri_U0_dout,
        if_empty_n => start_for_colorcorrectionmatri_U0_empty_n,
        if_read => colorcorrectionmatri_U0_ap_ready);





    ap_sync_reg_AWBNormalization_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AWBNormalization_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AWBNormalization_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AWBNormalization_U0_ap_ready <= ap_sync_AWBNormalization_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready <= ap_sync_AXIVideo2BayerMat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready <= ap_sync_ISPpipeline_Block_Ma_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AWBNormalization_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AWBNormalization_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AWBNormalization_U0_ap_ready_count <= std_logic_vector(unsigned(AWBNormalization_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AWBNormalization_U0_ap_ready))) then 
                AWBNormalization_U0_ap_ready_count <= std_logic_vector(unsigned(AWBNormalization_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    AXIVideo2BayerMat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIVideo2BayerMat_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                AXIVideo2BayerMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIVideo2BayerMat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIVideo2BayerMat_U0_ap_ready))) then 
                AXIVideo2BayerMat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIVideo2BayerMat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    ISPpipeline_Block_Ma_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = ISPpipeline_Block_Ma_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                ISPpipeline_Block_Ma_U0_ap_ready_count <= std_logic_vector(unsigned(ISPpipeline_Block_Ma_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = ISPpipeline_Block_Ma_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                ISPpipeline_Block_Ma_U0_ap_ready_count <= std_logic_vector(unsigned(ISPpipeline_Block_Ma_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AWBNormalization_U0_ap_continue <= ap_const_logic_1;
    AWBNormalization_U0_ap_start <= ((ap_sync_reg_AWBNormalization_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AWBhistogram_U0_ap_continue <= ap_sync_continue;
    AWBhistogram_U0_ap_start <= start_for_AWBhistogram_U0_empty_n;
    AWBhistogram_U0_start_full_n <= ap_const_logic_1;
    AWBhistogram_U0_start_write <= ap_const_logic_0;
    AXIVideo2BayerMat_U0_ap_continue <= ap_const_logic_1;
    AXIVideo2BayerMat_U0_ap_start <= ((ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ColorMat2AXIvideo_U0_ap_continue <= ap_sync_continue;
    ColorMat2AXIvideo_U0_ap_start <= start_for_ColorMat2AXIvideo_U0_empty_n;
    ColorMat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    ColorMat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ISPpipeline_Block_Ma_U0_ap_continue <= ap_const_logic_1;
    ISPpipeline_Block_Ma_U0_ap_start <= ((ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ISPpipeline_Block_Ma_U0_start_full_n <= (start_for_xf_QuatizationDither_U0_full_n and start_for_gaincontrol_U0_full_n and start_for_demosaicing_U0_full_n and start_for_badpixelcorrection_U0_full_n and start_for_ColorMat2AXIvideo_U0_full_n and start_for_AWBhistogram_U0_full_n);
    ap_done <= ap_sync_done;
    ap_idle <= (xf_QuatizationDither_U0_ap_idle and gaincontrol_U0_ap_idle and demosaicing_U0_ap_idle and colorcorrectionmatri_U0_ap_idle and blackLevelCorrection_U0_ap_idle and badpixelcorrection_U0_ap_idle and ISPpipeline_Block_Ma_U0_ap_idle and ColorMat2AXIvideo_U0_ap_idle and AXIVideo2BayerMat_U0_ap_idle and AWBhistogram_U0_ap_idle and AWBNormalization_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_AWBNormalization_U0_ap_ready <= (ap_sync_reg_AWBNormalization_U0_ap_ready or AWBNormalization_U0_ap_ready);
    ap_sync_AXIVideo2BayerMat_U0_ap_ready <= (ap_sync_reg_AXIVideo2BayerMat_U0_ap_ready or AXIVideo2BayerMat_U0_ap_ready);
    ap_sync_ISPpipeline_Block_Ma_U0_ap_ready <= (ap_sync_reg_ISPpipeline_Block_Ma_U0_ap_ready or ISPpipeline_Block_Ma_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (ColorMat2AXIvideo_U0_ap_done and AWBhistogram_U0_ap_done);
    ap_sync_ready <= (ap_sync_ISPpipeline_Block_Ma_U0_ap_ready and ap_sync_AXIVideo2BayerMat_U0_ap_ready and ap_sync_AWBNormalization_U0_ap_ready);
    badpixelcorrection_U0_ap_continue <= ap_const_logic_1;
    badpixelcorrection_U0_ap_start <= start_for_badpixelcorrection_U0_empty_n;
    badpixelcorrection_U0_start_full_n <= ap_const_logic_1;
    badpixelcorrection_U0_start_write <= ap_const_logic_0;
    blackLevelCorrection_U0_ap_continue <= ap_const_logic_1;
    blackLevelCorrection_U0_ap_start <= start_for_blackLevelCorrection_U0_empty_n;
    blackLevelCorrection_U0_start_full_n <= ap_const_logic_1;
    blackLevelCorrection_U0_start_write <= ap_const_logic_0;
    colorcorrectionmatri_U0_ap_continue <= ap_const_logic_1;
    colorcorrectionmatri_U0_ap_start <= start_for_colorcorrectionmatri_U0_empty_n;
    colorcorrectionmatri_U0_start_full_n <= ap_const_logic_1;
    colorcorrectionmatri_U0_start_write <= ap_const_logic_0;
    demosaicing_U0_ap_continue <= ap_const_logic_1;
    demosaicing_U0_ap_start <= start_for_demosaicing_U0_empty_n;
    demosaicing_U0_start_full_n <= ap_const_logic_1;
    demosaicing_U0_start_write <= ap_const_logic_0;
    gaincontrol_U0_ap_continue <= ap_const_logic_1;
    gaincontrol_U0_ap_start <= start_for_gaincontrol_U0_empty_n;
    gaincontrol_U0_start_full_n <= ap_const_logic_1;
    gaincontrol_U0_start_write <= ap_const_logic_0;
    hist0_0_address0 <= AWBhistogram_U0_histogram_0_address0;
    hist0_0_address1 <= ap_const_lv10_0;
    hist0_0_ce0 <= AWBhistogram_U0_histogram_0_ce0;
    hist0_0_ce1 <= ap_const_logic_0;
    hist0_0_d0 <= AWBhistogram_U0_histogram_0_d0;
    hist0_0_d1 <= ap_const_lv32_0;
    hist0_0_we0 <= AWBhistogram_U0_histogram_0_we0;
    hist0_0_we1 <= ap_const_logic_0;
    hist0_1_address0 <= AWBhistogram_U0_histogram_1_address0;
    hist0_1_address1 <= ap_const_lv10_0;
    hist0_1_ce0 <= AWBhistogram_U0_histogram_1_ce0;
    hist0_1_ce1 <= ap_const_logic_0;
    hist0_1_d0 <= AWBhistogram_U0_histogram_1_d0;
    hist0_1_d1 <= ap_const_lv32_0;
    hist0_1_we0 <= AWBhistogram_U0_histogram_1_we0;
    hist0_1_we1 <= ap_const_logic_0;
    hist0_2_address0 <= AWBhistogram_U0_histogram_2_address0;
    hist0_2_address1 <= ap_const_lv10_0;
    hist0_2_ce0 <= AWBhistogram_U0_histogram_2_ce0;
    hist0_2_ce1 <= ap_const_logic_0;
    hist0_2_d0 <= AWBhistogram_U0_histogram_2_d0;
    hist0_2_d1 <= ap_const_lv32_0;
    hist0_2_we0 <= AWBhistogram_U0_histogram_2_we0;
    hist0_2_we1 <= ap_const_logic_0;
    hist1_0_address0 <= AWBNormalization_U0_histogram_0_address0;
    hist1_0_address1 <= ap_const_lv10_0;
    hist1_0_ce0 <= AWBNormalization_U0_histogram_0_ce0;
    hist1_0_ce1 <= ap_const_logic_0;
    hist1_0_d0 <= ap_const_lv32_0;
    hist1_0_d1 <= ap_const_lv32_0;
    hist1_0_we0 <= ap_const_logic_0;
    hist1_0_we1 <= ap_const_logic_0;
    hist1_1_address0 <= AWBNormalization_U0_histogram_1_address0;
    hist1_1_address1 <= ap_const_lv10_0;
    hist1_1_ce0 <= AWBNormalization_U0_histogram_1_ce0;
    hist1_1_ce1 <= ap_const_logic_0;
    hist1_1_d0 <= ap_const_lv32_0;
    hist1_1_d1 <= ap_const_lv32_0;
    hist1_1_we0 <= ap_const_logic_0;
    hist1_1_we1 <= ap_const_logic_0;
    hist1_2_address0 <= AWBNormalization_U0_histogram_2_address0;
    hist1_2_address1 <= ap_const_lv10_0;
    hist1_2_ce0 <= AWBNormalization_U0_histogram_2_ce0;
    hist1_2_ce1 <= ap_const_logic_0;
    hist1_2_d0 <= ap_const_lv32_0;
    hist1_2_d1 <= ap_const_lv32_0;
    hist1_2_we0 <= ap_const_logic_0;
    hist1_2_we1 <= ap_const_logic_0;
    m_axis_video_TDATA <= ColorMat2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= ColorMat2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= ColorMat2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= ColorMat2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= ColorMat2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= ColorMat2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= ColorMat2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= ColorMat2AXIvideo_U0_m_axis_video_TVALID;
    s_axis_video_TREADY <= AXIVideo2BayerMat_U0_s_axis_video_TREADY;
    start_for_AWBhistogram_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_ColorMat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_badpixelcorrection_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_blackLevelCorrection_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_colorcorrectionmatri_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_demosaicing_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gaincontrol_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_xf_QuatizationDither_U0_din <= (0=>ap_const_logic_1, others=>'-');
    xf_QuatizationDither_U0_ap_continue <= ap_const_logic_1;
    xf_QuatizationDither_U0_ap_start <= start_for_xf_QuatizationDither_U0_empty_n;
    xf_QuatizationDither_U0_start_full_n <= ap_const_logic_1;
    xf_QuatizationDither_U0_start_write <= ap_const_logic_0;
end behav;
