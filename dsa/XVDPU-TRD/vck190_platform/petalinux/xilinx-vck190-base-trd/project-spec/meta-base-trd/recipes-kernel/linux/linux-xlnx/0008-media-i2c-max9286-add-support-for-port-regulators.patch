From e4befdf58c25c3a2de06751323e32d8b7a17349f Mon Sep 17 00:00:00 2001
From: Thomas Nizan <tnizan@witekio.com>
Date: Tue, 20 Apr 2021 10:51:02 -0700
Subject: [PATCH 08/14] media: i2c: max9286: add support for port regulators

Allow users to use one PoC regulator per port, instead of a global
regulator.

The property 'port-poc-supply' in the port node is used to indicate the
regulator to use for a specific port.
---
 drivers/media/i2c/max9286.c | 117 ++++++++++++++++++++++++++++++++++++++------
 1 file changed, 102 insertions(+), 15 deletions(-)

diff --git a/drivers/media/i2c/max9286.c b/drivers/media/i2c/max9286.c
index e96053b..31913c9 100644
--- a/drivers/media/i2c/max9286.c
+++ b/drivers/media/i2c/max9286.c
@@ -137,6 +137,9 @@
 struct max9286_source {
 	struct v4l2_subdev *sd;
 	struct fwnode_handle *fwnode;
+	struct device *dev;
+	struct regulator *regulator;
+
 };
 
 struct max9286_asd {
@@ -1073,16 +1076,30 @@ static int max9286_init(struct device *dev)
 {
 	struct max9286_priv *priv;
 	struct i2c_client *client;
+	struct max9286_source *source;
 	int ret;
 
 	client = to_i2c_client(dev);
 	priv = i2c_get_clientdata(client);
 
 	/* Enable the bus power. */
-	ret = regulator_enable(priv->regulator);
-	if (ret < 0) {
-		dev_err(&client->dev, "Unable to turn PoC on\n");
-		return ret;
+	if (priv->regulator) {
+		/* Enable global regulator */
+		ret = regulator_enable(priv->regulator);
+		if (ret < 0) {
+			dev_err(dev, "Unable to turn PoC on\n");
+			return ret;
+		}
+	} else {
+		/* Enable global regulator */
+		for_each_source(priv, source) {
+			/* Enable source regulators */
+			ret = regulator_enable(source->regulator);
+			if (ret < 0) {
+				dev_err(dev, "Unable to turn PoC on\n");
+				return ret;
+			}
+		}
 	}
 
 	ret = max9286_setup(priv);
@@ -1115,7 +1132,13 @@ static int max9286_init(struct device *dev)
 err_v4l2_register:
 	max9286_v4l2_unregister(priv);
 err_regulator:
-	regulator_disable(priv->regulator);
+	if (priv->regulator) {
+		regulator_disable(priv->regulator);
+	} else {
+		for_each_source(priv, source) {
+			regulator_disable(source->regulator);
+		}
+	}
 
 	return ret;
 }
@@ -1127,9 +1150,19 @@ static void max9286_cleanup_dt(struct max9286_priv *priv)
 	for_each_source(priv, source) {
 		fwnode_handle_put(source->fwnode);
 		source->fwnode = NULL;
+		if (source->dev) {
+			device_unregister(source->dev);
+			source->dev = NULL;
+		}
 	}
 }
 
+static void max9286_source_dev_release(struct device *dev)
+{
+	of_node_put(dev->of_node);
+	kfree(dev);
+}
+
 static int max9286_parse_dt(struct max9286_priv *priv)
 {
 	struct device *dev = &priv->client->dev;
@@ -1137,6 +1170,7 @@ static int max9286_parse_dt(struct max9286_priv *priv)
 	struct device_node *node = NULL;
 	unsigned int i2c_mux_mask = 0;
 	u32 reverse_channel_microvolt;
+	int ret;
 
 	/* Balance the of_node_put() performed by of_find_node_by_name(). */
 	of_node_get(dev->of_node);
@@ -1184,7 +1218,6 @@ static int max9286_parse_dt(struct max9286_priv *priv)
 			struct v4l2_fwnode_endpoint vep = {
 				.bus_type = V4L2_MBUS_CSI2_DPHY
 			};
-			int ret;
 
 			ret = v4l2_fwnode_endpoint_parse(
 					of_fwnode_handle(node), &vep);
@@ -1222,6 +1255,46 @@ static int max9286_parse_dt(struct max9286_priv *priv)
 			continue;
 		}
 
+		/*
+		 * Register a device for the port, to support usage of the
+		 * regulator API.
+		 */
+		source->dev = kzalloc(sizeof(*source->dev), GFP_KERNEL);
+		if (!source->dev) {
+			of_node_put(node);
+			return -ENOMEM;
+		}
+
+		source->dev->parent = dev;
+		source->dev->of_node = of_get_parent(node);
+		source->dev->release = &max9286_source_dev_release;
+		dev_set_name(source->dev, "%s-port%u", dev_name(dev), ep.port);
+
+		ret = device_register(source->dev);
+		if (ret < 0) {
+			dev_err(dev, "Failed to register device for port %u\n",
+				ep.port);
+			put_device(source->dev);
+			source->dev = NULL;
+			of_node_put(node);
+			return ret;
+		}
+
+		/* Retrieve the port-poc supply, if no global regulator */
+		if (!priv->regulator) {
+			source->regulator = devm_regulator_get_exclusive(source->dev, "port-poc");
+			if (IS_ERR(source->regulator)) {
+				dev_info(source->dev, "ERROR PoC regulator\n");
+				if (PTR_ERR(source->regulator) != -EPROBE_DEFER)
+					dev_err(source->dev,
+						"Unable to get PoC regulator (%ld)\n",
+						PTR_ERR(source->regulator));
+				ret = PTR_ERR(source->regulator);
+				of_node_put(node);
+				return ret;
+			}
+		}
+
 		priv->source_mask |= BIT(ep.port);
 		priv->nsources++;
 	}
@@ -1249,6 +1322,7 @@ static int max9286_parse_dt(struct max9286_priv *priv)
 static int max9286_probe(struct i2c_client *client)
 {
 	struct max9286_priv *priv;
+
 	int ret;
 
 	priv = devm_kzalloc(&client->dev, sizeof(*priv), GFP_KERNEL);
@@ -1290,19 +1364,25 @@ static int max9286_probe(struct i2c_client *client)
 	if (ret)
 		goto err_powerdown;
 
-	priv->regulator = devm_regulator_get(&client->dev, "poc");
+	priv->regulator = devm_regulator_get_exclusive(&client->dev, "poc");
 	if (IS_ERR(priv->regulator)) {
-		if (PTR_ERR(priv->regulator) != -EPROBE_DEFER)
-			dev_err(&client->dev,
-				"Unable to get PoC regulator (%ld)\n",
-				PTR_ERR(priv->regulator));
-		ret = PTR_ERR(priv->regulator);
-		goto err_powerdown;
+		if (PTR_ERR(priv->regulator) == -ENODEV) {
+			dev_info(&client->dev,
+				 "No Global PoC regulator, looking for port POC regulators\n");
+			priv->regulator = NULL;
+		} else {
+			if (PTR_ERR(priv->regulator) != -EPROBE_DEFER)
+				dev_err(&client->dev,
+					"Unable to get PoC regulator (%ld)\n",
+					PTR_ERR(priv->regulator));
+			ret = PTR_ERR(priv->regulator);
+			goto err_powerdown;
+		}
 	}
 
 	ret = max9286_parse_dt(priv);
 	if (ret)
-		goto err_powerdown;
+		goto err_cleanup_dt;
 
 	ret = max9286_init(&client->dev);
 	if (ret < 0)
@@ -1320,13 +1400,20 @@ static int max9286_probe(struct i2c_client *client)
 
 static int max9286_remove(struct i2c_client *client)
 {
+	struct max9286_source *source;
 	struct max9286_priv *priv = i2c_get_clientdata(client);
 
 	i2c_mux_del_adapters(priv->mux);
 
 	max9286_v4l2_unregister(priv);
 
-	regulator_disable(priv->regulator);
+	if (priv->regulator) {
+		regulator_disable(priv->regulator);
+	} else {
+		for_each_source(priv, source) {
+			regulator_disable(source->regulator);
+		}
+	}
 
 	gpiod_set_value_cansleep(priv->gpiod_pwdn, 0);
 
-- 
2.7.4

