<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="tensor__buffer_8hpp" kind="file" language="C++">
    <compoundname>tensor_buffer.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includedby refid="runner_8hpp" local="yes">runner.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>tensor_buffer.hpp</label>
        <link refid="tensor__buffer_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="5">
        <label>typeinfo</label>
      </node>
      <node id="6">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classvart_1_1_tensor_buffer" prot="public">vart::TensorBuffer</innerclass>
    <innerclass refid="structvart_1_1_xcl_bo" prot="public">vart::XclBo</innerclass>
    <innerclass refid="classvart_1_1_tensor_buffer_ext" prot="public">vart::TensorBufferExt</innerclass>
    <innernamespace refid="namespacexir">xir</innernamespace>
    <innernamespace refid="namespacevart">vart</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2022-2023<sp/>Advanced<sp/>Micro<sp/>Devices<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">xir<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tensor;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>xir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vart<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classvart_1_1_tensor_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvart_1_1_tensor_buffer" kindref="compound">TensorBuffer</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer" kindref="compound">TensorBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xir::Tensor*<sp/>tensor);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer" kindref="compound">~TensorBuffer</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9" kindref="member">location_t</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a488fb959c5a8390af58b46d0207ff471" kindref="member">HOST_VIRT</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9aebed6be82db01b4b596de362f48f266c" kindref="member">HOST_PHY</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9aef02403e51abd6922be8b6d5aa58710b" kindref="member">DEVICE_0</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a46bec86a7db59fdbd3e5d3936dc23df1" kindref="member">DEVICE_1</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9aa6e06f60a3a0b92730f683218d752e41" kindref="member">DEVICE_2</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a291c66e584bee580b14653972d052b50" kindref="member">DEVICE_3</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a42dc9549394297d2324b552573d54fd7" kindref="member">DEVICE_4</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a035241fbbb71ab130f557dc14cd3eaad" kindref="member">DEVICE_5</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9adf9d5617218fa668257faf6fe5f928f7" kindref="member">DEVICE_6</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9ad0b840e119a7f48a283b29faf269045d" kindref="member">DEVICE_7</ref><sp/>=<sp/>9</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classvart_1_1_tensor_buffer_1a5879f4dcf612d462baa1bdfcf2f5387f" kindref="member">to_string</ref>(<ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9" kindref="member">location_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a9d8516b7a6303b98e7aeebdb7cebeb55" kindref="member">copy_tensor_buffer</ref>(<ref refid="classvart_1_1_tensor_buffer" kindref="compound">vart::TensorBuffer</ref>*<sp/>tb_from,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvart_1_1_tensor_buffer" kindref="compound">vart::TensorBuffer</ref>*<sp/>tb_to);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;TensorBuffer&gt;<sp/><ref refid="classvart_1_1_tensor_buffer_1a945c798b96ee1f351e7474db08bb379a" kindref="member">create_unowned_device_tensor_buffer</ref>(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xir::Tensor*<sp/>tensor,<sp/>uint64_t<sp/>batch_addr[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>addr_arrsize);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::pair&lt;std::uint64_t,<sp/>std::size_t&gt;<sp/><ref refid="classvart_1_1_tensor_buffer_1a0267b7ff6fd5270bd293571626e9e777" kindref="member">data</ref>(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int32_t&gt;<sp/>idx<sp/>=<sp/>{})<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9" kindref="member">location_t</ref><sp/><ref refid="classvart_1_1_tensor_buffer_1ab76cae37dd5bd473d2e89d064e4c8b4f" kindref="member">get_location</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a31881b9c15f11383074babe029080ca9a488fb959c5a8390af58b46d0207ff471" kindref="member">location_t::HOST_VIRT</ref>;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::pair&lt;uint64_t,<sp/>size_t&gt;<sp/><ref refid="classvart_1_1_tensor_buffer_1ac3e8852bfa0c6889aa0db8cc3aaa4e7b" kindref="member">data_phy</ref>(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int32_t&gt;<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair&lt;uint64_t,<sp/>size_t&gt;(0u,<sp/>0u);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a9057a559781ab9afc2a3d9b11ee2dc52" kindref="member">sync_for_read</ref>(uint64_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a7cf59f4ee46d7bd356af8a8d2f00ae80" kindref="member">sync_for_write</ref>(uint64_t<sp/>offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size){};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a781dbc662ce87afedf825aebf94eb2ba" kindref="member">copy_from_host</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>batch_idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvart_1_1_tensor_buffer_1a04f040c860de3c9f54f96e661aabef60" kindref="member">copy_to_host</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>batch_idx,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xir::Tensor*<sp/><ref refid="classvart_1_1_tensor_buffer_1a3c53b20e0e7b58a4c5d18baa10a3f0b6" kindref="member">get_tensor</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classvart_1_1_tensor_buffer_1a5879f4dcf612d462baa1bdfcf2f5387f" kindref="member">to_string</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xir::Tensor*<sp/>tensor_;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XclBo<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xcl_handle;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>bo_handle;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bo_handle;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">};</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TensorBufferExt<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TensorBuffer<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TensorBufferExt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xir::Tensor*<sp/>tensor)<sp/>:<sp/>TensorBuffer{tensor}<sp/>{}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>XclBo<sp/>get_xcl_bo(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vart</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="c:/Temp/vitis-ai-staging/src/vai_runtime/vart/runner/include/vart/tensor_buffer.hpp"/>
  </compounddef>
</doxygen>
