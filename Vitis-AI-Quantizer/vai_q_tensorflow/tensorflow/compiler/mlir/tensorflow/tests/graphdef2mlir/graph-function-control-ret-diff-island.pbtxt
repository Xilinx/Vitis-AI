# RUN: tf-mlir-translate -graphdef-to-mlir %s -o - | FileCheck %s --dump-input=fail

# Verify for functions with control return values, the island with only a
# consumed control return value has its control output added to the GraphOps
# FetchOp.

# Match the island containing the "tf.Neg", capture the output
# CHECK:          %[[ISLAND_0:[0-9]*]]:2 = tf_executor.island {{.*[[:space:]].*}} "tf.Neg"

# Check that the tf.Neg control is passed to the fetch
# CHECK:          tf_executor.fetch {{.*}} %[[ISLAND_0]]#1 : tensor<*xf32>, !tf_executor.control

node {
  name: "const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "test_fn_call"
  op: "StatefulPartitionedCall"
  input: "const"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "test_fn"
      }
    }
  }
}
library {
  function {
    signature {
      name: "test_fn"
      input_arg {
        name: "a"
        type: DT_FLOAT
      }
      output_arg {
        name: "d"
        type: DT_FLOAT
      }
      control_output: "must_execute"
    }
    node_def {
      name: "b"
      op: "Neg"
      input: "a"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "c"
      op: "Identity"
      input: "a"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    ret {
      key: "d"
      value: "c:output:0"
    }
    control_ret {
      key: "must_execute"
      value: "b"
    }
  }
}
versions {
  producer: 121
}
