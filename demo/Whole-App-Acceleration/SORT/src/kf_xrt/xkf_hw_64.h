/*
 * Copyright (C) 2020, Xilinx Inc - All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may
 * not use this file except in compliance with the License. A copy of the
 * License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


// control
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of a
//        bit 31~0 - a[31:0] (Read/Write)
// 0x14 : Data signal of a
//        bit 31~0 - a[63:32] (Read/Write)
// 0x18 : reserved
// 0x1c : Data signal of output_r
//        bit 31~0 - output_r[31:0] (Read/Write)
// 0x20 : Data signal of output_r
//        bit 31~0 - output_r[63:32] (Read/Write)
// 0x24 : reserved
// 0x28 : Data signal of repeat_r
//        bit 31~0 - repeat_r[31:0] (Read/Write)
// 0x2c : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//base addr 	0x1870000
//in_r		0x10
//outscore	0x1c
//outindex	0x28
//outsize	0x34
//classsize	0x40

#define XKF_CONTROL_ADDR_AP_CTRL      0x00
#define XKF_CONTROL_ADDR_GIE          0x04
#define XKF_CONTROL_ADDR_IER          0x08
#define XKF_CONTROL_ADDR_ISR          0x0c

#define XKF_CONTROL_ADDR_in_A_DATA	0x10
#define XKF_CONTROL_BITS_in_A_DATA   	64
#define XKF_CONTROL_ADDR_in_Uq_DATA	0x1C
#define XKF_CONTROL_BITS_in_Uq_DATA  	64
#define XKF_CONTROL_ADDR_in_Dq_DATA	0x28
#define XKF_CONTROL_BITS_in_Dq_DATA  	64
#define XKF_CONTROL_ADDR_in_H_DATA	0x34
#define XKF_CONTROL_BITS_in_H_DATA  	64
#define XKF_CONTROL_ADDR_in_X0_DATA	0x40
#define XKF_CONTROL_BITS_in_X0_DATA  	64
#define XKF_CONTROL_ADDR_in_U0_DATA	0x4C
#define XKF_CONTROL_BITS_in_U0_DATA  	64
#define XKF_CONTROL_ADDR_in_D0_DATA	0x58
#define XKF_CONTROL_BITS_in_D0_DATA  	64
#define XKF_CONTROL_ADDR_in_R_DATA	0x64
#define XKF_CONTROL_BITS_in_R_DATA  	64
#define XKF_CONTROL_ADDR_in_y_DATA	0x70
#define XKF_CONTROL_BITS_in_y_DATA  	64
#define XKF_CONTROL_ADDR_SCALAR_flag_DATA	0x7C
#define XKF_CONTROL_BITS_SCALAR_flag_DATA  	32
#define XKF_CONTROL_ADDR_SCALAR_loop_DATA	0x84
#define XKF_CONTROL_BITS_SCALAR_loop_DATA  	32
#define XKF_CONTROL_ADDR_SCALAR_XUDEN_DATA	0x8C
#define XKF_CONTROL_BITS_SCALAR_XUDEN_DATA  	32
#define XKF_CONTROL_ADDR_out_X_DATA	0x94
#define XKF_CONTROL_BITS_out_X_DATA  	64
#define XKF_CONTROL_ADDR_out_U_DATA	0xA0
#define XKF_CONTROL_BITS_out_U_DATA  	64
#define XKF_CONTROL_ADDR_out_D_DATA	0xAC
#define XKF_CONTROL_BITS_out_D_DATA  	64
