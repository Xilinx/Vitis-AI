/*
 * Copyright 2019 Xilinx Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <assert.h>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <fstream>
#include <sstream>
#include <iostream>
#include <string>

/* header file for Vitis AI advanced APIs */
#include <dnndk/dnndk.h>

using namespace std;

#define KERNEL_INCEPTION "tf_inception_v1_0"
#define INPUT_NODE  "InceptionV1_InceptionV1_Conv2d_1a_7x7_Conv2D"

int8_t strToInt8 (const string &str) {
  stringstream ss;
  ss << str;
  int32_t result;
  ss >> result;
  return (int8_t)result;
}

/**
 * @brief Run DPU Task with the specified input
 *
 * @param task - pointer to DPU Task
 *
 * @return none
 */
void runModel(DPUTask *task) {
  assert(task);

  string int8Str;

  /* Input comes from int8 data within file input_aquant_int8.txt,
   * which is generated by DECENT quantizer. 
  */
  ifstream inputStream("input_aquant_int8.txt");

  /* Get the address for input buffer of DPU task */	
  int8_t* inputAddr = dpuGetInputTensorAddress(task, INPUT_NODE);
  
  /* Read int8 input data and feed into DPU input memory buffer */
  while(getline(inputStream, int8Str)) {
    *inputAddr = strToInt8(int8Str);
    inputAddr++;
  };

  inputStream.close();

  /* Trigger the running of DPU Task with the specified input */
  dpuRunTask(task);
}

/**
 * @brief Example code to illustrate how to debug DPU running
 * result over TensorFlow Inception-v1.
 *
 * @param argc - argument counter
 * @param argv - argument vector
 *
 * @return exit code
 */
int main(int argc, char *argv[]) {
  /* DPU Kernels/Tasks for runing model Inception-v1 */
  DPUKernel *kernel;
  DPUTask *task;

  /* Attach to DPU device and prepare for running */
  dpuOpen();

  /* Create DPU Kernel for Inception-v1 */
  kernel = dpuLoadKernel(KERNEL_INCEPTION);

  /* Create DPU Task for Inception-v1 */
  task = dpuCreateTask(kernel, 0);

  /* Enable layer-by-layer dumping of input/output data for DPU Task */
  dpuEnableTaskDebug(task);

  /* Run DPU Task */
  runModel(task);

  /* Destroy DPU Tasks & free resources */
  dpuDestroyTask(task);

  /* Destroy DPU Kernels & free resources */
  dpuDestroyKernel(kernel);

  /* Dettach from DPU device */
  dpuClose();

  return 0;
}


