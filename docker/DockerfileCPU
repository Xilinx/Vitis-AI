# docker build . --buildarg VERSION=1.0.1 -t
FROM ubuntu:18.04
env DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]
# RUN apt-get install timezone
ENV TZ=America/Denver
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
ENV VAI_ROOT=/opt/vitis_ai
ARG VERSION
ENV VERSION=$VERSION
ENV PYTHONPATH=/opt/vitis_ai/compiler
ENV DATE=$(date)

# 1_Dockerfile.apt
RUN apt-get update -y && apt-get install -y --no-install-recommends \
        sudo \
        git \
        zstd \
        tree \
        vim \
        wget \
        bzip2 \
        ca-certificates \
        curl \
        unzip \
        python3-minimal \
        python3-opencv \
        python3-venv \
        python3-pip \
        python3-setuptools \
        g++ \
        make \
        cmake \
        automake \
        build-essential \
        autoconf \
        libgoogle-glog-dev \
        libgflags-dev \
        libunwind-dev \
        libtool\
        openssh-client \
        libgtk2.0-dev \
        libavcodec-dev \
        libavformat-dev \
        libavdevice-dev \
        libjson-c-dev

RUN apt-get -y install libgtest-dev; cd /usr/src/gtest;mkdir build;cd build && cmake .. &&make && make install

# 2_Dockerfile.pip3
RUN pip3 install \
        Flask \
        setuptools \
        wheel

#install XRT
RUN cd /tmp/ &&  wget -O xrt.deb  https://www.xilinx.com/bin/public/openDownload?filename=xrt_202010.2.6.655_18.04-amd64-xrt.deb && sudo apt-get update &&  apt-get install -y /tmp/xrt.deb && rm -fr /tmp/* &&  rm -rf /var/lib/apt/lists/*


RUN cd /tmp/ && wget -O glog.0.4.0.tar.gz https://codeload.github.com/google/glog/tar.gz/v0.4.0 && \
    tar -xvf  glog.0.4.0.tar.gz && cd /tmp/glog-0.4.0 &&  ./autogen.sh && \
    mkdir build  && cd build && cmake -DBUILD_SHARED_LIBS=ON ..&& make -j 12&& make install && rm -fr /tmp/*
RUN cd /tmp ; wget https://codeload.github.com/google/protobuf/zip/v3.4.0 && \
    unzip v3.4.0 && cd protobuf-3.4.0 && ./autogen.sh && ./configure && make -j 12 &&  make install && ldconfig  && \
    cd /tmp; wget https://github.com/opencv/opencv/archive/3.4.0.tar.gz && tar -xvf 3.4.0.tar.gz && \
    cd opencv-3.4.0 && mkdir build  && cd build && cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local  -D WITH_FFMPEG=ON -D WITH_TBB=ON -D WITH_GTK=ON -D WITH_V4L=ON -D WITH_OPENGL=ON -D WITH_CUBLAS=ON -DWITH_QT=OFF -DCUDA_NVCC_FLAGS="-D_FORCE_INLINES" .. && make -j 12&& make install && ldconfig && rm -fr /tmp/*

RUN cd /tmp && wget http://launchpadlibrarian.net/436533799/libjson-c4_0.13.1+dfsg-4_amd64.deb &&\
     dpkg -i libjson-c4_0.13.1+dfsg-4_amd64.deb && rm -fr /tmp/*


ENV PATH="${VAI_ROOT}/utility:${PATH}"

#  4_Dockerfile.conda
ENV MY_CONDA_CHANNEL="file:///scratch/conda-channel"

RUN mkdir -p /scratch && wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /scratch/miniconda.sh && \
        /bin/bash /scratch/miniconda.sh -b -p $VAI_ROOT/conda && \
        ln -s $VAI_ROOT/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
        echo ". $VAI_ROOT/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
        echo "conda activate base" >> ~/.bashrc

ADD ./conda_requirements.txt /scratch/
ADD ./conda_requirements_neptune.txt /scratch/
ADD ./pip_requirements.txt /scratch/
ADD ./pip_requirements_neptune.txt /scratch/

#hack to re-do the layer
ARG CACHEBUST=1

RUN cd /scratch/ && \
    wget -O conda-channel.tar.gz  https://www.xilinx.com/bin/public/openDownload?filename=conda-channel_1.2.tar.gz && \
    tar -xzvf conda-channel.tar.gz && \
    source $VAI_ROOT/conda/etc/profile.d/conda.sh && \
    conda create -n vitis-ai-caffe \
        python=3.6 caffe_decent \
        --file /scratch/conda_requirements.txt \
        -c $MY_CONDA_CHANNEL -c defaults -c conda-forge/label/gcc7 && \
        conda activate vitis-ai-caffe && pip install -r /scratch/pip_requirements.txt && \
        conda create -n vitis-ai-tensorflow \
        python=3.6 vai_q_tensorflow keras \
        --file /scratch/conda_requirements.txt \
        -c $MY_CONDA_CHANNEL -c defaults -c conda-forge/label/gcc7 && \
        conda activate vitis-ai-tensorflow && pip install -r /scratch/pip_requirements.txt && \
        conda create -n vitis-ai-neptune \
        python=3.6 \
        --file /scratch/conda_requirements_neptune.txt \
        -c $MY_CONDA_CHANNEL -c defaults -c conda-forge/label/gcc7 -c conda-forge && \
        conda activate vitis-ai-neptune && pip install -r /scratch/pip_requirements_neptune.txt &&\
        mkdir -p $VAI_ROOT/compiler &&    ln -s /opt/vitis_ai/conda/envs/vitis-ai-tensorflow/lib/python3.6/site-packages/vaic/arch /opt/vitis_ai/compiler/arch && rm -fr /scratch/*



#hack to re-do the layer
ARG CACHEBUST=1
RUN cd /tmp/ && \
         wget -O libunilog.deb https://www.xilinx.com/bin/public/openDownload?filename=libunilog_1.2.0-r10_amd64.deb && \
        wget -O libtarget-factory.deb https://www.xilinx.com/bin/public/openDownload?filename=libtarget-factory_1.2.0-r10_amd64.deb && \
        wget -O libxir.deb  https://www.xilinx.com/bin/public/openDownload?filename=libxir_1.2.0-r12_amd64.deb && \
        wget -O libvart.deb https://www.xilinx.com/bin/public/openDownload?filename=libvart_1.2.0-r16_amd64.deb && \
        wget -O libvitis_ai_library.deb https://www.xilinx.com/bin/public/openDownload?filename=libvitis_ai_library_1.2.0-r15_amd64.deb && \
	apt-get install -y --no-install-recommends /tmp/*.deb && \
	rm /tmp/*.deb && \
	sudo ldconfig && rm -rf /var/lib/apt/lists/* /scratch/* 



ADD ./login.sh /etc/
ENTRYPOINT ["/etc/login.sh"]

ADD ./banner.sh /etc/
