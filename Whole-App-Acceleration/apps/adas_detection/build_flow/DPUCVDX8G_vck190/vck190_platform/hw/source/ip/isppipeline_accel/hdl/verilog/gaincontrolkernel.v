// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gaincontrolkernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src1_data_V_V_dout,
        src1_data_V_V_empty_n,
        src1_data_V_V_read,
        dst_data_V_V_din,
        dst_data_V_V_full_n,
        dst_data_V_V_write,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] src1_data_V_V_dout;
input   src1_data_V_V_empty_n;
output   src1_data_V_V_read;
output  [39:0] dst_data_V_V_din;
input   dst_data_V_V_full_n;
output   dst_data_V_V_write;
input  [15:0] height;
input  [13:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src1_data_V_V_read;
reg dst_data_V_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src1_data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln85_reg_399;
reg    dst_data_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln85_reg_399_pp0_iter2_reg;
reg   [13:0] t_V_2_reg_124;
wire   [0:0] trunc_ln1597_fu_135_p1;
reg   [0:0] trunc_ln1597_reg_382;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_fu_143_p2;
wire   [12:0] i_V_fu_148_p2;
reg   [12:0] i_V_reg_394;
wire   [0:0] icmp_ln85_fu_154_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln85_reg_399_pp0_iter1_reg;
wire   [13:0] add_ln1597_fu_159_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] trunc_ln647_fu_165_p1;
reg   [9:0] trunc_ln647_reg_408;
reg   [9:0] p_Result_1_reg_414;
reg   [9:0] p_Result_2_reg_420;
reg   [9:0] p_Result_3_reg_426;
wire   [9:0] select_ln1597_fu_226_p3;
reg   [9:0] select_ln1597_reg_432;
wire   [9:0] select_ln1597_1_fu_259_p3;
reg   [9:0] select_ln1597_1_reg_437;
wire   [9:0] select_ln1597_2_fu_292_p3;
reg   [9:0] select_ln1597_2_reg_442;
wire   [9:0] select_ln1597_3_fu_325_p3;
reg   [9:0] select_ln1597_3_reg_447;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [12:0] t_V_reg_113;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln887_fu_139_p1;
wire   [17:0] mul_ln1503_fu_340_p2;
wire   [0:0] tmp_138_fu_202_p3;
wire   [9:0] trunc_ln7_fu_209_p4;
wire   [9:0] select_ln53_fu_218_p3;
wire   [17:0] mul_ln1503_1_fu_348_p2;
wire   [0:0] tmp_139_fu_235_p3;
wire   [9:0] trunc_ln53_1_fu_242_p4;
wire   [9:0] select_ln53_1_fu_251_p3;
wire   [17:0] mul_ln1503_2_fu_356_p2;
wire   [0:0] tmp_140_fu_268_p3;
wire   [9:0] trunc_ln53_2_fu_275_p4;
wire   [9:0] select_ln53_2_fu_284_p3;
wire   [17:0] mul_ln1503_3_fu_364_p2;
wire   [0:0] tmp_141_fu_301_p3;
wire   [9:0] trunc_ln53_3_fu_308_p4;
wire   [9:0] select_ln53_3_fu_317_p3;
wire   [8:0] mul_ln1503_fu_340_p0;
wire   [9:0] mul_ln1503_fu_340_p1;
wire   [8:0] mul_ln1503_1_fu_348_p0;
wire   [9:0] mul_ln1503_1_fu_348_p1;
wire   [8:0] mul_ln1503_2_fu_356_p0;
wire   [9:0] mul_ln1503_2_fu_356_p1;
wire   [8:0] mul_ln1503_3_fu_364_p0;
wire   [9:0] mul_ln1503_3_fu_364_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [17:0] mul_ln1503_1_fu_348_p10;
wire   [17:0] mul_ln1503_2_fu_356_p10;
wire   [17:0] mul_ln1503_3_fu_364_p10;
wire   [17:0] mul_ln1503_fu_340_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ISPPipeline_acceljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 18 ))
ISPPipeline_acceljbC_U89(
    .din0(mul_ln1503_fu_340_p0),
    .din1(mul_ln1503_fu_340_p1),
    .dout(mul_ln1503_fu_340_p2)
);

ISPPipeline_acceljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 18 ))
ISPPipeline_acceljbC_U90(
    .din0(mul_ln1503_1_fu_348_p0),
    .din1(mul_ln1503_1_fu_348_p1),
    .dout(mul_ln1503_1_fu_348_p2)
);

ISPPipeline_acceljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 18 ))
ISPPipeline_acceljbC_U91(
    .din0(mul_ln1503_2_fu_356_p0),
    .din1(mul_ln1503_2_fu_356_p1),
    .dout(mul_ln1503_2_fu_356_p2)
);

ISPPipeline_acceljbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 18 ))
ISPPipeline_acceljbC_U92(
    .din0(mul_ln1503_3_fu_364_p0),
    .din1(mul_ln1503_3_fu_364_p1),
    .dout(mul_ln1503_3_fu_364_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln887_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln887_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_2_reg_124 <= add_ln1597_fu_159_p2;
    end else if (((icmp_ln887_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_124 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_113 <= i_V_reg_394;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_113 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_394 <= i_V_fu_148_p2;
        trunc_ln1597_reg_382 <= trunc_ln1597_fu_135_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln85_reg_399 <= icmp_ln85_fu_154_p2;
        icmp_ln85_reg_399_pp0_iter1_reg <= icmp_ln85_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln85_reg_399_pp0_iter2_reg <= icmp_ln85_reg_399_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_399 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_1_reg_414 <= {{src1_data_V_V_dout[19:10]}};
        p_Result_2_reg_420 <= {{src1_data_V_V_dout[29:20]}};
        p_Result_3_reg_426 <= {{src1_data_V_V_dout[39:30]}};
        trunc_ln647_reg_408 <= trunc_ln647_fu_165_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_399_pp0_iter1_reg == 1'd0))) begin
        select_ln1597_1_reg_437 <= select_ln1597_1_fu_259_p3;
        select_ln1597_2_reg_442 <= select_ln1597_2_fu_292_p3;
        select_ln1597_3_reg_447 <= select_ln1597_3_fu_325_p3;
        select_ln1597_reg_432 <= select_ln1597_fu_226_p3;
    end
end

always @ (*) begin
    if ((icmp_ln85_fu_154_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln887_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_V_V_blk_n = dst_data_V_V_full_n;
    end else begin
        dst_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_V_V_write = 1'b1;
    end else begin
        dst_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_reg_399 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_V_V_blk_n = src1_data_V_V_empty_n;
    end else begin
        src1_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln85_reg_399 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src1_data_V_V_read = 1'b1;
    end else begin
        src1_data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln85_fu_154_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln85_fu_154_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1597_fu_159_p2 = (t_V_2_reg_124 + 14'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln85_reg_399 == 1'd0) & (src1_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln85_reg_399 == 1'd0) & (src1_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln85_reg_399 == 1'd0) & (src1_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln85_reg_399 == 1'd0) & (src1_data_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((icmp_ln85_reg_399_pp0_iter2_reg == 1'd0) & (dst_data_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_data_V_V_din = {{{{select_ln1597_3_reg_447}, {select_ln1597_2_reg_442}}, {select_ln1597_1_reg_437}}, {select_ln1597_reg_432}};

assign i_V_fu_148_p2 = (13'd1 + t_V_reg_113);

assign icmp_ln85_fu_154_p2 = ((t_V_2_reg_124 == width) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_143_p2 = ((zext_ln887_fu_139_p1 < height) ? 1'b1 : 1'b0);

assign mul_ln1503_1_fu_348_p0 = 18'd140;

assign mul_ln1503_1_fu_348_p1 = mul_ln1503_1_fu_348_p10;

assign mul_ln1503_1_fu_348_p10 = p_Result_1_reg_414;

assign mul_ln1503_2_fu_356_p0 = 18'd157;

assign mul_ln1503_2_fu_356_p1 = mul_ln1503_2_fu_356_p10;

assign mul_ln1503_2_fu_356_p10 = p_Result_2_reg_420;

assign mul_ln1503_3_fu_364_p0 = 18'd140;

assign mul_ln1503_3_fu_364_p1 = mul_ln1503_3_fu_364_p10;

assign mul_ln1503_3_fu_364_p10 = p_Result_3_reg_426;

assign mul_ln1503_fu_340_p0 = 18'd157;

assign mul_ln1503_fu_340_p1 = mul_ln1503_fu_340_p10;

assign mul_ln1503_fu_340_p10 = trunc_ln647_reg_408;

assign select_ln1597_1_fu_259_p3 = ((trunc_ln1597_reg_382[0:0] === 1'b1) ? select_ln53_1_fu_251_p3 : p_Result_1_reg_414);

assign select_ln1597_2_fu_292_p3 = ((trunc_ln1597_reg_382[0:0] === 1'b1) ? p_Result_2_reg_420 : select_ln53_2_fu_284_p3);

assign select_ln1597_3_fu_325_p3 = ((trunc_ln1597_reg_382[0:0] === 1'b1) ? select_ln53_3_fu_317_p3 : p_Result_3_reg_426);

assign select_ln1597_fu_226_p3 = ((trunc_ln1597_reg_382[0:0] === 1'b1) ? trunc_ln647_reg_408 : select_ln53_fu_218_p3);

assign select_ln53_1_fu_251_p3 = ((tmp_139_fu_235_p3[0:0] === 1'b1) ? 10'd1023 : trunc_ln53_1_fu_242_p4);

assign select_ln53_2_fu_284_p3 = ((tmp_140_fu_268_p3[0:0] === 1'b1) ? 10'd1023 : trunc_ln53_2_fu_275_p4);

assign select_ln53_3_fu_317_p3 = ((tmp_141_fu_301_p3[0:0] === 1'b1) ? 10'd1023 : trunc_ln53_3_fu_308_p4);

assign select_ln53_fu_218_p3 = ((tmp_138_fu_202_p3[0:0] === 1'b1) ? 10'd1023 : trunc_ln7_fu_209_p4);

assign tmp_138_fu_202_p3 = mul_ln1503_fu_340_p2[32'd17];

assign tmp_139_fu_235_p3 = mul_ln1503_1_fu_348_p2[32'd17];

assign tmp_140_fu_268_p3 = mul_ln1503_2_fu_356_p2[32'd17];

assign tmp_141_fu_301_p3 = mul_ln1503_3_fu_364_p2[32'd17];

assign trunc_ln1597_fu_135_p1 = t_V_reg_113[0:0];

assign trunc_ln53_1_fu_242_p4 = {{mul_ln1503_1_fu_348_p2[16:7]}};

assign trunc_ln53_2_fu_275_p4 = {{mul_ln1503_2_fu_356_p2[16:7]}};

assign trunc_ln53_3_fu_308_p4 = {{mul_ln1503_3_fu_364_p2[16:7]}};

assign trunc_ln647_fu_165_p1 = src1_data_V_V_dout[9:0];

assign trunc_ln7_fu_209_p4 = {{mul_ln1503_fu_340_p2[16:7]}};

assign zext_ln887_fu_139_p1 = t_V_reg_113;

endmodule //gaincontrolkernel
