// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.2
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blackLevelCorrection (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_Src_rows_dout,
        p_Src_rows_empty_n,
        p_Src_rows_read,
        p_Src_cols_dout,
        p_Src_cols_empty_n,
        p_Src_cols_read,
        p_Src_data_V_V_dout,
        p_Src_data_V_V_empty_n,
        p_Src_data_V_V_read,
        p_Dst_data_V_V_din,
        p_Dst_data_V_V_full_n,
        p_Dst_data_V_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_Src_rows_dout;
input   p_Src_rows_empty_n;
output   p_Src_rows_read;
input  [15:0] p_Src_cols_dout;
input   p_Src_cols_empty_n;
output   p_Src_cols_read;
input  [39:0] p_Src_data_V_V_dout;
input   p_Src_data_V_V_empty_n;
output   p_Src_data_V_V_read;
output  [39:0] p_Dst_data_V_V_din;
input   p_Dst_data_V_V_full_n;
output   p_Dst_data_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_Src_rows_read;
reg p_Src_cols_read;
reg p_Src_data_V_V_read;
reg p_Dst_data_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_Src_rows_blk_n;
reg    p_Src_cols_blk_n;
reg    p_Src_data_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln69_reg_543;
reg    p_Dst_data_V_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln69_reg_543_pp0_iter2_reg;
reg   [29:0] rw_ptr_0_i_reg_121;
reg   [15:0] p_Src_rows_read_reg_528;
reg    ap_block_state1;
reg   [13:0] lshr_ln_reg_533;
wire   [29:0] mul_ln59_fu_494_p2;
reg   [29:0] mul_ln59_reg_538;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln69_fu_148_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln69_reg_543_pp0_iter1_reg;
wire   [29:0] rw_ptr_fu_153_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] add_ln1354_fu_167_p2;
reg   [10:0] add_ln1354_reg_552;
wire   [0:0] icmp_ln887_fu_183_p2;
reg   [0:0] icmp_ln887_reg_557;
wire   [10:0] add_ln1354_1_fu_203_p2;
reg   [10:0] add_ln1354_1_reg_562;
wire   [0:0] icmp_ln887_32_fu_219_p2;
reg   [0:0] icmp_ln887_32_reg_567;
wire   [10:0] add_ln1354_2_fu_239_p2;
reg   [10:0] add_ln1354_2_reg_572;
wire   [0:0] icmp_ln887_33_fu_255_p2;
reg   [0:0] icmp_ln887_33_reg_577;
wire   [10:0] add_ln1354_3_fu_275_p2;
reg   [10:0] add_ln1354_3_reg_582;
wire   [0:0] icmp_ln887_34_fu_291_p2;
reg   [0:0] icmp_ln887_34_reg_587;
wire   [9:0] select_ln301_fu_336_p3;
reg   [9:0] select_ln301_reg_592;
wire   [9:0] select_ln301_12_fu_383_p3;
reg   [9:0] select_ln301_12_reg_597;
wire   [9:0] select_ln301_13_fu_430_p3;
reg   [9:0] select_ln301_13_reg_602;
wire   [9:0] select_ln301_14_fu_477_p3;
reg   [9:0] select_ln301_14_reg_607;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln647_fu_159_p1;
wire   [10:0] zext_ln215_fu_163_p1;
wire   [4:0] tmp_156_fu_173_p4;
wire   [9:0] p_Result_78_1_i_fu_189_p4;
wire   [10:0] zext_ln215_30_fu_199_p1;
wire   [4:0] tmp_158_fu_209_p4;
wire   [9:0] p_Result_78_2_i_fu_225_p4;
wire   [10:0] zext_ln215_31_fu_235_p1;
wire   [4:0] tmp_160_fu_245_p4;
wire   [9:0] p_Result_78_3_i_fu_261_p4;
wire   [10:0] zext_ln215_32_fu_271_p1;
wire   [4:0] tmp_162_fu_281_p4;
wire   [27:0] mul_ln1118_fu_500_p2;
wire   [12:0] tmp_fu_300_p4;
wire   [12:0] select_ln887_fu_309_p3;
wire   [2:0] tmp_157_fu_316_p4;
wire   [0:0] icmp_ln23_fu_326_p2;
wire   [9:0] trunc_ln301_fu_332_p1;
wire   [27:0] mul_ln1118_32_fu_507_p2;
wire   [12:0] tmp_s_fu_347_p4;
wire   [12:0] select_ln887_4_fu_356_p3;
wire   [2:0] tmp_159_fu_363_p4;
wire   [0:0] icmp_ln23_1_fu_373_p2;
wire   [9:0] trunc_ln301_12_fu_379_p1;
wire   [27:0] mul_ln1118_33_fu_514_p2;
wire   [12:0] tmp_75_fu_394_p4;
wire   [12:0] select_ln887_5_fu_403_p3;
wire   [2:0] tmp_161_fu_410_p4;
wire   [0:0] icmp_ln23_2_fu_420_p2;
wire   [9:0] trunc_ln301_13_fu_426_p1;
wire   [27:0] mul_ln1118_34_fu_521_p2;
wire   [12:0] tmp_76_fu_441_p4;
wire   [12:0] select_ln887_6_fu_450_p3;
wire   [2:0] tmp_163_fu_457_p4;
wire   [0:0] icmp_ln23_3_fu_467_p2;
wire   [9:0] trunc_ln301_14_fu_473_p1;
wire   [13:0] mul_ln59_fu_494_p0;
wire   [15:0] mul_ln59_fu_494_p1;
wire   [16:0] mul_ln1118_fu_500_p0;
wire   [10:0] mul_ln1118_fu_500_p1;
wire   [16:0] mul_ln1118_32_fu_507_p0;
wire   [10:0] mul_ln1118_32_fu_507_p1;
wire   [16:0] mul_ln1118_33_fu_514_p0;
wire   [10:0] mul_ln1118_33_fu_514_p1;
wire   [16:0] mul_ln1118_34_fu_521_p0;
wire   [10:0] mul_ln1118_34_fu_521_p1;
wire    ap_CS_fsm_state7;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [27:0] mul_ln1118_32_fu_507_p10;
wire   [27:0] mul_ln1118_33_fu_514_p10;
wire   [27:0] mul_ln1118_34_fu_521_p10;
wire   [27:0] mul_ln1118_fu_500_p10;
wire   [29:0] mul_ln59_fu_494_p00;
wire   [29:0] mul_ln59_fu_494_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ISPPipeline_accelbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
ISPPipeline_accelbkb_U31(
    .din0(mul_ln59_fu_494_p0),
    .din1(mul_ln59_fu_494_p1),
    .dout(mul_ln59_fu_494_p2)
);

ISPPipeline_accelcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
ISPPipeline_accelcud_U32(
    .din0(mul_ln1118_fu_500_p0),
    .din1(mul_ln1118_fu_500_p1),
    .dout(mul_ln1118_fu_500_p2)
);

ISPPipeline_accelcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
ISPPipeline_accelcud_U33(
    .din0(mul_ln1118_32_fu_507_p0),
    .din1(mul_ln1118_32_fu_507_p1),
    .dout(mul_ln1118_32_fu_507_p2)
);

ISPPipeline_accelcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
ISPPipeline_accelcud_U34(
    .din0(mul_ln1118_33_fu_514_p0),
    .din1(mul_ln1118_33_fu_514_p1),
    .dout(mul_ln1118_33_fu_514_p2)
);

ISPPipeline_accelcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 28 ))
ISPPipeline_accelcud_U35(
    .din0(mul_ln1118_34_fu_521_p0),
    .din1(mul_ln1118_34_fu_521_p1),
    .dout(mul_ln1118_34_fu_521_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_148_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rw_ptr_0_i_reg_121 <= rw_ptr_fu_153_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        rw_ptr_0_i_reg_121 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln1354_1_reg_562 <= add_ln1354_1_fu_203_p2;
        add_ln1354_2_reg_572 <= add_ln1354_2_fu_239_p2;
        add_ln1354_3_reg_582 <= add_ln1354_3_fu_275_p2;
        add_ln1354_reg_552 <= add_ln1354_fu_167_p2;
        icmp_ln887_32_reg_567 <= icmp_ln887_32_fu_219_p2;
        icmp_ln887_33_reg_577 <= icmp_ln887_33_fu_255_p2;
        icmp_ln887_34_reg_587 <= icmp_ln887_34_fu_291_p2;
        icmp_ln887_reg_557 <= icmp_ln887_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln69_reg_543 <= icmp_ln69_fu_148_p2;
        icmp_ln69_reg_543_pp0_iter1_reg <= icmp_ln69_reg_543;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln69_reg_543_pp0_iter2_reg <= icmp_ln69_reg_543_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_Src_cols_empty_n == 1'b0) | (p_Src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        lshr_ln_reg_533 <= {{p_Src_cols_dout[15:2]}};
        p_Src_rows_read_reg_528 <= p_Src_rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln59_reg_538 <= mul_ln59_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_reg_543_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln301_12_reg_597 <= select_ln301_12_fu_383_p3;
        select_ln301_13_reg_602 <= select_ln301_13_fu_430_p3;
        select_ln301_14_reg_607 <= select_ln301_14_fu_477_p3;
        select_ln301_reg_592 <= select_ln301_fu_336_p3;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_148_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_Dst_data_V_V_blk_n = p_Dst_data_V_V_full_n;
    end else begin
        p_Dst_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Dst_data_V_V_write = 1'b1;
    end else begin
        p_Dst_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Src_cols_blk_n = p_Src_cols_empty_n;
    end else begin
        p_Src_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_Src_cols_empty_n == 1'b0) | (p_Src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Src_cols_read = 1'b1;
    end else begin
        p_Src_cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_543 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Src_data_V_V_blk_n = p_Src_data_V_V_empty_n;
    end else begin
        p_Src_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_543 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Src_data_V_V_read = 1'b1;
    end else begin
        p_Src_data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Src_rows_blk_n = p_Src_rows_empty_n;
    end else begin
        p_Src_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_Src_cols_empty_n == 1'b0) | (p_Src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Src_rows_read = 1'b1;
    end else begin
        p_Src_rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_Src_cols_empty_n == 1'b0) | (p_Src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln69_fu_148_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln69_fu_148_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1354_1_fu_203_p2 = ($signed(11'd2016) + $signed(zext_ln215_30_fu_199_p1));

assign add_ln1354_2_fu_239_p2 = ($signed(11'd2016) + $signed(zext_ln215_31_fu_235_p1));

assign add_ln1354_3_fu_275_p2 = ($signed(11'd2016) + $signed(zext_ln215_32_fu_271_p1));

assign add_ln1354_fu_167_p2 = ($signed(11'd2016) + $signed(zext_ln215_fu_163_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (p_Dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln69_reg_543 == 1'd0) & (p_Src_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (p_Dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln69_reg_543 == 1'd0) & (p_Src_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (p_Dst_data_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln69_reg_543 == 1'd0) & (p_Src_data_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_Src_cols_empty_n == 1'b0) | (p_Src_rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln69_reg_543 == 1'd0) & (p_Src_data_V_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((icmp_ln69_reg_543_pp0_iter2_reg == 1'd0) & (p_Dst_data_V_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln23_1_fu_373_p2 = ((tmp_159_fu_363_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_420_p2 = ((tmp_161_fu_410_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_467_p2 = ((tmp_163_fu_457_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_326_p2 = ((tmp_157_fu_316_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_148_p2 = ((rw_ptr_0_i_reg_121 == mul_ln59_reg_538) ? 1'b1 : 1'b0);

assign icmp_ln887_32_fu_219_p2 = ((tmp_158_fu_209_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_33_fu_255_p2 = ((tmp_160_fu_245_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_34_fu_291_p2 = ((tmp_162_fu_281_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_183_p2 = ((tmp_156_fu_173_p4 == 5'd0) ? 1'b1 : 1'b0);

assign mul_ln1118_32_fu_507_p0 = 28'd33826;

assign mul_ln1118_32_fu_507_p1 = mul_ln1118_32_fu_507_p10;

assign mul_ln1118_32_fu_507_p10 = add_ln1354_1_reg_562;

assign mul_ln1118_33_fu_514_p0 = 28'd33826;

assign mul_ln1118_33_fu_514_p1 = mul_ln1118_33_fu_514_p10;

assign mul_ln1118_33_fu_514_p10 = add_ln1354_2_reg_572;

assign mul_ln1118_34_fu_521_p0 = 28'd33826;

assign mul_ln1118_34_fu_521_p1 = mul_ln1118_34_fu_521_p10;

assign mul_ln1118_34_fu_521_p10 = add_ln1354_3_reg_582;

assign mul_ln1118_fu_500_p0 = 28'd33826;

assign mul_ln1118_fu_500_p1 = mul_ln1118_fu_500_p10;

assign mul_ln1118_fu_500_p10 = add_ln1354_reg_552;

assign mul_ln59_fu_494_p0 = mul_ln59_fu_494_p00;

assign mul_ln59_fu_494_p00 = lshr_ln_reg_533;

assign mul_ln59_fu_494_p1 = mul_ln59_fu_494_p10;

assign mul_ln59_fu_494_p10 = p_Src_rows_read_reg_528;

assign p_Dst_data_V_V_din = {{{{select_ln301_14_reg_607}, {select_ln301_13_reg_602}}, {select_ln301_12_reg_597}}, {select_ln301_reg_592}};

assign p_Result_78_1_i_fu_189_p4 = {{p_Src_data_V_V_dout[19:10]}};

assign p_Result_78_2_i_fu_225_p4 = {{p_Src_data_V_V_dout[29:20]}};

assign p_Result_78_3_i_fu_261_p4 = {{p_Src_data_V_V_dout[39:30]}};

assign rw_ptr_fu_153_p2 = (rw_ptr_0_i_reg_121 + 30'd1);

assign select_ln301_12_fu_383_p3 = ((icmp_ln23_1_fu_373_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln301_12_fu_379_p1);

assign select_ln301_13_fu_430_p3 = ((icmp_ln23_2_fu_420_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln301_13_fu_426_p1);

assign select_ln301_14_fu_477_p3 = ((icmp_ln23_3_fu_467_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln301_14_fu_473_p1);

assign select_ln301_fu_336_p3 = ((icmp_ln23_fu_326_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln301_fu_332_p1);

assign select_ln887_4_fu_356_p3 = ((icmp_ln887_32_reg_567[0:0] === 1'b1) ? 13'd0 : tmp_s_fu_347_p4);

assign select_ln887_5_fu_403_p3 = ((icmp_ln887_33_reg_577[0:0] === 1'b1) ? 13'd0 : tmp_75_fu_394_p4);

assign select_ln887_6_fu_450_p3 = ((icmp_ln887_34_reg_587[0:0] === 1'b1) ? 13'd0 : tmp_76_fu_441_p4);

assign select_ln887_fu_309_p3 = ((icmp_ln887_reg_557[0:0] === 1'b1) ? 13'd0 : tmp_fu_300_p4);

assign tmp_156_fu_173_p4 = {{p_Src_data_V_V_dout[9:5]}};

assign tmp_157_fu_316_p4 = {{select_ln887_fu_309_p3[12:10]}};

assign tmp_158_fu_209_p4 = {{p_Src_data_V_V_dout[19:15]}};

assign tmp_159_fu_363_p4 = {{select_ln887_4_fu_356_p3[12:10]}};

assign tmp_160_fu_245_p4 = {{p_Src_data_V_V_dout[29:25]}};

assign tmp_161_fu_410_p4 = {{select_ln887_5_fu_403_p3[12:10]}};

assign tmp_162_fu_281_p4 = {{p_Src_data_V_V_dout[39:35]}};

assign tmp_163_fu_457_p4 = {{select_ln887_6_fu_450_p3[12:10]}};

assign tmp_75_fu_394_p4 = {{mul_ln1118_33_fu_514_p2[27:15]}};

assign tmp_76_fu_441_p4 = {{mul_ln1118_34_fu_521_p2[27:15]}};

assign tmp_fu_300_p4 = {{mul_ln1118_fu_500_p2[27:15]}};

assign tmp_s_fu_347_p4 = {{mul_ln1118_32_fu_507_p2[27:15]}};

assign trunc_ln301_12_fu_379_p1 = select_ln887_4_fu_356_p3[9:0];

assign trunc_ln301_13_fu_426_p1 = select_ln887_5_fu_403_p3[9:0];

assign trunc_ln301_14_fu_473_p1 = select_ln887_6_fu_450_p3[9:0];

assign trunc_ln301_fu_332_p1 = select_ln887_fu_309_p3[9:0];

assign trunc_ln647_fu_159_p1 = p_Src_data_V_V_dout[9:0];

assign zext_ln215_30_fu_199_p1 = p_Result_78_1_i_fu_189_p4;

assign zext_ln215_31_fu_235_p1 = p_Result_78_2_i_fu_225_p4;

assign zext_ln215_32_fu_271_p1 = p_Result_78_3_i_fu_261_p4;

assign zext_ln215_fu_163_p1 = trunc_ln647_fu_159_p1;

endmodule //blackLevelCorrection
