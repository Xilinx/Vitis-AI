-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.2
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rb_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    imgblock_0_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_6_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_7_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_8_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_0_9_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_6_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_7_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_8_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_1_9_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_6_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_7_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_8_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_2_9_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_6_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_7_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_8_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_3_9_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_0_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_1_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_2_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_3_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_4_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_5_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_6_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_7_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_8_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    imgblock_4_9_V_read : IN STD_LOGIC_VECTOR (9 downto 0);
    loop_r : IN STD_LOGIC_VECTOR (1 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of rb_kernel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_FFFFFFF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ret_V_9_fu_628_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_9_reg_998 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ret_V_11_fu_794_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_11_reg_1004 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_11_reg_1004_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_fu_800_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_reg_1009 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_reg_1009_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_1015 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln80_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln80_reg_1020 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln81_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_1027 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln215_fu_462_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln215_fu_466_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln215_27_fu_472_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_476_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_506_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_506_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_fu_502_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln_fu_546_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_56_fu_558_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_56_fu_558_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_fu_588_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1353_fu_614_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln215_32_fu_584_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_618_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_7_fu_542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1353_32_fu_624_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln215_5_fu_634_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln215_33_fu_640_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_644_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln215_6_fu_674_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln215_35_fu_680_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_58_fu_684_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_8_fu_670_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_5_fu_710_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_10_fu_714_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_fu_724_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_fu_754_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1353_33_fu_780_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln215_38_fu_750_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_16_fu_784_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal lhs_V_9_fu_720_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1353_34_fu_790_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln_fu_829_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln75_fu_836_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln74_fu_826_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln75_fu_840_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln75_fu_856_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal t2_fu_863_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1_fu_874_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln78_1_fu_885_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln78_fu_881_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln78_1_fu_892_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal t3_fu_896_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln77_fu_870_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln79_fu_906_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln78_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln79_fu_916_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln79_fu_912_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln80_fu_945_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_950_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln80_fu_960_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_fu_970_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_137_fu_938_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln80_1_fu_964_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln80_1_fu_979_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln80_fu_983_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal imgblock_0_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_6_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_7_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_8_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_0_9_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_6_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_7_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_8_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_1_9_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_6_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_7_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_8_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_2_9_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_6_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_7_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_8_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_3_9_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_0_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_1_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_2_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_3_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_4_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_5_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_6_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_7_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_8_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal imgblock_4_9_V_read_int_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_r_int_reg : STD_LOGIC_VECTOR (1 downto 0);

    component ISPPipeline_accelkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (9 downto 0);
        din7 : IN STD_LOGIC_VECTOR (9 downto 0);
        din8 : IN STD_LOGIC_VECTOR (9 downto 0);
        din9 : IN STD_LOGIC_VECTOR (9 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    ISPPipeline_accelkbM_U102 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_0_0_V_read_int_reg,
        din1 => imgblock_0_1_V_read_int_reg,
        din2 => imgblock_0_2_V_read_int_reg,
        din3 => imgblock_0_3_V_read_int_reg,
        din4 => imgblock_0_4_V_read_int_reg,
        din5 => imgblock_0_5_V_read_int_reg,
        din6 => imgblock_0_6_V_read_int_reg,
        din7 => imgblock_0_7_V_read_int_reg,
        din8 => imgblock_0_8_V_read_int_reg,
        din9 => imgblock_0_9_V_read_int_reg,
        din10 => zext_ln215_27_fu_472_p1,
        dout => tmp_s_fu_476_p12);

    ISPPipeline_accelkbM_U103 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => imgblock_2_6_V_read_int_reg,
        din7 => imgblock_2_7_V_read_int_reg,
        din8 => imgblock_2_8_V_read_int_reg,
        din9 => imgblock_2_9_V_read_int_reg,
        din10 => tmp_55_fu_506_p11,
        dout => tmp_55_fu_506_p12);

    ISPPipeline_accelkbM_U104 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => imgblock_2_6_V_read_int_reg,
        din7 => imgblock_2_7_V_read_int_reg,
        din8 => imgblock_2_8_V_read_int_reg,
        din9 => imgblock_2_9_V_read_int_reg,
        din10 => tmp_56_fu_558_p11,
        dout => tmp_56_fu_558_p12);

    ISPPipeline_accelkbM_U105 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_4_0_V_read_int_reg,
        din1 => imgblock_4_1_V_read_int_reg,
        din2 => imgblock_4_2_V_read_int_reg,
        din3 => imgblock_4_3_V_read_int_reg,
        din4 => imgblock_4_4_V_read_int_reg,
        din5 => imgblock_4_5_V_read_int_reg,
        din6 => imgblock_4_6_V_read_int_reg,
        din7 => imgblock_4_7_V_read_int_reg,
        din8 => imgblock_4_8_V_read_int_reg,
        din9 => imgblock_4_9_V_read_int_reg,
        din10 => zext_ln215_27_fu_472_p1,
        dout => tmp_57_fu_588_p12);

    ISPPipeline_accelkbM_U106 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => imgblock_1_6_V_read_int_reg,
        din7 => imgblock_1_7_V_read_int_reg,
        din8 => imgblock_1_8_V_read_int_reg,
        din9 => imgblock_1_9_V_read_int_reg,
        din10 => zext_ln215_33_fu_640_p1,
        dout => tmp_fu_644_p12);

    ISPPipeline_accelkbM_U107 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_1_0_V_read_int_reg,
        din1 => imgblock_1_1_V_read_int_reg,
        din2 => imgblock_1_2_V_read_int_reg,
        din3 => imgblock_1_3_V_read_int_reg,
        din4 => imgblock_1_4_V_read_int_reg,
        din5 => imgblock_1_5_V_read_int_reg,
        din6 => imgblock_1_6_V_read_int_reg,
        din7 => imgblock_1_7_V_read_int_reg,
        din8 => imgblock_1_8_V_read_int_reg,
        din9 => imgblock_1_9_V_read_int_reg,
        din10 => zext_ln215_35_fu_680_p1,
        dout => tmp_58_fu_684_p12);

    ISPPipeline_accelkbM_U108 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => imgblock_3_6_V_read_int_reg,
        din7 => imgblock_3_7_V_read_int_reg,
        din8 => imgblock_3_8_V_read_int_reg,
        din9 => imgblock_3_9_V_read_int_reg,
        din10 => zext_ln215_33_fu_640_p1,
        dout => tmp_59_fu_724_p12);

    ISPPipeline_accelkbM_U109 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_3_0_V_read_int_reg,
        din1 => imgblock_3_1_V_read_int_reg,
        din2 => imgblock_3_2_V_read_int_reg,
        din3 => imgblock_3_3_V_read_int_reg,
        din4 => imgblock_3_4_V_read_int_reg,
        din5 => imgblock_3_5_V_read_int_reg,
        din6 => imgblock_3_6_V_read_int_reg,
        din7 => imgblock_3_7_V_read_int_reg,
        din8 => imgblock_3_8_V_read_int_reg,
        din9 => imgblock_3_9_V_read_int_reg,
        din10 => zext_ln215_35_fu_680_p1,
        dout => tmp_60_fu_754_p12);

    ISPPipeline_accelkbM_U110 : component ISPPipeline_accelkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 10,
        din4_WIDTH => 10,
        din5_WIDTH => 10,
        din6_WIDTH => 10,
        din7_WIDTH => 10,
        din8_WIDTH => 10,
        din9_WIDTH => 10,
        din10_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => imgblock_2_0_V_read_int_reg,
        din1 => imgblock_2_1_V_read_int_reg,
        din2 => imgblock_2_2_V_read_int_reg,
        din3 => imgblock_2_3_V_read_int_reg,
        din4 => imgblock_2_4_V_read_int_reg,
        din5 => imgblock_2_5_V_read_int_reg,
        din6 => imgblock_2_6_V_read_int_reg,
        din7 => imgblock_2_7_V_read_int_reg,
        din8 => imgblock_2_8_V_read_int_reg,
        din9 => imgblock_2_9_V_read_int_reg,
        din10 => zext_ln215_27_fu_472_p1,
        dout => tmp_61_fu_800_p12);




    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln80_reg_1020 <= add_ln80_fu_926_p2;
                icmp_ln81_reg_1027 <= icmp_ln81_fu_932_p2;
                ret_V_11_reg_1004 <= ret_V_11_fu_794_p2;
                ret_V_11_reg_1004_pp0_iter1_reg <= ret_V_11_reg_1004;
                ret_V_9_reg_998 <= ret_V_9_fu_628_p2;
                tmp_61_reg_1009 <= tmp_61_fu_800_p12;
                tmp_61_reg_1009_pp0_iter1_reg <= tmp_61_reg_1009;
                trunc_ln_reg_1015 <= sub_ln75_fu_840_p2(14 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                imgblock_0_0_V_read_int_reg <= imgblock_0_0_V_read;
                imgblock_0_1_V_read_int_reg <= imgblock_0_1_V_read;
                imgblock_0_2_V_read_int_reg <= imgblock_0_2_V_read;
                imgblock_0_3_V_read_int_reg <= imgblock_0_3_V_read;
                imgblock_0_4_V_read_int_reg <= imgblock_0_4_V_read;
                imgblock_0_5_V_read_int_reg <= imgblock_0_5_V_read;
                imgblock_0_6_V_read_int_reg <= imgblock_0_6_V_read;
                imgblock_0_7_V_read_int_reg <= imgblock_0_7_V_read;
                imgblock_0_8_V_read_int_reg <= imgblock_0_8_V_read;
                imgblock_0_9_V_read_int_reg <= imgblock_0_9_V_read;
                imgblock_1_0_V_read_int_reg <= imgblock_1_0_V_read;
                imgblock_1_1_V_read_int_reg <= imgblock_1_1_V_read;
                imgblock_1_2_V_read_int_reg <= imgblock_1_2_V_read;
                imgblock_1_3_V_read_int_reg <= imgblock_1_3_V_read;
                imgblock_1_4_V_read_int_reg <= imgblock_1_4_V_read;
                imgblock_1_5_V_read_int_reg <= imgblock_1_5_V_read;
                imgblock_1_6_V_read_int_reg <= imgblock_1_6_V_read;
                imgblock_1_7_V_read_int_reg <= imgblock_1_7_V_read;
                imgblock_1_8_V_read_int_reg <= imgblock_1_8_V_read;
                imgblock_1_9_V_read_int_reg <= imgblock_1_9_V_read;
                imgblock_2_0_V_read_int_reg <= imgblock_2_0_V_read;
                imgblock_2_1_V_read_int_reg <= imgblock_2_1_V_read;
                imgblock_2_2_V_read_int_reg <= imgblock_2_2_V_read;
                imgblock_2_3_V_read_int_reg <= imgblock_2_3_V_read;
                imgblock_2_4_V_read_int_reg <= imgblock_2_4_V_read;
                imgblock_2_5_V_read_int_reg <= imgblock_2_5_V_read;
                imgblock_2_6_V_read_int_reg <= imgblock_2_6_V_read;
                imgblock_2_7_V_read_int_reg <= imgblock_2_7_V_read;
                imgblock_2_8_V_read_int_reg <= imgblock_2_8_V_read;
                imgblock_2_9_V_read_int_reg <= imgblock_2_9_V_read;
                imgblock_3_0_V_read_int_reg <= imgblock_3_0_V_read;
                imgblock_3_1_V_read_int_reg <= imgblock_3_1_V_read;
                imgblock_3_2_V_read_int_reg <= imgblock_3_2_V_read;
                imgblock_3_3_V_read_int_reg <= imgblock_3_3_V_read;
                imgblock_3_4_V_read_int_reg <= imgblock_3_4_V_read;
                imgblock_3_5_V_read_int_reg <= imgblock_3_5_V_read;
                imgblock_3_6_V_read_int_reg <= imgblock_3_6_V_read;
                imgblock_3_7_V_read_int_reg <= imgblock_3_7_V_read;
                imgblock_3_8_V_read_int_reg <= imgblock_3_8_V_read;
                imgblock_3_9_V_read_int_reg <= imgblock_3_9_V_read;
                imgblock_4_0_V_read_int_reg <= imgblock_4_0_V_read;
                imgblock_4_1_V_read_int_reg <= imgblock_4_1_V_read;
                imgblock_4_2_V_read_int_reg <= imgblock_4_2_V_read;
                imgblock_4_3_V_read_int_reg <= imgblock_4_3_V_read;
                imgblock_4_4_V_read_int_reg <= imgblock_4_4_V_read;
                imgblock_4_5_V_read_int_reg <= imgblock_4_5_V_read;
                imgblock_4_6_V_read_int_reg <= imgblock_4_6_V_read;
                imgblock_4_7_V_read_int_reg <= imgblock_4_7_V_read;
                imgblock_4_8_V_read_int_reg <= imgblock_4_8_V_read;
                imgblock_4_9_V_read_int_reg <= imgblock_4_9_V_read;
                loop_r_int_reg <= loop_r;
            end if;
        end if;
    end process;
    add_ln1353_16_fu_784_p2 <= std_logic_vector(unsigned(zext_ln1353_33_fu_780_p1) + unsigned(zext_ln215_38_fu_750_p1));
    add_ln1353_fu_618_p2 <= std_logic_vector(unsigned(zext_ln1353_fu_614_p1) + unsigned(zext_ln215_32_fu_584_p1));
    add_ln215_5_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(zext_ln215_fu_462_p1));
    add_ln215_6_fu_674_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(zext_ln215_fu_462_p1));
    add_ln215_fu_466_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(zext_ln215_fu_462_p1));
    add_ln80_fu_926_p2 <= std_logic_vector(signed(sext_ln79_fu_916_p1) + signed(trunc_ln79_fu_912_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= 
        ap_const_lv14_0 when (icmp_ln81_reg_1027(0) = '1') else 
        select_ln80_fu_983_p3;
    icmp_ln81_fu_932_p2 <= "1" when (signed(res_fu_920_p2) < signed(ap_const_lv32_FFFFFFF9)) else "0";
    lhs_V_7_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_536_p2),12));
    lhs_V_8_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_644_p12),11));
    lhs_V_9_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_10_fu_714_p2),12));
    lhs_V_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_476_p12),11));
    or_ln_fu_546_p3 <= (ap_const_lv1_1 & loop_r_int_reg);
    res_fu_920_p2 <= std_logic_vector(signed(sext_ln78_fu_902_p1) + signed(sub_ln79_fu_906_p2));
    ret_V_10_fu_714_p2 <= std_logic_vector(unsigned(lhs_V_8_fu_670_p1) + unsigned(rhs_V_5_fu_710_p1));
    ret_V_11_fu_794_p2 <= std_logic_vector(unsigned(lhs_V_9_fu_720_p1) + unsigned(zext_ln1353_34_fu_790_p1));
    ret_V_9_fu_628_p2 <= std_logic_vector(unsigned(lhs_V_7_fu_542_p1) + unsigned(zext_ln1353_32_fu_624_p1));
    ret_V_fu_536_p2 <= std_logic_vector(unsigned(lhs_V_fu_502_p1) + unsigned(rhs_V_fu_532_p1));
    rhs_V_5_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_684_p12),11));
    rhs_V_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_506_p12),11));
    select_ln80_fu_983_p3 <= 
        sub_ln80_1_fu_964_p2 when (tmp_137_fu_938_p3(0) = '1') else 
        zext_ln80_1_fu_979_p1;
        sext_ln75_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1015),31));

        sext_ln78_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t3_fu_896_p2),32));

        sext_ln79_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t3_fu_896_p2),16));

    shl_ln1_fu_874_p3 <= (tmp_61_reg_1009_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln78_1_fu_885_p3 <= (tmp_61_reg_1009_pp0_iter1_reg & ap_const_lv1_0);
    shl_ln_fu_829_p3 <= (ret_V_9_reg_998 & ap_const_lv2_0);
    sub_ln75_fu_840_p2 <= std_logic_vector(unsigned(zext_ln75_fu_836_p1) - unsigned(zext_ln74_fu_826_p1));
    sub_ln79_fu_906_p2 <= std_logic_vector(unsigned(zext_ln77_fu_870_p1) - unsigned(t1_fu_859_p1));
    sub_ln80_1_fu_964_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(zext_ln80_fu_960_p1));
    sub_ln80_fu_945_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(add_ln80_reg_1020));
    t1_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln75_fu_856_p1),32));
    t2_fu_863_p3 <= (ret_V_11_reg_1004_pp0_iter1_reg & ap_const_lv1_0);
    t3_fu_896_p2 <= std_logic_vector(unsigned(zext_ln78_fu_881_p1) - unsigned(zext_ln78_1_fu_892_p1));
    tmp_137_fu_938_p3 <= add_ln80_reg_1020(15 downto 15);
    tmp_30_fu_950_p4 <= sub_ln80_fu_945_p2(15 downto 3);
    tmp_31_fu_970_p4 <= add_ln80_reg_1020(15 downto 3);
    tmp_55_fu_506_p11 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),4));
    tmp_56_fu_558_p11 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_546_p3),4));
    trunc_ln79_fu_912_p1 <= sub_ln79_fu_906_p2(16 - 1 downto 0);
    zext_ln1353_32_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_618_p2),12));
    zext_ln1353_33_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_754_p12),11));
    zext_ln1353_34_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_16_fu_784_p2),12));
    zext_ln1353_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_588_p12),11));
    zext_ln215_27_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_466_p2),4));
    zext_ln215_32_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_558_p12),11));
    zext_ln215_33_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_5_fu_634_p2),4));
    zext_ln215_35_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_6_fu_674_p2),4));
    zext_ln215_38_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_724_p12),11));
    zext_ln215_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_r_int_reg),3));
    zext_ln74_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_9_reg_998),15));
    zext_ln75_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_829_p3),15));
    zext_ln77_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t2_fu_863_p3),32));
    zext_ln78_1_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln78_1_fu_885_p3),14));
    zext_ln78_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_874_p3),14));
    zext_ln80_1_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_970_p4),14));
    zext_ln80_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_950_p4),14));
end behav;
